
RTOS_Udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008db0  08008db0  00009db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dcc  08008dcc  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008dcc  08008dcc  00009dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd4  08008dd4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd4  08008dd4  00009dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00009dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008ddc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af0  2000007c  08008e58  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b6c  08008e58  0000ab6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017249  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd2  00000000  00000000  000212f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  000250c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef3  00000000  00000000  00026450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a7e  00000000  00000000  00027343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a592  00000000  00000000  0003fdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b14  00000000  00000000  0005a353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efe67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  000efeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f5348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d98 	.word	0x08008d98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008d98 	.word	0x08008d98

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fc26 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f812 	bl	8000500 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004dc:	f000 f878 	bl	80005d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f958 	bl	8000794 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f894 	bl	8000610 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004e8:	f000 f8c0 	bl	800066c <MX_I2S2_Init>
  MX_I2S3_Init();
 80004ec:	f000 f8ec 	bl	80006c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f0:	f000 f91a 	bl	8000728 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f4:	f007 fff2 	bl	80084dc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f008 f816 	bl	8008528 <MX_USB_HOST_Process>
 80004fc:	e7fc      	b.n	80004f8 <main+0x28>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	@ 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	@ 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fbac 	bl	8008c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <SystemClock_Config+0xc8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	4a26      	ldr	r2, [pc, #152]	@ (80005c8 <SystemClock_Config+0xc8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	@ 0x40
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b21      	ldr	r3, [pc, #132]	@ (80005cc <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a20      	ldr	r2, [pc, #128]	@ (80005cc <SystemClock_Config+0xcc>)
 800054a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000560:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000570:	2304      	movs	r3, #4
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000574:	23c0      	movs	r3, #192	@ 0xc0
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000578:	2304      	movs	r3, #4
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f003 fdfd 	bl	8004184 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000590:	f000 f9da 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2103      	movs	r1, #3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 f85f 	bl	8004674 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005bc:	f000 f9c4 	bl	8000948 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	@ 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005e6:	2301      	movs	r3, #1
 80005e8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80005ea:	23c8      	movs	r3, #200	@ 0xc8
 80005ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80005ee:	2305      	movs	r3, #5
 80005f0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 fa47 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000604:	f000 f9a0 	bl	8000948 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f002 ffb5 	bl	80035bc <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f976 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000098 	.word	0x20000098
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_I2S2_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_I2S2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <MX_I2S2_Init+0x58>)
 8000694:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_I2S2_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_I2S2_Init+0x50>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_I2S2_Init+0x50>)
 80006aa:	f003 f8cb 	bl	8003844 <HAL_I2S_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f948 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000ec 	.word	0x200000ec
 80006c0:	40003800 	.word	0x40003800
 80006c4:	00017700 	.word	0x00017700

080006c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_I2S3_Init+0x54>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <MX_I2S3_Init+0x58>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2S3_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_I2S3_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_I2S3_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_I2S3_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_I2S3_Init+0x54>)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <MX_I2S3_Init+0x5c>)
 80006f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_I2S3_Init+0x54>)
 8000708:	f003 f89c 	bl	8003844 <HAL_I2S_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000712:	f000 f919 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000134 	.word	0x20000134
 8000720:	40003c00 	.word	0x40003c00
 8000724:	00017700 	.word	0x00017700

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_SPI1_Init+0x64>)
 800077a:	f004 fad9 	bl	8004d30 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f8e0 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000017c 	.word	0x2000017c
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b61      	ldr	r3, [pc, #388]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a60      	ldr	r2, [pc, #384]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a59      	ldr	r2, [pc, #356]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b57      	ldr	r3, [pc, #348]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b53      	ldr	r3, [pc, #332]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a52      	ldr	r2, [pc, #328]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b50      	ldr	r3, [pc, #320]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b4c      	ldr	r3, [pc, #304]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a4b      	ldr	r2, [pc, #300]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b49      	ldr	r3, [pc, #292]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b45      	ldr	r3, [pc, #276]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a44      	ldr	r2, [pc, #272]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b42      	ldr	r3, [pc, #264]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b3e      	ldr	r3, [pc, #248]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a3d      	ldr	r2, [pc, #244]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b3b      	ldr	r3, [pc, #236]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4838      	ldr	r0, [pc, #224]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 8000858:	f000 fd7c 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4836      	ldr	r0, [pc, #216]	@ (800093c <MX_GPIO_Init+0x1a8>)
 8000862:	f000 fd77 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800086c:	4834      	ldr	r0, [pc, #208]	@ (8000940 <MX_GPIO_Init+0x1ac>)
 800086e:	f000 fd71 	bl	8001354 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000872:	2304      	movs	r3, #4
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	482c      	ldr	r0, [pc, #176]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 8000886:	f000 fbe1 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 80008a2:	f000 fbd3 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008a6:	2332      	movs	r3, #50	@ 0x32
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481f      	ldr	r0, [pc, #124]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 80008bc:	f000 fbc6 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4819      	ldr	r0, [pc, #100]	@ (800093c <MX_GPIO_Init+0x1a8>)
 80008d8:	f000 fbb8 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4814      	ldr	r0, [pc, #80]	@ (8000944 <MX_GPIO_Init+0x1b0>)
 80008f2:	f000 fbab 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <MX_GPIO_Init+0x1ac>)
 8000910:	f000 fb9c 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000914:	2320      	movs	r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_GPIO_Init+0x1ac>)
 8000928:	f000 fb90 	bl	800104c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	@ 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40021000 	.word	0x40021000
 800093c:	40020800 	.word	0x40020800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40020000 	.word	0x40020000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	@ 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000992:	2007      	movs	r0, #7
 8000994:	f000 fb18 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <HAL_I2C_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f4:	2304      	movs	r3, #4
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <HAL_I2C_MspInit+0x8c>)
 8000a00:	f000 fb24 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	@ 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400

08000a34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	@ 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a59      	ldr	r2, [pc, #356]	@ (8000bb8 <HAL_I2S_MspInit+0x184>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d15b      	bne.n	8000b0e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
 8000a5a:	4b58      	ldr	r3, [pc, #352]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	4a57      	ldr	r2, [pc, #348]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a66:	4b55      	ldr	r3, [pc, #340]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
 8000a76:	4b51      	ldr	r3, [pc, #324]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a50      	ldr	r2, [pc, #320]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b4e      	ldr	r3, [pc, #312]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	4b4a      	ldr	r3, [pc, #296]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a49      	ldr	r2, [pc, #292]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b47      	ldr	r3, [pc, #284]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000aba:	2306      	movs	r3, #6
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	483e      	ldr	r0, [pc, #248]	@ (8000bc0 <HAL_I2S_MspInit+0x18c>)
 8000ac6:	f000 fac1 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aca:	2308      	movs	r3, #8
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ada:	2305      	movs	r3, #5
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4836      	ldr	r0, [pc, #216]	@ (8000bc0 <HAL_I2S_MspInit+0x18c>)
 8000ae6:	f000 fab1 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000aea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afc:	2305      	movs	r3, #5
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	482f      	ldr	r0, [pc, #188]	@ (8000bc4 <HAL_I2S_MspInit+0x190>)
 8000b08:	f000 faa0 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b0c:	e04f      	b.n	8000bae <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc8 <HAL_I2S_MspInit+0x194>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d14a      	bne.n	8000bae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a26      	ldr	r2, [pc, #152]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <HAL_I2S_MspInit+0x188>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <HAL_I2S_MspInit+0x198>)
 8000b88:	f000 fa60 	bl	800104c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b8c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_I2S_MspInit+0x18c>)
 8000baa:	f000 fa4f 	bl	800104c <HAL_GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	@ 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40003800 	.word	0x40003800
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40003c00 	.word	0x40003c00
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_SPI_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c2a:	23e0      	movs	r3, #224	@ 0xe0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <HAL_SPI_MspInit+0x8c>)
 8000c46:	f000 fa01 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40013000 	.word	0x40013000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <OTG_FS_IRQHandler+0x10>)
 8000c9e:	f000 fe53 	bl	8001948 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000640 	.word	0x20000640

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f007 ffcd 	bl	8008c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fbe5 	bl	80004d0 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d14:	08008ddc 	.word	0x08008ddc
  ldr r2, =_sbss
 8000d18:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d1c:	20000b6c 	.word	0x20000b6c

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f93b 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fdfc 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f953 	bl	8001032 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f91b 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	@ (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001d4 	.word	0x200001d4

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	@ (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	@ (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e159      	b.n	800131c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8148 	bne.w	8001316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80a2 	beq.w	8001316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b57      	ldr	r3, [pc, #348]	@ (8001334 <HAL_GPIO_Init+0x2e8>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a56      	ldr	r2, [pc, #344]	@ (8001334 <HAL_GPIO_Init+0x2e8>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b54      	ldr	r3, [pc, #336]	@ (8001334 <HAL_GPIO_Init+0x2e8>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <HAL_GPIO_Init+0x2ec>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a49      	ldr	r2, [pc, #292]	@ (800133c <HAL_GPIO_Init+0x2f0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x202>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a48      	ldr	r2, [pc, #288]	@ (8001340 <HAL_GPIO_Init+0x2f4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x1fe>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a47      	ldr	r2, [pc, #284]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x1fa>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a46      	ldr	r2, [pc, #280]	@ (8001348 <HAL_GPIO_Init+0x2fc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x1f6>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a45      	ldr	r2, [pc, #276]	@ (800134c <HAL_GPIO_Init+0x300>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x1f2>
 800123a:	2304      	movs	r3, #4
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x204>
 800123e:	2307      	movs	r3, #7
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x204>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x204>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x204>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x204>
 800124e:	2300      	movs	r3, #0
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001260:	4935      	ldr	r1, [pc, #212]	@ (8001338 <HAL_GPIO_Init+0x2ec>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126e:	4b38      	ldr	r3, [pc, #224]	@ (8001350 <HAL_GPIO_Init+0x304>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001292:	4a2f      	ldr	r2, [pc, #188]	@ (8001350 <HAL_GPIO_Init+0x304>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001298:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <HAL_GPIO_Init+0x304>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012bc:	4a24      	ldr	r2, [pc, #144]	@ (8001350 <HAL_GPIO_Init+0x304>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_GPIO_Init+0x304>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001350 <HAL_GPIO_Init+0x304>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_GPIO_Init+0x304>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001310:	4a0f      	ldr	r2, [pc, #60]	@ (8001350 <HAL_GPIO_Init+0x304>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	f67f aea2 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af02      	add	r7, sp, #8
 800138c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e059      	b.n	800144c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f007 f8f0 	bl	8008598 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2203      	movs	r2, #3
 80013bc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013c6:	d102      	bne.n	80013ce <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fdaa 	bl	8004f2c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7c1a      	ldrb	r2, [r3, #16]
 80013e0:	f88d 2000 	strb.w	r2, [sp]
 80013e4:	3304      	adds	r3, #4
 80013e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e8:	f003 fd2b 	bl	8004e42 <USB_CoreInit>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2202      	movs	r2, #2
 80013f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e026      	b.n	800144c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fda2 	bl	8004f4e <USB_SetCurrentMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e017      	b.n	800144c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7c1a      	ldrb	r2, [r3, #16]
 8001424:	f88d 2000 	strb.w	r2, [sp]
 8001428:	3304      	adds	r3, #4
 800142a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142c:	f003 ff44 	bl	80052b8 <USB_HostInit>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2202      	movs	r2, #2
 800143a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e004      	b.n	800144c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08b      	sub	sp, #44	@ 0x2c
 8001458:	af04      	add	r7, sp, #16
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	70fb      	strb	r3, [r7, #3]
 8001466:	460b      	mov	r3, r1
 8001468:	70bb      	strb	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800146e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001470:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_HCD_HC_Init+0x2c>
 800147c:	2302      	movs	r3, #2
 800147e:	e09d      	b.n	80015bc <HAL_HCD_HC_Init+0x168>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001488:	78fa      	ldrb	r2, [r7, #3]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3319      	adds	r3, #25
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3314      	adds	r3, #20
 80014ac:	787a      	ldrb	r2, [r7, #1]
 80014ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3315      	adds	r3, #21
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014c4:	78fa      	ldrb	r2, [r7, #3]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3326      	adds	r3, #38	@ 0x26
 80014d4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80014d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	78bb      	ldrb	r3, [r7, #2]
 80014de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014e2:	b2d8      	uxtb	r0, r3
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	3316      	adds	r3, #22
 80014f2:	4602      	mov	r2, r0
 80014f4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fbc8 	bl	8001c90 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001500:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001504:	2b00      	cmp	r3, #0
 8001506:	da0a      	bge.n	800151e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3317      	adds	r3, #23
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e009      	b.n	8001532 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800151e:	78fa      	ldrb	r2, [r7, #3]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3317      	adds	r3, #23
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 f80c 	bl	8005554 <USB_GetHostSpeed>
 800153c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800153e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10b      	bne.n	800155e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001546:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <HAL_HCD_HC_Init+0x10a>
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2bbc      	cmp	r3, #188	@ 0xbc
 8001558:	d901      	bls.n	800155e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800155a:	23bc      	movs	r3, #188	@ 0xbc
 800155c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3318      	adds	r3, #24
 800156e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	b298      	uxth	r0, r3
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	3328      	adds	r3, #40	@ 0x28
 8001588:	4602      	mov	r2, r0
 800158a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	b29b      	uxth	r3, r3
 8001594:	787c      	ldrb	r4, [r7, #1]
 8001596:	78ba      	ldrb	r2, [r7, #2]
 8001598:	78f9      	ldrb	r1, [r7, #3]
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4623      	mov	r3, r4
 80015aa:	f003 fffb 	bl	80055a4 <USB_HC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}

080015c4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_HCD_HC_Halt+0x1e>
 80015de:	2302      	movs	r3, #2
 80015e0:	e00f      	b.n	8001602 <HAL_HCD_HC_Halt+0x3e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fb41 	bl	8005c7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	70fb      	strb	r3, [r7, #3]
 800161e:	460b      	mov	r3, r1
 8001620:	70bb      	strb	r3, [r7, #2]
 8001622:	4613      	mov	r3, r2
 8001624:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3317      	adds	r3, #23
 8001636:	78ba      	ldrb	r2, [r7, #2]
 8001638:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3326      	adds	r3, #38	@ 0x26
 800164a:	787a      	ldrb	r2, [r7, #1]
 800164c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800164e:	7c3b      	ldrb	r3, [r7, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d114      	bne.n	800167e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	332a      	adds	r3, #42	@ 0x2a
 8001664:	2203      	movs	r2, #3
 8001666:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3319      	adds	r3, #25
 8001678:	7f3a      	ldrb	r2, [r7, #28]
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e009      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800167e:	78fa      	ldrb	r2, [r7, #3]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	332a      	adds	r3, #42	@ 0x2a
 800168e:	2202      	movs	r2, #2
 8001690:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001692:	787b      	ldrb	r3, [r7, #1]
 8001694:	2b03      	cmp	r3, #3
 8001696:	f200 8102 	bhi.w	800189e <HAL_HCD_HC_SubmitRequest+0x292>
 800169a:	a201      	add	r2, pc, #4	@ (adr r2, 80016a0 <HAL_HCD_HC_SubmitRequest+0x94>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	08001889 	.word	0x08001889
 80016a8:	08001775 	.word	0x08001775
 80016ac:	080017ff 	.word	0x080017ff
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80016b0:	7c3b      	ldrb	r3, [r7, #16]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	f040 80f5 	bne.w	80018a2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80016b8:	78bb      	ldrb	r3, [r7, #2]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d12d      	bne.n	800171a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80016be:	8b3b      	ldrh	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	333d      	adds	r3, #61	@ 0x3d
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	333d      	adds	r3, #61	@ 0x3d
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	332a      	adds	r3, #42	@ 0x2a
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001702:	e0ce      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	332a      	adds	r3, #42	@ 0x2a
 8001714:	2202      	movs	r2, #2
 8001716:	701a      	strb	r2, [r3, #0]
      break;
 8001718:	e0c3      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	331a      	adds	r3, #26
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 80b8 	bne.w	80018a2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	333c      	adds	r3, #60	@ 0x3c
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10a      	bne.n	800175e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	332a      	adds	r3, #42	@ 0x2a
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
      break;
 800175c:	e0a1      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	1a9b      	subs	r3, r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	332a      	adds	r3, #42	@ 0x2a
 800176e:	2202      	movs	r2, #2
 8001770:	701a      	strb	r2, [r3, #0]
      break;
 8001772:	e096      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001774:	78bb      	ldrb	r3, [r7, #2]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d120      	bne.n	80017bc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	333d      	adds	r3, #61	@ 0x3d
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	332a      	adds	r3, #42	@ 0x2a
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017a4:	e07e      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	332a      	adds	r3, #42	@ 0x2a
 80017b6:	2202      	movs	r2, #2
 80017b8:	701a      	strb	r2, [r3, #0]
      break;
 80017ba:	e073      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	333c      	adds	r3, #60	@ 0x3c
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	332a      	adds	r3, #42	@ 0x2a
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
      break;
 80017e6:	e05d      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	332a      	adds	r3, #42	@ 0x2a
 80017f8:	2202      	movs	r2, #2
 80017fa:	701a      	strb	r2, [r3, #0]
      break;
 80017fc:	e052      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017fe:	78bb      	ldrb	r3, [r7, #2]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d120      	bne.n	8001846 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	333d      	adds	r3, #61	@ 0x3d
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	332a      	adds	r3, #42	@ 0x2a
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800182e:	e039      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	332a      	adds	r3, #42	@ 0x2a
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]
      break;
 8001844:	e02e      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	333c      	adds	r3, #60	@ 0x3c
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10a      	bne.n	8001872 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	332a      	adds	r3, #42	@ 0x2a
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
      break;
 8001870:	e018      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	332a      	adds	r3, #42	@ 0x2a
 8001882:	2202      	movs	r2, #2
 8001884:	701a      	strb	r2, [r3, #0]
      break;
 8001886:	e00d      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	332a      	adds	r3, #42	@ 0x2a
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
      break;
 800189c:	e002      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800189e:	bf00      	nop
 80018a0:	e000      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80018a2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	332c      	adds	r3, #44	@ 0x2c
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	8b39      	ldrh	r1, [r7, #24]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4403      	add	r3, r0
 80018c8:	3334      	adds	r3, #52	@ 0x34
 80018ca:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	334c      	adds	r3, #76	@ 0x4c
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3338      	adds	r3, #56	@ 0x38
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3315      	adds	r3, #21
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	334d      	adds	r3, #77	@ 0x4d
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	3310      	adds	r3, #16
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	1d19      	adds	r1, r3, #4
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	799b      	ldrb	r3, [r3, #6]
 8001936:	461a      	mov	r2, r3
 8001938:	f003 ff4a 	bl	80057d0 <USB_HC_StartXfer>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop

08001948 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fc6b 	bl	800523a <USB_GetMode>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	f040 80fb 	bne.w	8001b62 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fc2e 	bl	80051d2 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80f1 	beq.w	8001b60 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f003 fc25 	bl	80051d2 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001992:	d104      	bne.n	800199e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800199c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fc15 	bl	80051d2 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019b2:	d104      	bne.n	80019be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80019bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fc05 	bl	80051d2 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80019d2:	d104      	bne.n	80019de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fbf5 	bl	80051d2 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d103      	bne.n	80019fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2202      	movs	r2, #2
 80019f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fbe7 	bl	80051d2 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a0e:	d120      	bne.n	8001a52 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a18:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d113      	bne.n	8001a52 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	6938      	ldr	r0, [r7, #16]
 8001a2e:	f003 fada 	bl	8004fe6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a32:	6938      	ldr	r0, [r7, #16]
 8001a34:	f003 fb09 	bl	800504a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7a5b      	ldrb	r3, [r3, #9]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d105      	bne.n	8001a4c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fce4 	bl	8005414 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f006 fe21 	bl	8008694 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fbbb 	bl	80051d2 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a66:	d102      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 fd33 	bl	80034d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fbad 	bl	80051d2 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d106      	bne.n	8001a90 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f006 fdea 	bl	800865c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fb9c 	bl	80051d2 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001aa4:	d139      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 f8d4 	bl	8005c58 <USB_HC_ReadInterrupt>
 8001ab0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e025      	b.n	8001b04 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d018      	beq.n	8001afe <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ae2:	d106      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f905 	bl	8001cfa <HCD_HC_IN_IRQHandler>
 8001af0:	e005      	b.n	8001afe <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 ff67 	bl	80029cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	795b      	ldrb	r3, [r3, #5]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d3d3      	bcc.n	8001ab8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fb57 	bl	80051d2 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d101      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x1ea>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_HCD_IRQHandler+0x1ec>
 8001b32:	2300      	movs	r3, #0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0210 	bic.w	r2, r2, #16
 8001b46:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f001 fbe4 	bl	8003316 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0210 	orr.w	r2, r2, #16
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	e000      	b.n	8001b62 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b60:	bf00      	nop
    }
  }
}
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_HCD_Start+0x16>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e013      	b.n	8001ba6 <HAL_HCD_Start+0x3e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fca8 	bl	80054e2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f9b7 	bl	8004f0a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_HCD_Stop+0x16>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e00d      	b.n	8001be0 <HAL_HCD_Stop+0x32>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 f972 	bl	8005eba <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fc4a 	bl	800548e <USB_ResetPort>
 8001bfa:	4603      	mov	r3, r0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	334c      	adds	r3, #76	@ 0x4c
 8001c20:	781b      	ldrb	r3, [r3, #0]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	3338      	adds	r3, #56	@ 0x38
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fc8c 	bl	8005582 <USB_GetCurrentFrame>
 8001c6a:	4603      	mov	r3, r0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fc67 	bl	8005554 <USB_GetHostSpeed>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	331a      	adds	r3, #26
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	331b      	adds	r3, #27
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3325      	adds	r3, #37	@ 0x25
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3324      	adds	r3, #36	@ 0x24
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fa6d 	bl	80051f8 <USB_ReadChInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d11a      	bne.n	8001d5e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d34:	461a      	mov	r2, r3
 8001d36:	2304      	movs	r3, #4
 8001d38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	334d      	adds	r3, #77	@ 0x4d
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 ff8f 	bl	8005c7a <USB_HC_Halt>
 8001d5c:	e09e      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fa46 	bl	80051f8 <USB_ReadChInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d76:	d11b      	bne.n	8001db0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d84:	461a      	mov	r2, r3
 8001d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	334d      	adds	r3, #77	@ 0x4d
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 ff66 	bl	8005c7a <USB_HC_Halt>
 8001dae:	e075      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fa1d 	bl	80051f8 <USB_ReadChInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11a      	bne.n	8001dfe <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	334d      	adds	r3, #77	@ 0x4d
 8001dea:	2206      	movs	r2, #6
 8001dec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 ff3f 	bl	8005c7a <USB_HC_Halt>
 8001dfc:	e04e      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 f9f6 	bl	80051f8 <USB_ReadChInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e16:	d11b      	bne.n	8001e50 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e24:	461a      	mov	r2, r3
 8001e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	334d      	adds	r3, #77	@ 0x4d
 8001e3c:	2209      	movs	r2, #9
 8001e3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 ff16 	bl	8005c7a <USB_HC_Halt>
 8001e4e:	e025      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 f9cd 	bl	80051f8 <USB_ReadChInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e64:	2b80      	cmp	r3, #128	@ 0x80
 8001e66:	d119      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	334d      	adds	r3, #77	@ 0x4d
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 feef 	bl	8005c7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 f9a7 	bl	80051f8 <USB_ReadChInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eb4:	d112      	bne.n	8001edc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fedb 	bl	8005c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed6:	6093      	str	r3, [r2, #8]
 8001ed8:	f000 bd75 	b.w	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f987 	bl	80051f8 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	f040 8128 	bne.w	8002146 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f02:	461a      	mov	r2, r3
 8001f04:	2320      	movs	r3, #32
 8001f06:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	331b      	adds	r3, #27
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d119      	bne.n	8001f52 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	331b      	adds	r3, #27
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	0151      	lsls	r1, r2, #5
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	440a      	add	r2, r1
 8001f48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f50:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	799b      	ldrb	r3, [r3, #6]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01b      	beq.n	8001f92 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3330      	adds	r3, #48	@ 0x30
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	1ac9      	subs	r1, r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4403      	add	r3, r0
 8001f8e:	3338      	adds	r3, #56	@ 0x38
 8001f90:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	334d      	adds	r3, #77	@ 0x4d
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3344      	adds	r3, #68	@ 0x44
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2301      	movs	r3, #1
 8001fca:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3326      	adds	r3, #38	@ 0x26
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3326      	adds	r3, #38	@ 0x26
 8001ff2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d110      	bne.n	800201a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fe3a 	bl	8005c7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002012:	461a      	mov	r2, r3
 8002014:	2310      	movs	r3, #16
 8002016:	6093      	str	r3, [r2, #8]
 8002018:	e03d      	b.n	8002096 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3326      	adds	r3, #38	@ 0x26
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d00a      	beq.n	8002046 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3326      	adds	r3, #38	@ 0x26
 8002040:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002042:	2b01      	cmp	r3, #1
 8002044:	d127      	bne.n	8002096 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	0151      	lsls	r1, r2, #5
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	440a      	add	r2, r1
 800205c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002060:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002064:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	334c      	adds	r3, #76	@ 0x4c
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	334c      	adds	r3, #76	@ 0x4c
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f006 fb0d 	bl	80086b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	799b      	ldrb	r3, [r3, #6]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d13b      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3338      	adds	r3, #56	@ 0x38
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4403      	add	r3, r0
 80020be:	3328      	adds	r3, #40	@ 0x28
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	440b      	add	r3, r1
 80020c4:	1e59      	subs	r1, r3, #1
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4403      	add	r3, r0
 80020d4:	3328      	adds	r3, #40	@ 0x28
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8470 	beq.w	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	333c      	adds	r3, #60	@ 0x3c
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2d8      	uxtb	r0, r3
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	333c      	adds	r3, #60	@ 0x3c
 800210e:	4602      	mov	r2, r0
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	f000 bc58 	b.w	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	333c      	adds	r3, #60	@ 0x3c
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2d8      	uxtb	r0, r3
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	333c      	adds	r3, #60	@ 0x3c
 800213e:	4602      	mov	r2, r0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	f000 bc40 	b.w	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f852 	bl	80051f8 <USB_ReadChInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b20      	cmp	r3, #32
 800215c:	d131      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	2320      	movs	r3, #32
 800216e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	331a      	adds	r3, #26
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	f040 841f 	bne.w	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	331b      	adds	r3, #27
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	334d      	adds	r3, #77	@ 0x4d
 80021ac:	2203      	movs	r2, #3
 80021ae:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fd5e 	bl	8005c7a <USB_HC_Halt>
 80021be:	f000 bc02 	b.w	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f814 	bl	80051f8 <USB_ReadChInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f040 8305 	bne.w	80027e6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e8:	461a      	mov	r2, r3
 80021ea:	2302      	movs	r3, #2
 80021ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	334d      	adds	r3, #77	@ 0x4d
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d114      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	334d      	adds	r3, #77	@ 0x4d
 8002214:	2202      	movs	r2, #2
 8002216:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	334c      	adds	r3, #76	@ 0x4c
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e2cc      	b.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	334d      	adds	r3, #77	@ 0x4d
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d114      	bne.n	800226e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	334d      	adds	r3, #77	@ 0x4d
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	334c      	adds	r3, #76	@ 0x4c
 8002268:	2205      	movs	r2, #5
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e2ac      	b.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	334d      	adds	r3, #77	@ 0x4d
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b07      	cmp	r3, #7
 8002282:	d00b      	beq.n	800229c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	334d      	adds	r3, #77	@ 0x4d
 8002294:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002296:	2b09      	cmp	r3, #9
 8002298:	f040 80a6 	bne.w	80023e8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	334d      	adds	r3, #77	@ 0x4d
 80022ac:	2202      	movs	r2, #2
 80022ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3344      	adds	r3, #68	@ 0x44
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4403      	add	r3, r0
 80022d0:	3344      	adds	r3, #68	@ 0x44
 80022d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3344      	adds	r3, #68	@ 0x44
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d943      	bls.n	8002372 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3344      	adds	r3, #68	@ 0x44
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	331a      	adds	r3, #26
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d123      	bne.n	800235c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	331b      	adds	r3, #27
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	331c      	adds	r3, #28
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	0151      	lsls	r1, r2, #5
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	440a      	add	r2, r1
 8002352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	334c      	adds	r3, #76	@ 0x4c
 800236c:	2204      	movs	r2, #4
 800236e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002370:	e229      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	334c      	adds	r3, #76	@ 0x4c
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3326      	adds	r3, #38	@ 0x26
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3326      	adds	r3, #38	@ 0x26
 80023ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 8209 	bne.w	80027c6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023e6:	e1ee      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	334d      	adds	r3, #77	@ 0x4d
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	f040 80c8 	bne.w	8002590 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	334d      	adds	r3, #77	@ 0x4d
 8002410:	2202      	movs	r2, #2
 8002412:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	331b      	adds	r3, #27
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	f040 81ce 	bne.w	80027c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3326      	adds	r3, #38	@ 0x26
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d16b      	bne.n	800251a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3348      	adds	r3, #72	@ 0x48
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	1c59      	adds	r1, r3, #1
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4403      	add	r3, r0
 8002462:	3348      	adds	r3, #72	@ 0x48
 8002464:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3348      	adds	r3, #72	@ 0x48
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d943      	bls.n	8002504 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3348      	adds	r3, #72	@ 0x48
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	331b      	adds	r3, #27
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3344      	adds	r3, #68	@ 0x44
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d809      	bhi.n	80024ce <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	331c      	adds	r3, #28
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	0151      	lsls	r1, r2, #5
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	440a      	add	r2, r1
 80024e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ec:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	334c      	adds	r3, #76	@ 0x4c
 80024fe:	2204      	movs	r2, #4
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e014      	b.n	800252e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	334c      	adds	r3, #76	@ 0x4c
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e009      	b.n	800252e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334c      	adds	r3, #76	@ 0x4c
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3326      	adds	r3, #38	@ 0x26
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3326      	adds	r3, #38	@ 0x26
 8002554:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002556:	2b02      	cmp	r3, #2
 8002558:	f040 8136 	bne.w	80027c8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002572:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800257a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e11b      	b.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	334d      	adds	r3, #77	@ 0x4d
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	f040 8081 	bne.w	80026aa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	334d      	adds	r3, #77	@ 0x4d
 80025b8:	2202      	movs	r2, #2
 80025ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	331b      	adds	r3, #27
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	f040 80fa 	bne.w	80027c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	334c      	adds	r3, #76	@ 0x4c
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	0151      	lsls	r1, r2, #5
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	440a      	add	r2, r1
 80025fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002606:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002626:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	0151      	lsls	r1, r2, #5
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	440a      	add	r2, r1
 800263e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002642:	f023 0320 	bic.w	r3, r3, #32
 8002646:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3326      	adds	r3, #38	@ 0x26
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	3326      	adds	r3, #38	@ 0x26
 800266e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002670:	2b02      	cmp	r3, #2
 8002672:	f040 80a9 	bne.w	80027c8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800268c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002694:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e08e      	b.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	334d      	adds	r3, #77	@ 0x4d
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d143      	bne.n	8002748 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	334d      	adds	r3, #77	@ 0x4d
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	334c      	adds	r3, #76	@ 0x4c
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3326      	adds	r3, #38	@ 0x26
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3326      	adds	r3, #38	@ 0x26
 800270e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002710:	2b02      	cmp	r3, #2
 8002712:	d159      	bne.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800272a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002732:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e03f      	b.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334d      	adds	r3, #77	@ 0x4d
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b08      	cmp	r3, #8
 800275c:	d126      	bne.n	80027ac <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	334d      	adds	r3, #77	@ 0x4d
 800276e:	2202      	movs	r2, #2
 8002770:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3344      	adds	r3, #68	@ 0x44
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4403      	add	r3, r0
 8002792:	3344      	adds	r3, #68	@ 0x44
 8002794:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	334c      	adds	r3, #76	@ 0x4c
 80027a6:	2204      	movs	r2, #4
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e00d      	b.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	334d      	adds	r3, #77	@ 0x4d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	f000 8100 	beq.w	80029c4 <HCD_HC_IN_IRQHandler+0xcca>
 80027c4:	e000      	b.n	80027c8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	334c      	adds	r3, #76	@ 0x4c
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f005 ff66 	bl	80086b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027e4:	e0ef      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 fd02 	bl	80051f8 <USB_ReadChInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	2b40      	cmp	r3, #64	@ 0x40
 80027fc:	d12f      	bne.n	800285e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	2340      	movs	r3, #64	@ 0x40
 800280e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334d      	adds	r3, #77	@ 0x4d
 8002820:	2205      	movs	r2, #5
 8002822:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	331a      	adds	r3, #26
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3344      	adds	r3, #68	@ 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fa0f 	bl	8005c7a <USB_HC_Halt>
 800285c:	e0b3      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fcc6 	bl	80051f8 <USB_ReadChInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b10      	cmp	r3, #16
 8002874:	f040 80a7 	bne.w	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3326      	adds	r3, #38	@ 0x26
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d11b      	bne.n	80028c6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3344      	adds	r3, #68	@ 0x44
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	334d      	adds	r3, #77	@ 0x4d
 80028b2:	2204      	movs	r2, #4
 80028b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 f9db 	bl	8005c7a <USB_HC_Halt>
 80028c4:	e03f      	b.n	8002946 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3326      	adds	r3, #38	@ 0x26
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3326      	adds	r3, #38	@ 0x26
 80028ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d129      	bne.n	8002946 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3344      	adds	r3, #68	@ 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	799b      	ldrb	r3, [r3, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HCD_HC_IN_IRQHandler+0xc2a>
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	331b      	adds	r3, #27
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d110      	bne.n	8002946 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334d      	adds	r3, #77	@ 0x4d
 8002934:	2204      	movs	r2, #4
 8002936:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f003 f99a 	bl	8005c7a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	331b      	adds	r3, #27
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d129      	bne.n	80029b0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	331b      	adds	r3, #27
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800298a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	0151      	lsls	r1, r2, #5
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	440a      	add	r2, r1
 80029a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029aa:	f043 0320 	orr.w	r3, r3, #32
 80029ae:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	2310      	movs	r3, #16
 80029c0:	6093      	str	r3, [r2, #8]
 80029c2:	e000      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029c4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fc04 	bl	80051f8 <USB_ReadChInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d11b      	bne.n	8002a32 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	2304      	movs	r3, #4
 8002a0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	334d      	adds	r3, #77	@ 0x4d
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 f926 	bl	8005c7a <USB_HC_Halt>
 8002a2e:	f000 bc6f 	b.w	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fbdc 	bl	80051f8 <USB_ReadChInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	f040 8082 	bne.w	8002b50 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3319      	adds	r3, #25
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d124      	bne.n	8002abe <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3319      	adds	r3, #25
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	334c      	adds	r3, #76	@ 0x4c
 8002a98:	2202      	movs	r2, #2
 8002a9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334d      	adds	r3, #77	@ 0x4d
 8002aac:	2203      	movs	r2, #3
 8002aae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 f8de 	bl	8005c7a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	331a      	adds	r3, #26
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f040 841d 	bne.w	8003310 <HCD_HC_OUT_IRQHandler+0x944>
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	331b      	adds	r3, #27
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 8411 	bne.w	8003310 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3326      	adds	r3, #38	@ 0x26
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d009      	beq.n	8002b18 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	331b      	adds	r3, #27
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	334d      	adds	r3, #77	@ 0x4d
 8002b28:	2203      	movs	r2, #3
 8002b2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 f8a0 	bl	8005c7a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3344      	adds	r3, #68	@ 0x44
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e3df      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 fb4d 	bl	80051f8 <USB_ReadChInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b68:	d111      	bne.n	8002b8e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 f877 	bl	8005c7a <USB_HC_Halt>
 8002b8c:	e3c0      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fb2e 	bl	80051f8 <USB_ReadChInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d168      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3344      	adds	r3, #68	@ 0x44
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 fb18 	bl	80051f8 <USB_ReadChInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	d112      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3319      	adds	r3, #25
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2340      	movs	r3, #64	@ 0x40
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	331b      	adds	r3, #27
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d019      	beq.n	8002c42 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	331b      	adds	r3, #27
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	0151      	lsls	r1, r2, #5
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	440a      	add	r2, r1
 8002c38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c40:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2301      	movs	r3, #1
 8002c52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	@ 0x4d
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 f802 	bl	8005c7a <USB_HC_Halt>
 8002c76:	e34b      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 fab9 	bl	80051f8 <USB_ReadChInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d139      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334d      	adds	r3, #77	@ 0x4d
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	331a      	adds	r3, #26
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3319      	adds	r3, #25
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3344      	adds	r3, #68	@ 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 ffc5 	bl	8005c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2340      	movs	r3, #64	@ 0x40
 8002d00:	6093      	str	r3, [r2, #8]
 8002d02:	e305      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fa73 	bl	80051f8 <USB_ReadChInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d11a      	bne.n	8002d52 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	334d      	adds	r3, #77	@ 0x4d
 8002d3e:	2206      	movs	r2, #6
 8002d40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 ff95 	bl	8005c7a <USB_HC_Halt>
 8002d50:	e2de      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fa4c 	bl	80051f8 <USB_ReadChInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d144      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3344      	adds	r3, #68	@ 0x44
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334d      	adds	r3, #77	@ 0x4d
 8002d8e:	2204      	movs	r2, #4
 8002d90:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3319      	adds	r3, #25
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d114      	bne.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3318      	adds	r3, #24
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3319      	adds	r3, #25
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 ff4d 	bl	8005c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2310      	movs	r3, #16
 8002df0:	6093      	str	r3, [r2, #8]
 8002df2:	e28d      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 f9fb 	bl	80051f8 <USB_ReadChInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b80      	cmp	r3, #128	@ 0x80
 8002e0a:	d169      	bne.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	799b      	ldrb	r3, [r3, #6]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d111      	bne.n	8002e38 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334d      	adds	r3, #77	@ 0x4d
 8002e24:	2207      	movs	r2, #7
 8002e26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f002 ff22 	bl	8005c7a <USB_HC_Halt>
 8002e36:	e049      	b.n	8002ecc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3344      	adds	r3, #68	@ 0x44
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4403      	add	r3, r0
 8002e58:	3344      	adds	r3, #68	@ 0x44
 8002e5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3344      	adds	r3, #68	@ 0x44
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d922      	bls.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3344      	adds	r3, #68	@ 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	334c      	adds	r3, #76	@ 0x4c
 8002e96:	2204      	movs	r2, #4
 8002e98:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	334c      	adds	r3, #76	@ 0x4c
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f005 fbfd 	bl	80086b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002eb6:	e009      	b.n	8002ecc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334c      	adds	r3, #76	@ 0x4c
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	6093      	str	r3, [r2, #8]
 8002ede:	e217      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 f985 	bl	80051f8 <USB_ReadChInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef8:	d11b      	bne.n	8002f32 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	334d      	adds	r3, #77	@ 0x4d
 8002f0a:	2209      	movs	r2, #9
 8002f0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 feaf 	bl	8005c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f2e:	6093      	str	r3, [r2, #8]
 8002f30:	e1ee      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 f95c 	bl	80051f8 <USB_ReadChInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	f040 81df 	bne.w	800330a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	334d      	adds	r3, #77	@ 0x4d
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 8093 	bne.w	800309c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	334d      	adds	r3, #77	@ 0x4d
 8002f86:	2202      	movs	r2, #2
 8002f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334c      	adds	r3, #76	@ 0x4c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3326      	adds	r3, #38	@ 0x26
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d00b      	beq.n	8002fcc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3326      	adds	r3, #38	@ 0x26
 8002fc4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	f040 8190 	bne.w	80032ec <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	799b      	ldrb	r3, [r3, #6]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d115      	bne.n	8003000 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	333d      	adds	r3, #61	@ 0x3d
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	f083 0301 	eor.w	r3, r3, #1
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	333d      	adds	r3, #61	@ 0x3d
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	799b      	ldrb	r3, [r3, #6]
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 8171 	bne.w	80032ec <HCD_HC_OUT_IRQHandler+0x920>
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3334      	adds	r3, #52	@ 0x34
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8165 	beq.w	80032ec <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3334      	adds	r3, #52	@ 0x34
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4403      	add	r3, r0
 8003042:	3328      	adds	r3, #40	@ 0x28
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	440b      	add	r3, r1
 8003048:	1e59      	subs	r1, r3, #1
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4403      	add	r3, r0
 8003058:	3328      	adds	r3, #40	@ 0x28
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003060:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 813f 	beq.w	80032ec <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	333d      	adds	r3, #61	@ 0x3d
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2d8      	uxtb	r0, r3
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	333d      	adds	r3, #61	@ 0x3d
 8003096:	4602      	mov	r2, r0
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e127      	b.n	80032ec <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334d      	adds	r3, #77	@ 0x4d
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d120      	bne.n	80030f4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	331b      	adds	r3, #27
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 8107 	bne.w	80032ec <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	334c      	adds	r3, #76	@ 0x4c
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e0fb      	b.n	80032ec <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	334d      	adds	r3, #77	@ 0x4d
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d13a      	bne.n	8003180 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	334d      	adds	r3, #77	@ 0x4d
 800311a:	2202      	movs	r2, #2
 800311c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	334c      	adds	r3, #76	@ 0x4c
 800312e:	2202      	movs	r2, #2
 8003130:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	331b      	adds	r3, #27
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	f040 80d1 	bne.w	80032ec <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	331b      	adds	r3, #27
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	0151      	lsls	r1, r2, #5
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	440a      	add	r2, r1
 8003174:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317c:	6053      	str	r3, [r2, #4]
 800317e:	e0b5      	b.n	80032ec <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334d      	adds	r3, #77	@ 0x4d
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b05      	cmp	r3, #5
 8003194:	d114      	bne.n	80031c0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334d      	adds	r3, #77	@ 0x4d
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	334c      	adds	r3, #76	@ 0x4c
 80031ba:	2202      	movs	r2, #2
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e095      	b.n	80032ec <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334d      	adds	r3, #77	@ 0x4d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d114      	bne.n	8003200 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334d      	adds	r3, #77	@ 0x4d
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	334c      	adds	r3, #76	@ 0x4c
 80031fa:	2205      	movs	r2, #5
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e075      	b.n	80032ec <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334d      	adds	r3, #77	@ 0x4d
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b07      	cmp	r3, #7
 8003214:	d00a      	beq.n	800322c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334d      	adds	r3, #77	@ 0x4d
 8003226:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003228:	2b09      	cmp	r3, #9
 800322a:	d170      	bne.n	800330e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	2202      	movs	r2, #2
 800323e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	3344      	adds	r3, #68	@ 0x44
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	1c59      	adds	r1, r3, #1
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4403      	add	r3, r0
 8003260:	3344      	adds	r3, #68	@ 0x44
 8003262:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3344      	adds	r3, #68	@ 0x44
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d914      	bls.n	80032a4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	@ 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334c      	adds	r3, #76	@ 0x4c
 800329e:	2204      	movs	r2, #4
 80032a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a2:	e022      	b.n	80032ea <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334c      	adds	r3, #76	@ 0x4c
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334c      	adds	r3, #76	@ 0x4c
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f005 f9d4 	bl	80086b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003308:	e002      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800330e:	bf00      	nop
  }
}
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b08a      	sub	sp, #40	@ 0x28
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	0c5b      	lsrs	r3, r3, #17
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800334a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d004      	beq.n	800335c <HCD_RXQLVL_IRQHandler+0x46>
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b05      	cmp	r3, #5
 8003356:	f000 80b6 	beq.w	80034c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800335a:	e0b7      	b.n	80034cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80b3 	beq.w	80034ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	332c      	adds	r3, #44	@ 0x2c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80a7 	beq.w	80034ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3338      	adds	r3, #56	@ 0x38
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	18d1      	adds	r1, r2, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	3334      	adds	r3, #52	@ 0x34
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4299      	cmp	r1, r3
 80033a6:	f200 8083 	bhi.w	80034b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	332c      	adds	r3, #44	@ 0x2c
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	b292      	uxth	r2, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	f001 feac 	bl	8005122 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	332c      	adds	r3, #44	@ 0x2c
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	18d1      	adds	r1, r2, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4403      	add	r3, r0
 80033ee:	332c      	adds	r3, #44	@ 0x2c
 80033f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3338      	adds	r3, #56	@ 0x38
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	18d1      	adds	r1, r2, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4403      	add	r3, r0
 8003416:	3338      	adds	r3, #56	@ 0x38
 8003418:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	0cdb      	lsrs	r3, r3, #19
 800342a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3328      	adds	r3, #40	@ 0x28
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4293      	cmp	r3, r2
 8003448:	d13f      	bne.n	80034ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d03c      	beq.n	80034ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003466:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800346e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	333c      	adds	r3, #60	@ 0x3c
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f083 0301 	eor.w	r3, r3, #1
 8003498:	b2d8      	uxtb	r0, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	333c      	adds	r3, #60	@ 0x3c
 80034aa:	4602      	mov	r2, r0
 80034ac:	701a      	strb	r2, [r3, #0]
      break;
 80034ae:	e00c      	b.n	80034ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334c      	adds	r3, #76	@ 0x4c
 80034c0:	2204      	movs	r2, #4
 80034c2:	701a      	strb	r2, [r3, #0]
      break;
 80034c4:	e001      	b.n	80034ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034ca:	bf00      	nop
  }
}
 80034cc:	bf00      	nop
 80034ce:	3728      	adds	r7, #40	@ 0x28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003500:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d10b      	bne.n	8003524 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d102      	bne.n	800351c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f005 f8ae 	bl	8008678 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	d132      	bne.n	8003594 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f043 0308 	orr.w	r3, r3, #8
 8003534:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d126      	bne.n	800358e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7a5b      	ldrb	r3, [r3, #9]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d113      	bne.n	8003570 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800354e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003552:	d106      	bne.n	8003562 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2102      	movs	r1, #2
 800355a:	4618      	mov	r0, r3
 800355c:	f001 ff5a 	bl	8005414 <USB_InitFSLSPClkSel>
 8003560:	e011      	b.n	8003586 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f001 ff53 	bl	8005414 <USB_InitFSLSPClkSel>
 800356e:	e00a      	b.n	8003586 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	79db      	ldrb	r3, [r3, #7]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800357e:	461a      	mov	r2, r3
 8003580:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003584:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f005 f8a0 	bl	80086cc <HAL_HCD_PortEnabled_Callback>
 800358c:	e002      	b.n	8003594 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f005 f8aa 	bl	80086e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d103      	bne.n	80035a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f043 0320 	orr.w	r3, r3, #32
 80035a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6013      	str	r3, [r2, #0]
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e12b      	b.n	8003826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd f9de 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	@ 0x24
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800360e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800361e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003620:	f001 fa20 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4a81      	ldr	r2, [pc, #516]	@ (8003830 <HAL_I2C_Init+0x274>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d807      	bhi.n	8003640 <HAL_I2C_Init+0x84>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a80      	ldr	r2, [pc, #512]	@ (8003834 <HAL_I2C_Init+0x278>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e006      	b.n	800364e <HAL_I2C_Init+0x92>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a7d      	ldr	r2, [pc, #500]	@ (8003838 <HAL_I2C_Init+0x27c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	bf94      	ite	ls
 8003648:	2301      	movls	r3, #1
 800364a:	2300      	movhi	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0e7      	b.n	8003826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a78      	ldr	r2, [pc, #480]	@ (800383c <HAL_I2C_Init+0x280>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0c9b      	lsrs	r3, r3, #18
 8003660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a6a      	ldr	r2, [pc, #424]	@ (8003830 <HAL_I2C_Init+0x274>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d802      	bhi.n	8003690 <HAL_I2C_Init+0xd4>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	e009      	b.n	80036a4 <HAL_I2C_Init+0xe8>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a69      	ldr	r2, [pc, #420]	@ (8003840 <HAL_I2C_Init+0x284>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	3301      	adds	r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	495c      	ldr	r1, [pc, #368]	@ (8003830 <HAL_I2C_Init+0x274>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d819      	bhi.n	80036f8 <HAL_I2C_Init+0x13c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e59      	subs	r1, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036d8:	400b      	ands	r3, r1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_I2C_Init+0x138>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e59      	subs	r1, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	e051      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 80036f4:	2304      	movs	r3, #4
 80036f6:	e04f      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d111      	bne.n	8003724 <HAL_I2C_Init+0x168>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e58      	subs	r0, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e012      	b.n	800374a <HAL_I2C_Init+0x18e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	0099      	lsls	r1, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Init+0x196>
 800374e:	2301      	movs	r3, #1
 8003750:	e022      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <HAL_I2C_Init+0x1bc>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1e58      	subs	r0, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	440b      	add	r3, r1
 8003768:	fbb0 f3f3 	udiv	r3, r0, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003776:	e00f      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	0099      	lsls	r1, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	fbb0 f3f3 	udiv	r3, r0, r3
 800378e:	3301      	adds	r3, #1
 8003790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003794:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	6809      	ldr	r1, [r1, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6911      	ldr	r1, [r2, #16]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	430b      	orrs	r3, r1
 80037da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	000186a0 	.word	0x000186a0
 8003834:	001e847f 	.word	0x001e847f
 8003838:	003d08ff 	.word	0x003d08ff
 800383c:	431bde83 	.word	0x431bde83
 8003840:	10624dd3 	.word	0x10624dd3

08003844 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e128      	b.n	8003aa8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a90      	ldr	r2, [pc, #576]	@ (8003ab0 <HAL_I2S_Init+0x26c>)
 800386e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7fd f8df 	bl	8000a34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800388c:	f023 030f 	bic.w	r3, r3, #15
 8003890:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2202      	movs	r2, #2
 8003898:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d060      	beq.n	8003964 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038aa:	2310      	movs	r3, #16
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e001      	b.n	80038b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d802      	bhi.n	80038c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f001 f9d2 	bl	8004c6c <HAL_RCCEx_GetPeriphCLKFreq>
 80038c8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d2:	d125      	bne.n	8003920 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	461a      	mov	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	3305      	adds	r3, #5
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	e01f      	b.n	800393e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	fbb2 f2f3 	udiv	r2, r2, r3
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	fbb2 f3f3 	udiv	r3, r2, r3
 800391a:	3305      	adds	r3, #5
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e00e      	b.n	800393e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fbb2 f2f3 	udiv	r2, r2, r3
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	3305      	adds	r3, #5
 800393c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4a5c      	ldr	r2, [pc, #368]	@ (8003ab4 <HAL_I2S_Init+0x270>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e003      	b.n	800396c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003964:	2302      	movs	r3, #2
 8003966:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d902      	bls.n	8003978 <HAL_I2S_Init+0x134>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2bff      	cmp	r3, #255	@ 0xff
 8003976:	d907      	bls.n	8003988 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	f043 0210 	orr.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e08f      	b.n	8003aa8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	ea42 0103 	orr.w	r1, r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	430a      	orrs	r2, r1
 800399a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039a6:	f023 030f 	bic.w	r3, r3, #15
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6851      	ldr	r1, [r2, #4]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6892      	ldr	r2, [r2, #8]
 80039b2:	4311      	orrs	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68d2      	ldr	r2, [r2, #12]
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6992      	ldr	r2, [r2, #24]
 80039be:	430a      	orrs	r2, r1
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d161      	bne.n	8003a98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a38      	ldr	r2, [pc, #224]	@ (8003ab8 <HAL_I2S_Init+0x274>)
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a37      	ldr	r2, [pc, #220]	@ (8003abc <HAL_I2S_Init+0x278>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_I2S_Init+0x1a4>
 80039e4:	4b36      	ldr	r3, [pc, #216]	@ (8003ac0 <HAL_I2S_Init+0x27c>)
 80039e6:	e001      	b.n	80039ec <HAL_I2S_Init+0x1a8>
 80039e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	4932      	ldr	r1, [pc, #200]	@ (8003abc <HAL_I2S_Init+0x278>)
 80039f4:	428a      	cmp	r2, r1
 80039f6:	d101      	bne.n	80039fc <HAL_I2S_Init+0x1b8>
 80039f8:	4a31      	ldr	r2, [pc, #196]	@ (8003ac0 <HAL_I2S_Init+0x27c>)
 80039fa:	e001      	b.n	8003a00 <HAL_I2S_Init+0x1bc>
 80039fc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a00:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a04:	f023 030f 	bic.w	r3, r3, #15
 8003a08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8003abc <HAL_I2S_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_I2S_Init+0x1d4>
 8003a14:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac0 <HAL_I2S_Init+0x27c>)
 8003a16:	e001      	b.n	8003a1c <HAL_I2S_Init+0x1d8>
 8003a18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a25      	ldr	r2, [pc, #148]	@ (8003abc <HAL_I2S_Init+0x278>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_I2S_Init+0x1ea>
 8003a2a:	4b25      	ldr	r3, [pc, #148]	@ (8003ac0 <HAL_I2S_Init+0x27c>)
 8003a2c:	e001      	b.n	8003a32 <HAL_I2S_Init+0x1ee>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3e:	d003      	beq.n	8003a48 <HAL_I2S_Init+0x204>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	e001      	b.n	8003a54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a72:	4313      	orrs	r3, r2
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0d      	ldr	r2, [pc, #52]	@ (8003abc <HAL_I2S_Init+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2S_Init+0x24c>
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_I2S_Init+0x27c>)
 8003a8e:	e001      	b.n	8003a94 <HAL_I2S_Init+0x250>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a94:	897a      	ldrh	r2, [r7, #10]
 8003a96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	08003bbb 	.word	0x08003bbb
 8003ab4:	cccccccd 	.word	0xcccccccd
 8003ab8:	08003cd1 	.word	0x08003cd1
 8003abc:	40003800 	.word	0x40003800
 8003ac0:	40003400 	.word	0x40003400

08003ac4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10e      	bne.n	8003b54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ffb8 	bl	8003ac4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	b292      	uxth	r2, r2
 8003b70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	1c9a      	adds	r2, r3, #2
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ba2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff93 	bl	8003ad8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d13a      	bne.n	8003c4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d109      	bne.n	8003bf4 <I2S_IRQHandler+0x3a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bea:	2b40      	cmp	r3, #64	@ 0x40
 8003bec:	d102      	bne.n	8003bf4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ffb4 	bl	8003b5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b40      	cmp	r3, #64	@ 0x40
 8003bfc:	d126      	bne.n	8003c4c <I2S_IRQHandler+0x92>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d11f      	bne.n	8003c4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f043 0202 	orr.w	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ff50 	bl	8003aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d136      	bne.n	8003cc6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d109      	bne.n	8003c76 <I2S_IRQHandler+0xbc>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6c:	2b80      	cmp	r3, #128	@ 0x80
 8003c6e:	d102      	bne.n	8003c76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff45 	bl	8003b00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d122      	bne.n	8003cc6 <I2S_IRQHandler+0x10c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d11b      	bne.n	8003cc6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff13 	bl	8003aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a92      	ldr	r2, [pc, #584]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cea:	4b92      	ldr	r3, [pc, #584]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cec:	e001      	b.n	8003cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a8b      	ldr	r2, [pc, #556]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d08:	4b8a      	ldr	r3, [pc, #552]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d0a:	e001      	b.n	8003d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d1c:	d004      	beq.n	8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 8099 	bne.w	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d107      	bne.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f925 	bl	8003f8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f9c8 	bl	80040ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d13a      	bne.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d035      	beq.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6e      	ldr	r2, [pc, #440]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d7c:	e001      	b.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4969      	ldr	r1, [pc, #420]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d8a:	428b      	cmp	r3, r1
 8003d8c:	d101      	bne.n	8003d92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d8e:	4b69      	ldr	r3, [pc, #420]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d90:	e001      	b.n	8003d96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003daa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fe88 	bl	8003aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	f040 80c3 	bne.w	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80bd 	beq.w	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a49      	ldr	r2, [pc, #292]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e0e:	4b49      	ldr	r3, [pc, #292]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e10:	e001      	b.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4944      	ldr	r1, [pc, #272]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1e:	428b      	cmp	r3, r1
 8003e20:	d101      	bne.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e22:	4b44      	ldr	r3, [pc, #272]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e24:	e001      	b.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	f043 0204 	orr.w	r2, r3, #4
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fe4a 	bl	8003aec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e58:	e089      	b.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d107      	bne.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8be 	bl	8003ff0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f8fd 	bl	8004088 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	d12f      	bne.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02a      	beq.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eb0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebe:	e001      	b.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ec0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4919      	ldr	r1, [pc, #100]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ed0:	4b18      	ldr	r3, [pc, #96]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed2:	e001      	b.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ed4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ed8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003edc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	f043 0202 	orr.w	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fdfa 	bl	8003aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d136      	bne.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d031      	beq.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a07      	ldr	r2, [pc, #28]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f16:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f18:	e001      	b.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4902      	ldr	r1, [pc, #8]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f26:	428b      	cmp	r3, r1
 8003f28:	d106      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f2a:	4b02      	ldr	r3, [pc, #8]	@ (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f2c:	e006      	b.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f2e:	bf00      	nop
 8003f30:	40003800 	.word	0x40003800
 8003f34:	40003400 	.word	0x40003400
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f40:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fdc0 	bl	8003aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f6c:	e000      	b.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f6e:	bf00      	nop
}
 8003f70:	bf00      	nop
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	1c99      	adds	r1, r3, #2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d113      	bne.n	8003fe6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ffc9 	bl	8003f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c99      	adds	r1, r3, #2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6251      	str	r1, [r2, #36]	@ 0x24
 8004002:	8819      	ldrh	r1, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <I2SEx_TxISR_I2SExt+0x90>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <I2SEx_TxISR_I2SExt+0x22>
 800400e:	4b1d      	ldr	r3, [pc, #116]	@ (8004084 <I2SEx_TxISR_I2SExt+0x94>)
 8004010:	e001      	b.n	8004016 <I2SEx_TxISR_I2SExt+0x26>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004016:	460a      	mov	r2, r1
 8004018:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d121      	bne.n	8004076 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a12      	ldr	r2, [pc, #72]	@ (8004080 <I2SEx_TxISR_I2SExt+0x90>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <I2SEx_TxISR_I2SExt+0x50>
 800403c:	4b11      	ldr	r3, [pc, #68]	@ (8004084 <I2SEx_TxISR_I2SExt+0x94>)
 800403e:	e001      	b.n	8004044 <I2SEx_TxISR_I2SExt+0x54>
 8004040:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	490d      	ldr	r1, [pc, #52]	@ (8004080 <I2SEx_TxISR_I2SExt+0x90>)
 800404c:	428b      	cmp	r3, r1
 800404e:	d101      	bne.n	8004054 <I2SEx_TxISR_I2SExt+0x64>
 8004050:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <I2SEx_TxISR_I2SExt+0x94>)
 8004052:	e001      	b.n	8004058 <I2SEx_TxISR_I2SExt+0x68>
 8004054:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004058:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800405c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff81 	bl	8003f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40003800 	.word	0x40003800
 8004084:	40003400 	.word	0x40003400

08004088 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68d8      	ldr	r0, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	1c99      	adds	r1, r3, #2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80040a0:	b282      	uxth	r2, r0
 80040a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d113      	bne.n	80040e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff4a 	bl	8003f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a20      	ldr	r2, [pc, #128]	@ (800417c <I2SEx_RxISR_I2SExt+0x90>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <I2SEx_RxISR_I2SExt+0x16>
 80040fe:	4b20      	ldr	r3, [pc, #128]	@ (8004180 <I2SEx_RxISR_I2SExt+0x94>)
 8004100:	e001      	b.n	8004106 <I2SEx_RxISR_I2SExt+0x1a>
 8004102:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004106:	68d8      	ldr	r0, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	1c99      	adds	r1, r3, #2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004112:	b282      	uxth	r2, r0
 8004114:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d121      	bne.n	8004172 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a12      	ldr	r2, [pc, #72]	@ (800417c <I2SEx_RxISR_I2SExt+0x90>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <I2SEx_RxISR_I2SExt+0x50>
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <I2SEx_RxISR_I2SExt+0x94>)
 800413a:	e001      	b.n	8004140 <I2SEx_RxISR_I2SExt+0x54>
 800413c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	490d      	ldr	r1, [pc, #52]	@ (800417c <I2SEx_RxISR_I2SExt+0x90>)
 8004148:	428b      	cmp	r3, r1
 800414a:	d101      	bne.n	8004150 <I2SEx_RxISR_I2SExt+0x64>
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <I2SEx_RxISR_I2SExt+0x94>)
 800414e:	e001      	b.n	8004154 <I2SEx_RxISR_I2SExt+0x68>
 8004150:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004154:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004158:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff03 	bl	8003f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40003800 	.word	0x40003800
 8004180:	40003400 	.word	0x40003400

08004184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e267      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d075      	beq.n	800428e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a2:	4b88      	ldr	r3, [pc, #544]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b85      	ldr	r3, [pc, #532]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b82      	ldr	r3, [pc, #520]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b7e      	ldr	r3, [pc, #504]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d05b      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d157      	bne.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e242      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x74>
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b70      	ldr	r3, [pc, #448]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6f      	ldr	r2, [pc, #444]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b6d      	ldr	r3, [pc, #436]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6c      	ldr	r2, [pc, #432]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 800421c:	4b69      	ldr	r3, [pc, #420]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a68      	ldr	r2, [pc, #416]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b66      	ldr	r3, [pc, #408]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a65      	ldr	r2, [pc, #404]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fc fdc4 	bl	8000dc8 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fc fdc0 	bl	8000dc8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	@ 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e207      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b5b      	ldr	r3, [pc, #364]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xc0>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fc fdb0 	bl	8000dc8 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fc fdac 	bl	8000dc8 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	@ 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1f3      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b51      	ldr	r3, [pc, #324]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d063      	beq.n	8004362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b44      	ldr	r3, [pc, #272]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1c7      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4937      	ldr	r1, [pc, #220]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e03a      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b34      	ldr	r3, [pc, #208]	@ (80043c8 <HAL_RCC_OscConfig+0x244>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fc fd65 	bl	8000dc8 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004302:	f7fc fd61 	bl	8000dc8 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1a8      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	4b2b      	ldr	r3, [pc, #172]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4925      	ldr	r1, [pc, #148]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <HAL_RCC_OscConfig+0x244>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fc fd44 	bl	8000dc8 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004344:	f7fc fd40 	bl	8000dc8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e187      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d036      	beq.n	80043dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <HAL_RCC_OscConfig+0x248>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fc fd24 	bl	8000dc8 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7fc fd20 	bl	8000dc8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e167      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x200>
 80043a2:	e01b      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_RCC_OscConfig+0x248>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fc fd0d 	bl	8000dc8 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00e      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fc fd09 	bl	8000dc8 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d907      	bls.n	80043d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e150      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470000 	.word	0x42470000
 80043cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ea      	bne.n	80043b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8097 	beq.w	8004518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b81      	ldr	r3, [pc, #516]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b7d      	ldr	r3, [pc, #500]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	4a7c      	ldr	r2, [pc, #496]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	@ 0x40
 800440a:	4b7a      	ldr	r3, [pc, #488]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b77      	ldr	r3, [pc, #476]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d118      	bne.n	8004458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b74      	ldr	r3, [pc, #464]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a73      	ldr	r2, [pc, #460]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fc fcc9 	bl	8000dc8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fc fcc5 	bl	8000dc8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e10c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	4b6a      	ldr	r3, [pc, #424]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x2ea>
 8004460:	4b64      	ldr	r3, [pc, #400]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004464:	4a63      	ldr	r2, [pc, #396]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	@ 0x70
 800446c:	e01c      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x30c>
 8004476:	4b5f      	ldr	r3, [pc, #380]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	4a5e      	ldr	r2, [pc, #376]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	@ 0x70
 8004482:	4b5c      	ldr	r3, [pc, #368]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	4a5b      	ldr	r2, [pc, #364]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	@ 0x70
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 8004490:	4b58      	ldr	r3, [pc, #352]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	4a57      	ldr	r2, [pc, #348]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	@ 0x70
 800449c:	4b55      	ldr	r3, [pc, #340]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a0:	4a54      	ldr	r2, [pc, #336]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f023 0304 	bic.w	r3, r3, #4
 80044a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fc fc8a 	bl	8000dc8 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fc fc86 	bl	8000dc8 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0cb      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b49      	ldr	r3, [pc, #292]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCC_OscConfig+0x334>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fc fc74 	bl	8000dc8 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fc fc70 	bl	8000dc8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0b5      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	4b3e      	ldr	r3, [pc, #248]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ee      	bne.n	80044e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b39      	ldr	r3, [pc, #228]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	4a38      	ldr	r2, [pc, #224]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a1 	beq.w	8004664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004522:	4b34      	ldr	r3, [pc, #208]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d05c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d141      	bne.n	80045ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fc fc44 	bl	8000dc8 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fc fc40 	bl	8000dc8 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e087      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	491b      	ldr	r1, [pc, #108]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b1b      	ldr	r3, [pc, #108]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fc fc19 	bl	8000dc8 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459a:	f7fc fc15 	bl	8000dc8 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e05c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x416>
 80045b8:	e054      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fc fc02 	bl	8000dc8 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fc fbfe 	bl	8000dc8 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e045      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
 80045e6:	e03d      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e038      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004600:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <HAL_RCC_OscConfig+0x4ec>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d028      	beq.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d121      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d11a      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	3b01      	subs	r3, #1
 800464a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cc      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b68      	ldr	r3, [pc, #416]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90c      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b65      	ldr	r3, [pc, #404]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b63      	ldr	r3, [pc, #396]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0b8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c8:	4b59      	ldr	r3, [pc, #356]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a58      	ldr	r2, [pc, #352]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a52      	ldr	r2, [pc, #328]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b50      	ldr	r3, [pc, #320]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	494d      	ldr	r1, [pc, #308]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d044      	beq.n	8004794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d119      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d003      	beq.n	8004732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472e:	2b03      	cmp	r3, #3
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	4b3f      	ldr	r3, [pc, #252]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e06f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	4b3b      	ldr	r3, [pc, #236]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e067      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004752:	4b37      	ldr	r3, [pc, #220]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4934      	ldr	r1, [pc, #208]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004764:	f7fc fb30 	bl	8000dc8 <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fc fb2c 	bl	8000dc8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b2b      	ldr	r3, [pc, #172]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b25      	ldr	r3, [pc, #148]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d20c      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b22      	ldr	r3, [pc, #136]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e032      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4916      	ldr	r1, [pc, #88]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e6:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	490e      	ldr	r1, [pc, #56]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fa:	f000 f821 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490a      	ldr	r1, [pc, #40]	@ (8004834 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a09      	ldr	r2, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc faa4 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00
 8004830:	40023800 	.word	0x40023800
 8004834:	08008db4 	.word	0x08008db4
 8004838:	20000000 	.word	0x20000000
 800483c:	20000004 	.word	0x20000004

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b094      	sub	sp, #80	@ 0x50
 8004846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	647b      	str	r3, [r7, #68]	@ 0x44
 800484c:	2300      	movs	r3, #0
 800484e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004850:	2300      	movs	r3, #0
 8004852:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004858:	4b79      	ldr	r3, [pc, #484]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d00d      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x40>
 8004864:	2b08      	cmp	r3, #8
 8004866:	f200 80e1 	bhi.w	8004a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x34>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0x3a>
 8004872:	e0db      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004874:	4b73      	ldr	r3, [pc, #460]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004876:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004878:	e0db      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800487a:	4b73      	ldr	r3, [pc, #460]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800487c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800487e:	e0d8      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004880:	4b6f      	ldr	r3, [pc, #444]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004888:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004896:	4b6a      	ldr	r3, [pc, #424]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	2200      	movs	r2, #0
 800489e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048aa:	2300      	movs	r3, #0
 80048ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048b2:	4622      	mov	r2, r4
 80048b4:	462b      	mov	r3, r5
 80048b6:	f04f 0000 	mov.w	r0, #0
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	0159      	lsls	r1, r3, #5
 80048c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c4:	0150      	lsls	r0, r2, #5
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4621      	mov	r1, r4
 80048cc:	1a51      	subs	r1, r2, r1
 80048ce:	6139      	str	r1, [r7, #16]
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb63 0301 	sbc.w	r3, r3, r1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e4:	4659      	mov	r1, fp
 80048e6:	018b      	lsls	r3, r1, #6
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ee:	4651      	mov	r1, sl
 80048f0:	018a      	lsls	r2, r1, #6
 80048f2:	4651      	mov	r1, sl
 80048f4:	ebb2 0801 	subs.w	r8, r2, r1
 80048f8:	4659      	mov	r1, fp
 80048fa:	eb63 0901 	sbc.w	r9, r3, r1
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800490a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004912:	4690      	mov	r8, r2
 8004914:	4699      	mov	r9, r3
 8004916:	4623      	mov	r3, r4
 8004918:	eb18 0303 	adds.w	r3, r8, r3
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	462b      	mov	r3, r5
 8004920:	eb49 0303 	adc.w	r3, r9, r3
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004932:	4629      	mov	r1, r5
 8004934:	024b      	lsls	r3, r1, #9
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800493c:	4621      	mov	r1, r4
 800493e:	024a      	lsls	r2, r1, #9
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800494c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004950:	f7fb fc46 	bl	80001e0 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800495c:	e058      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b38      	ldr	r3, [pc, #224]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	2200      	movs	r2, #0
 8004966:	4618      	mov	r0, r3
 8004968:	4611      	mov	r1, r2
 800496a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
 8004974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	0159      	lsls	r1, r3, #5
 8004986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498a:	0150      	lsls	r0, r2, #5
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4641      	mov	r1, r8
 8004992:	ebb2 0a01 	subs.w	sl, r2, r1
 8004996:	4649      	mov	r1, r9
 8004998:	eb63 0b01 	sbc.w	fp, r3, r1
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049b0:	ebb2 040a 	subs.w	r4, r2, sl
 80049b4:	eb63 050b 	sbc.w	r5, r3, fp
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	00eb      	lsls	r3, r5, #3
 80049c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c6:	00e2      	lsls	r2, r4, #3
 80049c8:	4614      	mov	r4, r2
 80049ca:	461d      	mov	r5, r3
 80049cc:	4643      	mov	r3, r8
 80049ce:	18e3      	adds	r3, r4, r3
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	464b      	mov	r3, r9
 80049d4:	eb45 0303 	adc.w	r3, r5, r3
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049e6:	4629      	mov	r1, r5
 80049e8:	028b      	lsls	r3, r1, #10
 80049ea:	4621      	mov	r1, r4
 80049ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f0:	4621      	mov	r1, r4
 80049f2:	028a      	lsls	r2, r1, #10
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049fa:	2200      	movs	r2, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	61fa      	str	r2, [r7, #28]
 8004a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a04:	f7fb fbec 	bl	80001e0 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a10:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3750      	adds	r7, #80	@ 0x50
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	007a1200 	.word	0x007a1200

08004a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a50:	4b03      	ldr	r3, [pc, #12]	@ (8004a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a52:	681b      	ldr	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000000 	.word	0x20000000

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a68:	f7ff fff0 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	0a9b      	lsrs	r3, r3, #10
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4903      	ldr	r1, [pc, #12]	@ (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40023800 	.word	0x40023800
 8004a88:	08008dc4 	.word	0x08008dc4

08004a8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d038      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab4:	4b68      	ldr	r3, [pc, #416]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aba:	f7fc f985 	bl	8000dc8 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ac2:	f7fc f981 	bl	8000dc8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0bd      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad4:	4b61      	ldr	r3, [pc, #388]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	495a      	ldr	r1, [pc, #360]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004afa:	4b57      	ldr	r3, [pc, #348]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b00:	f7fc f962 	bl	8000dc8 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b08:	f7fc f95e 	bl	8000dc8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e09a      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1a:	4b50      	ldr	r3, [pc, #320]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8083 	beq.w	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	4b48      	ldr	r3, [pc, #288]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	4a47      	ldr	r2, [pc, #284]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b44:	4b45      	ldr	r3, [pc, #276]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b50:	4b43      	ldr	r3, [pc, #268]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a42      	ldr	r2, [pc, #264]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7fc f934 	bl	8000dc8 <HAL_GetTick>
 8004b60:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b64:	f7fc f930 	bl	8000dc8 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e06c      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b76:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b82:	4b36      	ldr	r3, [pc, #216]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02f      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d028      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004baa:	4b2e      	ldr	r3, [pc, #184]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bb6:	4a29      	ldr	r2, [pc, #164]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bbc:	4b27      	ldr	r3, [pc, #156]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d114      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fc f8fe 	bl	8000dc8 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fc f8fa 	bl	8000dc8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e034      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0ee      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfe:	d10d      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004c00:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c14:	4911      	ldr	r1, [pc, #68]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
 8004c1a:	e005      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a0e      	ldr	r2, [pc, #56]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c26:	6093      	str	r3, [r2, #8]
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	4909      	ldr	r1, [pc, #36]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	7d1a      	ldrb	r2, [r3, #20]
 8004c4a:	4b07      	ldr	r3, [pc, #28]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c4c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	42470068 	.word	0x42470068
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40007000 	.word	0x40007000
 8004c64:	42470e40 	.word	0x42470e40
 8004c68:	424711e0 	.word	0x424711e0

08004c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d141      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c8a:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ca0:	d131      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ca2:	4b20      	ldr	r3, [pc, #128]	@ (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ca4:	617b      	str	r3, [r7, #20]
          break;
 8004ca6:	e031      	b.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb4:	d109      	bne.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cc0:	4a19      	ldr	r2, [pc, #100]	@ (8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	e008      	b.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004cca:	4b15      	ldr	r3, [pc, #84]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd4:	4a15      	ldr	r2, [pc, #84]	@ (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cdc:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf6:	0f1b      	lsrs	r3, r3, #28
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
          break;
 8004d04:	e002      	b.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
          break;
 8004d0a:	bf00      	nop
        }
      }
      break;
 8004d0c:	e000      	b.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8004d0e:	bf00      	nop
    }
  }
  return frequency;
 8004d10:	697b      	ldr	r3, [r7, #20]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800
 8004d24:	00bb8000 	.word	0x00bb8000
 8004d28:	007a1200 	.word	0x007a1200
 8004d2c:	00f42400 	.word	0x00f42400

08004d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e07b      	b.n	8004e3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d52:	d009      	beq.n	8004d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	61da      	str	r2, [r3, #28]
 8004d5a:	e005      	b.n	8004d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb ff24 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dec:	ea42 0103 	orr.w	r1, r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	f003 0104 	and.w	r1, r3, #4
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	f003 0210 	and.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e42:	b084      	sub	sp, #16
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	f107 001c 	add.w	r0, r7, #28
 8004e50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d123      	bne.n	8004ea4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d105      	bne.n	8004e98 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9dc 	bl	8005256 <USB_CoreReset>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	73fb      	strb	r3, [r7, #15]
 8004ea2:	e01b      	b.n	8004edc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f9d0 	bl	8005256 <USB_CoreReset>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004eba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ece:	e005      	b.n	8004edc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004edc:	7fbb      	ldrb	r3, [r7, #30]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10b      	bne.n	8004efa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f043 0206 	orr.w	r2, r3, #6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f06:	b004      	add	sp, #16
 8004f08:	4770      	bx	lr

08004f0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f043 0201 	orr.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 0201 	bic.w	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d115      	bne.n	8004f9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f7c:	200a      	movs	r0, #10
 8004f7e:	f7fb ff2f 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	330a      	adds	r3, #10
 8004f86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f956 	bl	800523a <USB_GetMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d01e      	beq.n	8004fd2 <USB_SetCurrentMode+0x84>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f98:	d9f0      	bls.n	8004f7c <USB_SetCurrentMode+0x2e>
 8004f9a:	e01a      	b.n	8004fd2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d115      	bne.n	8004fce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fae:	200a      	movs	r0, #10
 8004fb0:	f7fb ff16 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	330a      	adds	r3, #10
 8004fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f93d 	bl	800523a <USB_GetMode>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <USB_SetCurrentMode+0x84>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fca:	d9f0      	bls.n	8004fae <USB_SetCurrentMode+0x60>
 8004fcc:	e001      	b.n	8004fd2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e005      	b.n	8004fde <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fd6:	d101      	bne.n	8004fdc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005000:	d901      	bls.n	8005006 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e01b      	b.n	800503e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	daf2      	bge.n	8004ff4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800502a:	d901      	bls.n	8005030 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e006      	b.n	800503e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b20      	cmp	r3, #32
 800503a:	d0f0      	beq.n	800501e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3301      	adds	r3, #1
 800505a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005062:	d901      	bls.n	8005068 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e018      	b.n	800509a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	daf2      	bge.n	8005056 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2210      	movs	r2, #16
 8005078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005086:	d901      	bls.n	800508c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e006      	b.n	800509a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d0f0      	beq.n	800507a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b089      	sub	sp, #36	@ 0x24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	4611      	mov	r1, r2
 80050b2:	461a      	mov	r2, r3
 80050b4:	460b      	mov	r3, r1
 80050b6:	71fb      	strb	r3, [r7, #7]
 80050b8:	4613      	mov	r3, r2
 80050ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d123      	bne.n	8005114 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050cc:	88bb      	ldrh	r3, [r7, #4]
 80050ce:	3303      	adds	r3, #3
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e018      	b.n	800510c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	031a      	lsls	r2, r3, #12
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e6:	461a      	mov	r2, r3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	3301      	adds	r3, #1
 80050f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3301      	adds	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	3301      	adds	r3, #1
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	429a      	cmp	r2, r3
 8005112:	d3e2      	bcc.n	80050da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3724      	adds	r7, #36	@ 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005122:	b480      	push	{r7}
 8005124:	b08b      	sub	sp, #44	@ 0x2c
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	4613      	mov	r3, r2
 800512e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	b29b      	uxth	r3, r3
 800513e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005148:	2300      	movs	r3, #0
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	e014      	b.n	8005178 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	601a      	str	r2, [r3, #0]
    pDest++;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	3301      	adds	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	3301      	adds	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	3301      	adds	r3, #1
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	3301      	adds	r3, #1
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	3301      	adds	r3, #1
 8005176:	623b      	str	r3, [r7, #32]
 8005178:	6a3a      	ldr	r2, [r7, #32]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	429a      	cmp	r2, r3
 800517e:	d3e6      	bcc.n	800514e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01e      	beq.n	80051c4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005190:	461a      	mov	r2, r3
 8005192:	f107 0310 	add.w	r3, r7, #16
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	701a      	strb	r2, [r3, #0]
      i++;
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	3301      	adds	r3, #1
 80051b0:	623b      	str	r3, [r7, #32]
      pDest++;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	3301      	adds	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051b8:	8bfb      	ldrh	r3, [r7, #30]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051be:	8bfb      	ldrh	r3, [r7, #30]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1ea      	bne.n	800519a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	372c      	adds	r7, #44	@ 0x2c
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800522c:	68bb      	ldr	r3, [r7, #8]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0301 	and.w	r3, r3, #1
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800526e:	d901      	bls.n	8005274 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e01b      	b.n	80052ac <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	daf2      	bge.n	8005262 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f043 0201 	orr.w	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005298:	d901      	bls.n	800529e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e006      	b.n	80052ac <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d0f0      	beq.n	800528c <USB_CoreReset+0x36>

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b8:	b084      	sub	sp, #16
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052d8:	461a      	mov	r2, r3
 80052da:	2300      	movs	r3, #0
 80052dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d119      	bne.n	8005342 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800530e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005312:	2b01      	cmp	r3, #1
 8005314:	d10a      	bne.n	800532c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005324:	f043 0304 	orr.w	r3, r3, #4
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e014      	b.n	8005356 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e009      	b.n	8005356 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005350:	f023 0304 	bic.w	r3, r3, #4
 8005354:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005356:	2110      	movs	r1, #16
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fe44 	bl	8004fe6 <USB_FlushTxFifo>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fe6e 	bl	800504a <USB_FlushRxFifo>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	e015      	b.n	80053aa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800538a:	461a      	mov	r2, r3
 800538c:	f04f 33ff 	mov.w	r3, #4294967295
 8005390:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800539e:	461a      	mov	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3301      	adds	r3, #1
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80053ae:	461a      	mov	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d3e3      	bcc.n	800537e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2280      	movs	r2, #128	@ 0x80
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <USB_HostInit+0x150>)
 80053ce:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a0e      	ldr	r2, [pc, #56]	@ (800540c <USB_HostInit+0x154>)
 80053d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f043 0210 	orr.w	r2, r3, #16
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	4b07      	ldr	r3, [pc, #28]	@ (8005410 <USB_HostInit+0x158>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005404:	b004      	add	sp, #16
 8005406:	4770      	bx	lr
 8005408:	00600080 	.word	0x00600080
 800540c:	004000e0 	.word	0x004000e0
 8005410:	a3200008 	.word	0xa3200008

08005414 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	68f9      	ldr	r1, [r7, #12]
 8005448:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d107      	bne.n	8005466 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800545c:	461a      	mov	r2, r3
 800545e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005462:	6053      	str	r3, [r2, #4]
 8005464:	e00c      	b.n	8005480 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d107      	bne.n	800547c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005472:	461a      	mov	r2, r3
 8005474:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005478:	6053      	str	r3, [r2, #4]
 800547a:	e001      	b.n	8005480 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80054ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054be:	2064      	movs	r0, #100	@ 0x64
 80054c0:	f7fb fc8e 	bl	8000de0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054d2:	200a      	movs	r0, #10
 80054d4:	f7fb fc84 	bl	8000de0 <HAL_Delay>

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005506:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <USB_DriveVbus+0x44>
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d106      	bne.n	8005526 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005520:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005524:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005530:	d109      	bne.n	8005546 <USB_DriveVbus+0x64>
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005544:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	0c5b      	lsrs	r3, r3, #17
 8005572:	f003 0303 	and.w	r3, r3, #3
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	b29b      	uxth	r3, r3
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	4608      	mov	r0, r1
 80055ae:	4611      	mov	r1, r2
 80055b0:	461a      	mov	r2, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	70fb      	strb	r3, [r7, #3]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70bb      	strb	r3, [r7, #2]
 80055ba:	4613      	mov	r3, r2
 80055bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d2:	461a      	mov	r2, r3
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d867      	bhi.n	80056b2 <USB_HC_Init+0x10e>
 80055e2:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <USB_HC_Init+0x44>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005675 	.word	0x08005675
 80055f0:	080055f9 	.word	0x080055f9
 80055f4:	08005637 	.word	0x08005637
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005604:	461a      	mov	r2, r3
 8005606:	f240 439d 	movw	r3, #1181	@ 0x49d
 800560a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800560c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005610:	2b00      	cmp	r3, #0
 8005612:	da51      	bge.n	80056b8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	440a      	add	r2, r1
 800562a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800562e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005632:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005634:	e040      	b.n	80056b8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005642:	461a      	mov	r2, r3
 8005644:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005648:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800564a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800564e:	2b00      	cmp	r3, #0
 8005650:	da34      	bge.n	80056bc <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4413      	add	r3, r2
 800565a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	440a      	add	r2, r1
 8005668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800566c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005670:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005672:	e023      	b.n	80056bc <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005680:	461a      	mov	r2, r3
 8005682:	f240 2325 	movw	r3, #549	@ 0x225
 8005686:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800568c:	2b00      	cmp	r3, #0
 800568e:	da17      	bge.n	80056c0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056aa:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80056ae:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056b0:	e006      	b.n	80056c0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	77fb      	strb	r3, [r7, #31]
      break;
 80056b6:	e004      	b.n	80056c2 <USB_HC_Init+0x11e>
      break;
 80056b8:	bf00      	nop
 80056ba:	e002      	b.n	80056c2 <USB_HC_Init+0x11e>
      break;
 80056bc:	bf00      	nop
 80056be:	e000      	b.n	80056c2 <USB_HC_Init+0x11e>
      break;
 80056c0:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056ee:	f043 0302 	orr.w	r3, r3, #2
 80056f2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056fa:	699a      	ldr	r2, [r3, #24]
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	2101      	movs	r1, #1
 8005704:	fa01 f303 	lsl.w	r3, r1, r3
 8005708:	6939      	ldr	r1, [r7, #16]
 800570a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800570e:	4313      	orrs	r3, r2
 8005710:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800571e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005722:	2b00      	cmp	r3, #0
 8005724:	da03      	bge.n	800572e <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e001      	b.n	8005732 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ff0e 	bl	8005554 <USB_GetHostSpeed>
 8005738:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800573a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800573e:	2b02      	cmp	r3, #2
 8005740:	d106      	bne.n	8005750 <USB_HC_Init+0x1ac>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d003      	beq.n	8005750 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e001      	b.n	8005754 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005754:	787b      	ldrb	r3, [r7, #1]
 8005756:	059b      	lsls	r3, r3, #22
 8005758:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800575c:	78bb      	ldrb	r3, [r7, #2]
 800575e:	02db      	lsls	r3, r3, #11
 8005760:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005764:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005766:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800576a:	049b      	lsls	r3, r3, #18
 800576c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005770:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005772:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005774:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005778:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	431a      	orrs	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	440a      	add	r2, r1
 800578a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800578e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005792:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005794:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005798:	2b03      	cmp	r3, #3
 800579a:	d003      	beq.n	80057a4 <USB_HC_Init+0x200>
 800579c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10f      	bne.n	80057c4 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057c2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop

080057d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08c      	sub	sp, #48	@ 0x30
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80057e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057ec:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	799b      	ldrb	r3, [r3, #6]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d158      	bne.n	80058a8 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80057f6:	2301      	movs	r3, #1
 80057f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005802:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	8a92      	ldrh	r2, [r2, #20]
 8005808:	fb03 f202 	mul.w	r2, r3, r2
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	61da      	str	r2, [r3, #28]
 8005810:	e079      	b.n	8005906 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	7c9b      	ldrb	r3, [r3, #18]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d130      	bne.n	800587c <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005820:	d918      	bls.n	8005854 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	8a9b      	ldrh	r3, [r3, #20]
 8005826:	461a      	mov	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d003      	beq.n	8005844 <USB_HC_StartXfer+0x74>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d103      	bne.n	800584c <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2202      	movs	r2, #2
 8005848:	60da      	str	r2, [r3, #12]
 800584a:	e05c      	b.n	8005906 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2201      	movs	r2, #1
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	e058      	b.n	8005906 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d007      	beq.n	8005874 <USB_HC_StartXfer+0xa4>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d003      	beq.n	8005874 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2204      	movs	r2, #4
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	e048      	b.n	8005906 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2203      	movs	r2, #3
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	e044      	b.n	8005906 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d10d      	bne.n	800589e <USB_HC_StartXfer+0xce>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	8a92      	ldrh	r2, [r2, #20]
 800588a:	4293      	cmp	r3, r2
 800588c:	d907      	bls.n	800589e <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800588e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	8a92      	ldrh	r2, [r2, #20]
 8005894:	fb03 f202 	mul.w	r2, r3, r2
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	61da      	str	r2, [r3, #28]
 800589c:	e033      	b.n	8005906 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	61da      	str	r2, [r3, #28]
 80058a6:	e02e      	b.n	8005906 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d018      	beq.n	80058e2 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	8a92      	ldrh	r2, [r2, #20]
 80058b8:	4413      	add	r3, r2
 80058ba:	3b01      	subs	r3, #1
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	8a92      	ldrh	r2, [r2, #20]
 80058c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80058c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80058c8:	8b7b      	ldrh	r3, [r7, #26]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d90b      	bls.n	80058e6 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80058ce:	8b7b      	ldrh	r3, [r7, #26]
 80058d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	8a92      	ldrh	r2, [r2, #20]
 80058d8:	fb03 f202 	mul.w	r2, r3, r2
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	61da      	str	r2, [r3, #28]
 80058e0:	e001      	b.n	80058e6 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80058e2:	2301      	movs	r3, #1
 80058e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	78db      	ldrb	r3, [r3, #3]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	8a92      	ldrh	r2, [r2, #20]
 80058f4:	fb03 f202 	mul.w	r2, r3, r2
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	61da      	str	r2, [r3, #28]
 80058fc:	e003      	b.n	8005906 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800590e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005910:	04d9      	lsls	r1, r3, #19
 8005912:	4ba4      	ldr	r3, [pc, #656]	@ (8005ba4 <USB_HC_StartXfer+0x3d4>)
 8005914:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005916:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	7d9b      	ldrb	r3, [r3, #22]
 800591c:	075b      	lsls	r3, r3, #29
 800591e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005922:	69f9      	ldr	r1, [r7, #28]
 8005924:	0148      	lsls	r0, r1, #5
 8005926:	6a39      	ldr	r1, [r7, #32]
 8005928:	4401      	add	r1, r0
 800592a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800592e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005930:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6999      	ldr	r1, [r3, #24]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005948:	460a      	mov	r2, r1
 800594a:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf0c      	ite	eq
 800595c:	2301      	moveq	r3, #1
 800595e:	2300      	movne	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	440a      	add	r2, r1
 800597a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800597e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005982:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	7e7b      	ldrb	r3, [r7, #25]
 8005994:	075b      	lsls	r3, r3, #29
 8005996:	69f9      	ldr	r1, [r7, #28]
 8005998:	0148      	lsls	r0, r1, #5
 800599a:	6a39      	ldr	r1, [r7, #32]
 800599c:	4401      	add	r1, r0
 800599e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	799b      	ldrb	r3, [r3, #6]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	f040 80c4 	bne.w	8005b38 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	7c5b      	ldrb	r3, [r3, #17]
 80059b4:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80059ba:	4313      	orrs	r3, r2
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80059c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80059cc:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	6a3a      	ldr	r2, [r7, #32]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80059ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	79db      	ldrb	r3, [r3, #7]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d123      	bne.n	8005a3e <USB_HC_StartXfer+0x26e>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	78db      	ldrb	r3, [r3, #3]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d11f      	bne.n	8005a3e <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a1c:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a3c:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	7c9b      	ldrb	r3, [r3, #18]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d003      	beq.n	8005a4e <USB_HC_StartXfer+0x27e>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	7c9b      	ldrb	r3, [r3, #18]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d117      	bne.n	8005a7e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d113      	bne.n	8005a7e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	78db      	ldrb	r3, [r3, #3]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10f      	bne.n	8005a7e <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	6a3a      	ldr	r2, [r7, #32]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a7c:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	7c9b      	ldrb	r3, [r3, #18]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d163      	bne.n	8005b4e <USB_HC_StartXfer+0x37e>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	78db      	ldrb	r3, [r3, #3]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d15f      	bne.n	8005b4e <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d859      	bhi.n	8005b4c <USB_HC_StartXfer+0x37c>
 8005a98:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <USB_HC_StartXfer+0x2d0>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab1 	.word	0x08005ab1
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005af5 	.word	0x08005af5
 8005aac:	08005b17 	.word	0x08005b17
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ace:	6053      	str	r3, [r2, #4]
          break;
 8005ad0:	e03d      	b.n	8005b4e <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aec:	f043 030e 	orr.w	r3, r3, #14
 8005af0:	6053      	str	r3, [r2, #4]
          break;
 8005af2:	e02c      	b.n	8005b4e <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	6a3a      	ldr	r2, [r7, #32]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b12:	6053      	str	r3, [r2, #4]
          break;
 8005b14:	e01b      	b.n	8005b4e <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b34:	6053      	str	r3, [r2, #4]
          break;
 8005b36:	e00a      	b.n	8005b4e <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b44:	461a      	mov	r2, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	6053      	str	r3, [r2, #4]
 8005b4a:	e000      	b.n	8005b4e <USB_HC_StartXfer+0x37e>
          break;
 8005b4c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b64:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	78db      	ldrb	r3, [r3, #3]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	e003      	b.n	8005b80 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b7e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b86:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b94:	461a      	mov	r2, r3
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e055      	b.n	8005c50 <USB_HC_StartXfer+0x480>
 8005ba4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	78db      	ldrb	r3, [r3, #3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d14e      	bne.n	8005c4e <USB_HC_StartXfer+0x47e>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d04a      	beq.n	8005c4e <USB_HC_StartXfer+0x47e>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	79db      	ldrb	r3, [r3, #7]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d146      	bne.n	8005c4e <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	7c9b      	ldrb	r3, [r3, #18]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d831      	bhi.n	8005c2c <USB_HC_StartXfer+0x45c>
 8005bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd0 <USB_HC_StartXfer+0x400>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005be1 	.word	0x08005be1
 8005bd4:	08005c05 	.word	0x08005c05
 8005bd8:	08005be1 	.word	0x08005be1
 8005bdc:	08005c05 	.word	0x08005c05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	3303      	adds	r3, #3
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005bea:	8afa      	ldrh	r2, [r7, #22]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d91c      	bls.n	8005c30 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c02:	e015      	b.n	8005c30 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	3303      	adds	r3, #3
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c0e:	8afa      	ldrh	r2, [r7, #22]
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d90a      	bls.n	8005c34 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c2a:	e003      	b.n	8005c34 <USB_HC_StartXfer+0x464>

      default:
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e002      	b.n	8005c36 <USB_HC_StartXfer+0x466>
        break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <USB_HC_StartXfer+0x466>
        break;
 8005c34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785a      	ldrb	r2, [r3, #1]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2000      	movs	r0, #0
 8005c46:	9000      	str	r0, [sp, #0]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fa2c 	bl	80050a6 <USB_WritePacket>
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3728      	adds	r7, #40	@ 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	b29b      	uxth	r3, r3
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b089      	sub	sp, #36	@ 0x24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	0c9b      	lsrs	r3, r3, #18
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	0fdb      	lsrs	r3, r3, #31
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	0fdb      	lsrs	r3, r3, #31
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d10d      	bne.n	8005cfc <USB_HC_Halt+0x82>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <USB_HC_Halt+0x82>
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d002      	beq.n	8005cf8 <USB_HC_Halt+0x7e>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d101      	bne.n	8005cfc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e0d8      	b.n	8005eae <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <USB_HC_Halt+0x8e>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d173      	bne.n	8005df0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d14a      	bne.n	8005dca <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d133      	bne.n	8005da8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d5e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d7e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d8c:	d82e      	bhi.n	8005dec <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da4:	d0ec      	beq.n	8005d80 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005da6:	e081      	b.n	8005eac <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dc6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dc8:	e070      	b.n	8005eac <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005de4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005de8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dea:	e05f      	b.n	8005eac <USB_HC_Halt+0x232>
            break;
 8005dec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dee:	e05d      	b.n	8005eac <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d133      	bne.n	8005e88 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e6c:	d81d      	bhi.n	8005eaa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e84:	d0ec      	beq.n	8005e60 <USB_HC_Halt+0x1e6>
 8005e86:	e011      	b.n	8005eac <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	e000      	b.n	8005eac <USB_HC_Halt+0x232>
          break;
 8005eaa:	bf00      	nop
    }
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3724      	adds	r7, #36	@ 0x24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff f82c 	bl	8004f2c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ed4:	2110      	movs	r1, #16
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff f885 	bl	8004fe6 <USB_FlushTxFifo>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff f8af 	bl	800504a <USB_FlushRxFifo>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e01f      	b.n	8005f3c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f12:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f1a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f22:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f30:	461a      	mov	r2, r3
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b0f      	cmp	r3, #15
 8005f40:	d9dc      	bls.n	8005efc <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	e034      	b.n	8005fb2 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f5e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f66:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f6e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f8e:	d80c      	bhi.n	8005faa <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa6:	d0ec      	beq.n	8005f82 <USB_StopHost+0xc8>
 8005fa8:	e000      	b.n	8005fac <USB_StopHost+0xf2>
        break;
 8005faa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d9c7      	bls.n	8005f48 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fe ff9b 	bl	8004f0a <USB_EnableGlobalInt>

  return ret;
 8005fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005fde:	b590      	push	{r4, r7, lr}
 8005fe0:	b089      	sub	sp, #36	@ 0x24
 8005fe2:	af04      	add	r7, sp, #16
 8005fe4:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	2202      	movs	r2, #2
 8005fea:	2102      	movs	r1, #2
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fc86 	bl	80068fe <USBH_FindInterface>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2bff      	cmp	r3, #255	@ 0xff
 8005ffa:	d002      	beq.n	8006002 <USBH_CDC_InterfaceInit+0x24>
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d901      	bls.n	8006006 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006002:	2302      	movs	r3, #2
 8006004:	e13d      	b.n	8006282 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fc5b 	bl	80068c6 <USBH_SelectInterface>
 8006010:	4603      	mov	r3, r0
 8006012:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800601a:	2302      	movs	r3, #2
 800601c:	e131      	b.n	8006282 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006024:	2050      	movs	r0, #80	@ 0x50
 8006026:	f002 fd63 	bl	8008af0 <malloc>
 800602a:	4603      	mov	r3, r0
 800602c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800603e:	2302      	movs	r3, #2
 8006040:	e11f      	b.n	8006282 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006042:	2250      	movs	r2, #80	@ 0x50
 8006044:	2100      	movs	r1, #0
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f002 fe10 	bl	8008c6c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	211a      	movs	r1, #26
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	b25b      	sxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	da15      	bge.n	8006090 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	211a      	movs	r1, #26
 800606a:	fb01 f303 	mul.w	r3, r1, r3
 800606e:	4413      	add	r3, r2
 8006070:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	211a      	movs	r1, #26
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800608a:	881a      	ldrh	r2, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 ffbf 	bl	800801a <USBH_AllocPipe>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	7819      	ldrb	r1, [r3, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	7858      	ldrb	r0, [r3, #1]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	8952      	ldrh	r2, [r2, #10]
 80060bc:	9202      	str	r2, [sp, #8]
 80060be:	2203      	movs	r2, #3
 80060c0:	9201      	str	r2, [sp, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	4623      	mov	r3, r4
 80060c6:	4602      	mov	r2, r0
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 ff77 	bl	8007fbc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f002 fc84 	bl	80089e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80060dc:	2300      	movs	r3, #0
 80060de:	2200      	movs	r2, #0
 80060e0:	210a      	movs	r1, #10
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fc0b 	bl	80068fe <USBH_FindInterface>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2bff      	cmp	r3, #255	@ 0xff
 80060f0:	d002      	beq.n	80060f8 <USBH_CDC_InterfaceInit+0x11a>
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d901      	bls.n	80060fc <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0c2      	b.n	8006282 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	211a      	movs	r1, #26
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b25b      	sxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	da16      	bge.n	8006142 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	211a      	movs	r1, #26
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	211a      	movs	r1, #26
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	835a      	strh	r2, [r3, #26]
 8006140:	e015      	b.n	800616e <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	211a      	movs	r1, #26
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006152:	781a      	ldrb	r2, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	211a      	movs	r1, #26
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006168:	881a      	ldrh	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	211a      	movs	r1, #26
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b25b      	sxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	da16      	bge.n	80061b4 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	211a      	movs	r1, #26
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	4413      	add	r3, r2
 8006192:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	211a      	movs	r1, #26
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80061ac:	881a      	ldrh	r2, [r3, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	835a      	strh	r2, [r3, #26]
 80061b2:	e015      	b.n	80061e0 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	211a      	movs	r1, #26
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	211a      	movs	r1, #26
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80061da:	881a      	ldrh	r2, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	7b9b      	ldrb	r3, [r3, #14]
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 ff17 	bl	800801a <USBH_AllocPipe>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	7bdb      	ldrb	r3, [r3, #15]
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 ff0d 	bl	800801a <USBH_AllocPipe>
 8006200:	4603      	mov	r3, r0
 8006202:	461a      	mov	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	7b59      	ldrb	r1, [r3, #13]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	7b98      	ldrb	r0, [r3, #14]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	8b12      	ldrh	r2, [r2, #24]
 8006220:	9202      	str	r2, [sp, #8]
 8006222:	2202      	movs	r2, #2
 8006224:	9201      	str	r2, [sp, #4]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	4623      	mov	r3, r4
 800622a:	4602      	mov	r2, r0
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fec5 	bl	8007fbc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	7b19      	ldrb	r1, [r3, #12]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	7bd8      	ldrb	r0, [r3, #15]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	8b52      	ldrh	r2, [r2, #26]
 800624a:	9202      	str	r2, [sp, #8]
 800624c:	2202      	movs	r2, #2
 800624e:	9201      	str	r2, [sp, #4]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	4623      	mov	r3, r4
 8006254:	4602      	mov	r2, r0
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 feb0 	bl	8007fbc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	7b5b      	ldrb	r3, [r3, #13]
 8006268:	2200      	movs	r2, #0
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 fbb9 	bl	80089e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	7b1b      	ldrb	r3, [r3, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f002 fbb2 	bl	80089e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	bd90      	pop	{r4, r7, pc}

0800628a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fea5 	bl	8007ffa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fed0 	bl	800805c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	7b1b      	ldrb	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00e      	beq.n	80062e8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	7b1b      	ldrb	r3, [r3, #12]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fe92 	bl	8007ffa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	7b1b      	ldrb	r3, [r3, #12]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 febd 	bl	800805c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	7b5b      	ldrb	r3, [r3, #13]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	7b5b      	ldrb	r3, [r3, #13]
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fe7f 	bl	8007ffa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	7b5b      	ldrb	r3, [r3, #13]
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 feaa 	bl	800805c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	4618      	mov	r0, r3
 8006324:	f002 fbec 	bl	8008b00 <free>
    phost->pActiveClass->pData = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3340      	adds	r3, #64	@ 0x40
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f8b2 	bl	80064be <GetLineCoding>
 800635a:	4603      	mov	r3, r0
 800635c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800636a:	2102      	movs	r1, #2
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006370:	7afb      	ldrb	r3, [r7, #11]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800639c:	2b04      	cmp	r3, #4
 800639e:	d877      	bhi.n	8006490 <USBH_CDC_Process+0x114>
 80063a0:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <USBH_CDC_Process+0x2c>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063bd 	.word	0x080063bd
 80063ac:	080063c3 	.word	0x080063c3
 80063b0:	080063f3 	.word	0x080063f3
 80063b4:	08006467 	.word	0x08006467
 80063b8:	08006475 	.word	0x08006475
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]
      break;
 80063c0:	e06d      	b.n	800649e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f897 	bl	80064fc <SetLineCoding>
 80063ce:	4603      	mov	r3, r0
 80063d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063e0:	e058      	b.n	8006494 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d055      	beq.n	8006494 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80063f0:	e050      	b.n	8006494 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	3340      	adds	r3, #64	@ 0x40
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f860 	bl	80064be <GetLineCoding>
 80063fe:	4603      	mov	r3, r0
 8006400:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d126      	bne.n	8006456 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641a:	791b      	ldrb	r3, [r3, #4]
 800641c:	429a      	cmp	r2, r3
 800641e:	d13b      	bne.n	8006498 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800642c:	429a      	cmp	r2, r3
 800642e:	d133      	bne.n	8006498 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800643a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800643c:	429a      	cmp	r2, r3
 800643e:	d12b      	bne.n	8006498 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006448:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800644a:	429a      	cmp	r2, r3
 800644c:	d124      	bne.n	8006498 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f958 	bl	8006704 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006454:	e020      	b.n	8006498 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d01d      	beq.n	8006498 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2204      	movs	r2, #4
 8006460:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006464:	e018      	b.n	8006498 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f867 	bl	800653a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8da 	bl	8006626 <CDC_ProcessReception>
      break;
 8006472:	e014      	b.n	800649e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006474:	2100      	movs	r1, #0
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 f81a 	bl	80074b0 <USBH_ClrFeature>
 800647c:	4603      	mov	r3, r0
 800647e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800648e:	e005      	b.n	800649c <USBH_CDC_Process+0x120>

    default:
      break;
 8006490:	bf00      	nop
 8006492:	e004      	b.n	800649e <USBH_CDC_Process+0x122>
      break;
 8006494:	bf00      	nop
 8006496:	e002      	b.n	800649e <USBH_CDC_Process+0x122>
      break;
 8006498:	bf00      	nop
 800649a:	e000      	b.n	800649e <USBH_CDC_Process+0x122>
      break;
 800649c:	bf00      	nop

  }

  return status;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	22a1      	movs	r2, #161	@ 0xa1
 80064cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2221      	movs	r2, #33	@ 0x21
 80064d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2207      	movs	r2, #7
 80064e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2207      	movs	r2, #7
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fb14 	bl	8007b1a <USBH_CtlReq>
 80064f2:	4603      	mov	r3, r0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2221      	movs	r2, #33	@ 0x21
 800650a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2207      	movs	r2, #7
 8006522:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2207      	movs	r2, #7
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 faf5 	bl	8007b1a <USBH_CtlReq>
 8006530:	4603      	mov	r3, r0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af02      	add	r7, sp, #8
 8006540:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800654c:	2300      	movs	r3, #0
 800654e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006556:	2b01      	cmp	r3, #1
 8006558:	d002      	beq.n	8006560 <CDC_ProcessTransmission+0x26>
 800655a:	2b02      	cmp	r3, #2
 800655c:	d023      	beq.n	80065a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800655e:	e05e      	b.n	800661e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	8b12      	ldrh	r2, [r2, #24]
 8006568:	4293      	cmp	r3, r2
 800656a:	d90b      	bls.n	8006584 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	69d9      	ldr	r1, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8b1a      	ldrh	r2, [r3, #24]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	7b5b      	ldrb	r3, [r3, #13]
 8006578:	2001      	movs	r0, #1
 800657a:	9000      	str	r0, [sp, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fcda 	bl	8007f36 <USBH_BulkSendData>
 8006582:	e00b      	b.n	800659c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	7b5b      	ldrb	r3, [r3, #13]
 8006592:	2001      	movs	r0, #1
 8006594:	9000      	str	r0, [sp, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 fccd 	bl	8007f36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80065a4:	e03b      	b.n	800661e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	7b5b      	ldrb	r3, [r3, #13]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 f9ef 	bl	8008990 <USBH_LL_GetURBState>
 80065b2:	4603      	mov	r3, r0
 80065b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d128      	bne.n	800660e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	8b12      	ldrh	r2, [r2, #24]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d90e      	bls.n	80065e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	8b12      	ldrh	r2, [r2, #24]
 80065d0:	1a9a      	subs	r2, r3, r2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	8b12      	ldrh	r2, [r2, #24]
 80065de:	441a      	add	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	61da      	str	r2, [r3, #28]
 80065e4:	e002      	b.n	80065ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80065fc:	e00e      	b.n	800661c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f868 	bl	80066dc <USBH_CDC_TransmitCallback>
      break;
 800660c:	e006      	b.n	800661c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800660e:	7afb      	ldrb	r3, [r7, #11]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d103      	bne.n	800661c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800661c:	bf00      	nop
  }
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006638:	2300      	movs	r3, #0
 800663a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006642:	2b03      	cmp	r3, #3
 8006644:	d002      	beq.n	800664c <CDC_ProcessReception+0x26>
 8006646:	2b04      	cmp	r3, #4
 8006648:	d00e      	beq.n	8006668 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800664a:	e043      	b.n	80066d4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	6a19      	ldr	r1, [r3, #32]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	8b5a      	ldrh	r2, [r3, #26]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	7b1b      	ldrb	r3, [r3, #12]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fc91 	bl	8007f80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2204      	movs	r2, #4
 8006662:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006666:	e035      	b.n	80066d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	7b1b      	ldrb	r3, [r3, #12]
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f002 f98e 	bl	8008990 <USBH_LL_GetURBState>
 8006674:	4603      	mov	r3, r0
 8006676:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006678:	7cfb      	ldrb	r3, [r7, #19]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d129      	bne.n	80066d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	7b1b      	ldrb	r3, [r3, #12]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f002 f8f1 	bl	800886c <USBH_LL_GetLastXferSize>
 800668a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	429a      	cmp	r2, r3
 8006694:	d016      	beq.n	80066c4 <CDC_ProcessReception+0x9e>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	8b5b      	ldrh	r3, [r3, #26]
 800669a:	461a      	mov	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4293      	cmp	r3, r2
 80066a0:	d910      	bls.n	80066c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad2      	subs	r2, r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	6a1a      	ldr	r2, [r3, #32]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	441a      	add	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2203      	movs	r2, #3
 80066be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80066c2:	e006      	b.n	80066d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f80f 	bl	80066f0 <USBH_CDC_ReceiveCallback>
      break;
 80066d2:	bf00      	nop
  }
}
 80066d4:	bf00      	nop
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4613      	mov	r3, r2
 8006724:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800672c:	2302      	movs	r3, #2
 800672e:	e029      	b.n	8006784 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	79fa      	ldrb	r2, [r7, #7]
 8006734:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f81f 	bl	800678c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f001 ffc1 	bl	8008704 <USBH_LL_Init>

  return USBH_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e009      	b.n	80067b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	33e0      	adds	r3, #224	@ 0xe0
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	2200      	movs	r2, #0
 80067aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b0f      	cmp	r3, #15
 80067b6:	d9f2      	bls.n	800679e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e009      	b.n	80067d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d8:	d3f1      	bcc.n	80067be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2240      	movs	r2, #64	@ 0x40
 80067fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	331c      	adds	r3, #28
 800682a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f002 fa1b 	bl	8008c6c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800683c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f002 fa12 	bl	8008c6c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800684e:	2212      	movs	r2, #18
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f002 fa0a 	bl	8008c6c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800685e:	223e      	movs	r2, #62	@ 0x3e
 8006860:	2100      	movs	r1, #0
 8006862:	4618      	mov	r0, r3
 8006864:	f002 fa02 	bl	8008c6c <memset>

  return USBH_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10e      	bne.n	80068ae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006896:	1c59      	adds	r1, r3, #1
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	33de      	adds	r3, #222	@ 0xde
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	e004      	b.n	80068b8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068ae:	2302      	movs	r3, #2
 80068b0:	73fb      	strb	r3, [r7, #15]
 80068b2:	e001      	b.n	80068b8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068b4:	2302      	movs	r3, #2
 80068b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d204      	bcs.n	80068ec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80068ea:	e001      	b.n	80068f0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80068fe:	b480      	push	{r7}
 8006900:	b087      	sub	sp, #28
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	4608      	mov	r0, r1
 8006908:	4611      	mov	r1, r2
 800690a:	461a      	mov	r2, r3
 800690c:	4603      	mov	r3, r0
 800690e:	70fb      	strb	r3, [r7, #3]
 8006910:	460b      	mov	r3, r1
 8006912:	70bb      	strb	r3, [r7, #2]
 8006914:	4613      	mov	r3, r2
 8006916:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006926:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006928:	e025      	b.n	8006976 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	221a      	movs	r2, #26
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	3308      	adds	r3, #8
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	3302      	adds	r3, #2
 800693a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	795b      	ldrb	r3, [r3, #5]
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	429a      	cmp	r2, r3
 8006944:	d002      	beq.n	800694c <USBH_FindInterface+0x4e>
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	2bff      	cmp	r3, #255	@ 0xff
 800694a:	d111      	bne.n	8006970 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006950:	78ba      	ldrb	r2, [r7, #2]
 8006952:	429a      	cmp	r2, r3
 8006954:	d002      	beq.n	800695c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006956:	78bb      	ldrb	r3, [r7, #2]
 8006958:	2bff      	cmp	r3, #255	@ 0xff
 800695a:	d109      	bne.n	8006970 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006960:	787a      	ldrb	r2, [r7, #1]
 8006962:	429a      	cmp	r2, r3
 8006964:	d002      	beq.n	800696c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006966:	787b      	ldrb	r3, [r7, #1]
 8006968:	2bff      	cmp	r3, #255	@ 0xff
 800696a:	d101      	bne.n	8006970 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	e006      	b.n	800697e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	3301      	adds	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d9d6      	bls.n	800692a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800697c:	23ff      	movs	r3, #255	@ 0xff
}
 800697e:	4618      	mov	r0, r3
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 fef2 	bl	800877c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006998:	2101      	movs	r1, #1
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f002 f80b 	bl	80089b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af04      	add	r7, sp, #16
 80069b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069b4:	2302      	movs	r3, #2
 80069b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d102      	bne.n	80069ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2203      	movs	r2, #3
 80069cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b0b      	cmp	r3, #11
 80069d6:	f200 81bb 	bhi.w	8006d50 <USBH_Process+0x3a4>
 80069da:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <USBH_Process+0x34>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a11 	.word	0x08006a11
 80069e4:	08006a43 	.word	0x08006a43
 80069e8:	08006aab 	.word	0x08006aab
 80069ec:	08006ceb 	.word	0x08006ceb
 80069f0:	08006d51 	.word	0x08006d51
 80069f4:	08006b4b 	.word	0x08006b4b
 80069f8:	08006c91 	.word	0x08006c91
 80069fc:	08006b81 	.word	0x08006b81
 8006a00:	08006ba1 	.word	0x08006ba1
 8006a04:	08006bbf 	.word	0x08006bbf
 8006a08:	08006c03 	.word	0x08006c03
 8006a0c:	08006cd3 	.word	0x08006cd3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 819b 	beq.w	8006d54 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a24:	20c8      	movs	r0, #200	@ 0xc8
 8006a26:	f002 f810 	bl	8008a4a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 ff03 	bl	8008836 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a40:	e188      	b.n	8006d54 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d107      	bne.n	8006a5c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a5a:	e18a      	b.n	8006d72 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a66:	d914      	bls.n	8006a92 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006a6e:	3301      	adds	r3, #1
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d903      	bls.n	8006a8a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	220d      	movs	r2, #13
 8006a86:	701a      	strb	r2, [r3, #0]
      break;
 8006a88:	e173      	b.n	8006d72 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
      break;
 8006a90:	e16f      	b.n	8006d72 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006a98:	f103 020a 	add.w	r2, r3, #10
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006aa2:	200a      	movs	r0, #10
 8006aa4:	f001 ffd1 	bl	8008a4a <USBH_Delay>
      break;
 8006aa8:	e163      	b.n	8006d72 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006aba:	2104      	movs	r1, #4
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ac0:	2064      	movs	r0, #100	@ 0x64
 8006ac2:	f001 ffc2 	bl	8008a4a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 fe8e 	bl	80087e8 <USBH_LL_GetSpeed>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2205      	movs	r2, #5
 8006ada:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fa9b 	bl	800801a <USBH_AllocPipe>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006aec:	2180      	movs	r1, #128	@ 0x80
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fa93 	bl	800801a <USBH_AllocPipe>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7919      	ldrb	r1, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b10:	9202      	str	r2, [sp, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	9201      	str	r2, [sp, #4]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2280      	movs	r2, #128	@ 0x80
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fa4d 	bl	8007fbc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7959      	ldrb	r1, [r3, #5]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b36:	9202      	str	r2, [sp, #8]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	9201      	str	r2, [sp, #4]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2200      	movs	r2, #0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fa3a 	bl	8007fbc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b48:	e113      	b.n	8006d72 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f916 	bl	8006d7c <USBH_HandleEnum>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 80fd 	bne.w	8006d58 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d103      	bne.n	8006b78 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2208      	movs	r2, #8
 8006b74:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b76:	e0ef      	b.n	8006d58 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2207      	movs	r2, #7
 8006b7c:	701a      	strb	r2, [r3, #0]
      break;
 8006b7e:	e0eb      	b.n	8006d58 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80e8 	beq.w	8006d5c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b92:	2101      	movs	r1, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006b9e:	e0dd      	b.n	8006d5c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fc3a 	bl	8007422 <USBH_SetCfg>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 80d5 	bne.w	8006d60 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2209      	movs	r2, #9
 8006bba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bbc:	e0d0      	b.n	8006d60 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d016      	beq.n	8006bfa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fc4a 	bl	8007468 <USBH_SetFeature>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	220a      	movs	r2, #10
 8006be4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006be6:	e0bd      	b.n	8006d64 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	f040 80b9 	bne.w	8006d64 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	701a      	strb	r2, [r3, #0]
      break;
 8006bf8:	e0b4      	b.n	8006d64 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	220a      	movs	r2, #10
 8006bfe:	701a      	strb	r2, [r3, #0]
      break;
 8006c00:	e0b0      	b.n	8006d64 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80ad 	beq.w	8006d68 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
 8006c1a:	e016      	b.n	8006c4a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32de      	adds	r2, #222	@ 0xde
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	791a      	ldrb	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d108      	bne.n	8006c44 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	32de      	adds	r2, #222	@ 0xde
 8006c38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006c42:	e005      	b.n	8006c50 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	3301      	adds	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0e5      	beq.n	8006c1c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d109      	bne.n	8006c80 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2206      	movs	r2, #6
 8006c70:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c78:	2103      	movs	r1, #3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c7e:	e073      	b.n	8006d68 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220d      	movs	r2, #13
 8006c84:	701a      	strb	r2, [r3, #0]
      break;
 8006c86:	e06f      	b.n	8006d68 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	220d      	movs	r2, #13
 8006c8c:	701a      	strb	r2, [r3, #0]
      break;
 8006c8e:	e06b      	b.n	8006d68 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d017      	beq.n	8006cca <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	220b      	movs	r2, #11
 8006cb6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cb8:	e058      	b.n	8006d6c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d154      	bne.n	8006d6c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e050      	b.n	8006d6c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	220d      	movs	r2, #13
 8006cce:	701a      	strb	r2, [r3, #0]
      break;
 8006cd0:	e04c      	b.n	8006d6c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d049      	beq.n	8006d70 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
      }
      break;
 8006ce8:	e042      	b.n	8006d70 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff fd4a 	bl	800678c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d26:	2105      	movs	r1, #5
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff fe22 	bl	800698a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d46:	e014      	b.n	8006d72 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fd17 	bl	800877c <USBH_LL_Start>
      break;
 8006d4e:	e010      	b.n	8006d72 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d50:	bf00      	nop
 8006d52:	e00e      	b.n	8006d72 <USBH_Process+0x3c6>
      break;
 8006d54:	bf00      	nop
 8006d56:	e00c      	b.n	8006d72 <USBH_Process+0x3c6>
      break;
 8006d58:	bf00      	nop
 8006d5a:	e00a      	b.n	8006d72 <USBH_Process+0x3c6>
    break;
 8006d5c:	bf00      	nop
 8006d5e:	e008      	b.n	8006d72 <USBH_Process+0x3c6>
      break;
 8006d60:	bf00      	nop
 8006d62:	e006      	b.n	8006d72 <USBH_Process+0x3c6>
      break;
 8006d64:	bf00      	nop
 8006d66:	e004      	b.n	8006d72 <USBH_Process+0x3c6>
      break;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <USBH_Process+0x3c6>
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <USBH_Process+0x3c6>
      break;
 8006d70:	bf00      	nop
  }
  return USBH_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af04      	add	r7, sp, #16
 8006d82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b07      	cmp	r3, #7
 8006d92:	f200 81bd 	bhi.w	8007110 <USBH_HandleEnum+0x394>
 8006d96:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <USBH_HandleEnum+0x20>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dbd 	.word	0x08006dbd
 8006da0:	08006e77 	.word	0x08006e77
 8006da4:	08006ee1 	.word	0x08006ee1
 8006da8:	08006f6b 	.word	0x08006f6b
 8006dac:	08006fd5 	.word	0x08006fd5
 8006db0:	08007045 	.word	0x08007045
 8006db4:	0800708b 	.word	0x0800708b
 8006db8:	080070d1 	.word	0x080070d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006dbc:	2108      	movs	r1, #8
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa4c 	bl	800725c <USBH_Get_DevDesc>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d12e      	bne.n	8006e2c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7919      	ldrb	r1, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006df2:	9202      	str	r2, [sp, #8]
 8006df4:	2200      	movs	r2, #0
 8006df6:	9201      	str	r2, [sp, #4]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2280      	movs	r2, #128	@ 0x80
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 f8dc 	bl	8007fbc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7959      	ldrb	r1, [r3, #5]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e18:	9202      	str	r2, [sp, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	9201      	str	r2, [sp, #4]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	4603      	mov	r3, r0
 8006e22:	2200      	movs	r2, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 f8c9 	bl	8007fbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e2a:	e173      	b.n	8007114 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	f040 8170 	bne.w	8007114 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d903      	bls.n	8006e56 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	220d      	movs	r2, #13
 8006e52:	701a      	strb	r2, [r3, #0]
      break;
 8006e54:	e15e      	b.n	8007114 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	795b      	ldrb	r3, [r3, #5]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f8fd 	bl	800805c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f8f7 	bl	800805c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
      break;
 8006e74:	e14e      	b.n	8007114 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e76:	2112      	movs	r1, #18
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f9ef 	bl	800725c <USBH_Get_DevDesc>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e8e:	e143      	b.n	8007118 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	f040 8140 	bne.w	8007118 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d903      	bls.n	8006eba <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	220d      	movs	r2, #13
 8006eb6:	701a      	strb	r2, [r3, #0]
      break;
 8006eb8:	e12e      	b.n	8007118 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	795b      	ldrb	r3, [r3, #5]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f8cb 	bl	800805c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	791b      	ldrb	r3, [r3, #4]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f8c5 	bl	800805c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
      break;
 8006ede:	e11b      	b.n	8007118 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa79 	bl	80073da <USBH_SetAddress>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d130      	bne.n	8006f54 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006ef2:	2002      	movs	r0, #2
 8006ef4:	f001 fda9 	bl	8008a4a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2203      	movs	r2, #3
 8006f04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7919      	ldrb	r1, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	9201      	str	r2, [sp, #4]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	4603      	mov	r3, r0
 8006f24:	2280      	movs	r2, #128	@ 0x80
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f848 	bl	8007fbc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7959      	ldrb	r1, [r3, #5]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f40:	9202      	str	r2, [sp, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	9201      	str	r2, [sp, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f835 	bl	8007fbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f52:	e0e3      	b.n	800711c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	f040 80e0 	bne.w	800711c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	220d      	movs	r2, #13
 8006f60:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	705a      	strb	r2, [r3, #1]
      break;
 8006f68:	e0d8      	b.n	800711c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f6a:	2109      	movs	r1, #9
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9a1 	bl	80072b4 <USBH_Get_CfgDesc>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2204      	movs	r2, #4
 8006f80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f82:	e0cd      	b.n	8007120 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	f040 80ca 	bne.w	8007120 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f92:	3301      	adds	r3, #1
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d903      	bls.n	8006fae <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	220d      	movs	r2, #13
 8006faa:	701a      	strb	r2, [r3, #0]
      break;
 8006fac:	e0b8      	b.n	8007120 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	795b      	ldrb	r3, [r3, #5]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f851 	bl	800805c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 f84b 	bl	800805c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
      break;
 8006fd2:	e0a5      	b.n	8007120 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f969 	bl	80072b4 <USBH_Get_CfgDesc>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2205      	movs	r2, #5
 8006ff0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ff2:	e097      	b.n	8007124 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	f040 8094 	bne.w	8007124 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007002:	3301      	adds	r3, #1
 8007004:	b2da      	uxtb	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007012:	2b03      	cmp	r3, #3
 8007014:	d903      	bls.n	800701e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	220d      	movs	r2, #13
 800701a:	701a      	strb	r2, [r3, #0]
      break;
 800701c:	e082      	b.n	8007124 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	795b      	ldrb	r3, [r3, #5]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 f819 	bl	800805c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	791b      	ldrb	r3, [r3, #4]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f813 	bl	800805c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
      break;
 8007042:	e06f      	b.n	8007124 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800704a:	2b00      	cmp	r3, #0
 800704c:	d019      	beq.n	8007082 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800705a:	23ff      	movs	r3, #255	@ 0xff
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f953 	bl	8007308 <USBH_Get_StringDesc>
 8007062:	4603      	mov	r3, r0
 8007064:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2206      	movs	r2, #6
 8007070:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007072:	e059      	b.n	8007128 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d156      	bne.n	8007128 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2206      	movs	r2, #6
 800707e:	705a      	strb	r2, [r3, #1]
      break;
 8007080:	e052      	b.n	8007128 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2206      	movs	r2, #6
 8007086:	705a      	strb	r2, [r3, #1]
      break;
 8007088:	e04e      	b.n	8007128 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007090:	2b00      	cmp	r3, #0
 8007092:	d019      	beq.n	80070c8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070a0:	23ff      	movs	r3, #255	@ 0xff
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f930 	bl	8007308 <USBH_Get_StringDesc>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2207      	movs	r2, #7
 80070b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070b8:	e038      	b.n	800712c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d135      	bne.n	800712c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2207      	movs	r2, #7
 80070c4:	705a      	strb	r2, [r3, #1]
      break;
 80070c6:	e031      	b.n	800712c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2207      	movs	r2, #7
 80070cc:	705a      	strb	r2, [r3, #1]
      break;
 80070ce:	e02d      	b.n	800712c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d017      	beq.n	800710a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070e6:	23ff      	movs	r3, #255	@ 0xff
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f90d 	bl	8007308 <USBH_Get_StringDesc>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80070fc:	e018      	b.n	8007130 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070fe:	7bbb      	ldrb	r3, [r7, #14]
 8007100:	2b03      	cmp	r3, #3
 8007102:	d115      	bne.n	8007130 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e012      	b.n	8007130 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
      break;
 800710e:	e00f      	b.n	8007130 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007110:	bf00      	nop
 8007112:	e00e      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 8007114:	bf00      	nop
 8007116:	e00c      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 8007118:	bf00      	nop
 800711a:	e00a      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 800711c:	bf00      	nop
 800711e:	e008      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 8007120:	bf00      	nop
 8007122:	e006      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 8007124:	bf00      	nop
 8007126:	e004      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 8007128:	bf00      	nop
 800712a:	e002      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <USBH_HandleEnum+0x3b6>
      break;
 8007130:	bf00      	nop
  }
  return Status;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f804 	bl	800717e <USBH_HandleSof>
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b0b      	cmp	r3, #11
 800718e:	d10a      	bne.n	80071a6 <USBH_HandleSof+0x28>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
  }
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80071be:	bf00      	nop
}
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80071da:	bf00      	nop
}
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fabc 	bl	80087b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	791b      	ldrb	r3, [r3, #4]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 ff0b 	bl	800805c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	795b      	ldrb	r3, [r3, #5]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 ff05 	bl	800805c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af02      	add	r7, sp, #8
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007268:	887b      	ldrh	r3, [r7, #2]
 800726a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726e:	d901      	bls.n	8007274 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007270:	2303      	movs	r3, #3
 8007272:	e01b      	b.n	80072ac <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800727a:	887b      	ldrh	r3, [r7, #2]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007284:	2100      	movs	r1, #0
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f872 	bl	8007370 <USBH_GetDescriptor>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800729c:	887a      	ldrh	r2, [r7, #2]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f929 	bl	80074f8 <USBH_ParseDevDesc>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	331c      	adds	r3, #28
 80072c4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80072c6:	887b      	ldrh	r3, [r7, #2]
 80072c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072cc:	d901      	bls.n	80072d2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e016      	b.n	8007300 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072d2:	887b      	ldrh	r3, [r7, #2]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072dc:	2100      	movs	r1, #0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f846 	bl	8007370 <USBH_GetDescriptor>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d107      	bne.n	80072fe <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80072ee:	887b      	ldrh	r3, [r7, #2]
 80072f0:	461a      	mov	r2, r3
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f9af 	bl	8007658 <USBH_ParseCfgDesc>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af02      	add	r7, sp, #8
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	607a      	str	r2, [r7, #4]
 8007312:	461a      	mov	r2, r3
 8007314:	460b      	mov	r3, r1
 8007316:	72fb      	strb	r3, [r7, #11]
 8007318:	4613      	mov	r3, r2
 800731a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800731c:	893b      	ldrh	r3, [r7, #8]
 800731e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007322:	d802      	bhi.n	800732a <USBH_Get_StringDesc+0x22>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800732a:	2303      	movs	r3, #3
 800732c:	e01c      	b.n	8007368 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007336:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800733e:	893b      	ldrh	r3, [r7, #8]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	460b      	mov	r3, r1
 8007344:	2100      	movs	r1, #0
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f812 	bl	8007370 <USBH_GetDescriptor>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d107      	bne.n	8007366 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800735c:	893a      	ldrh	r2, [r7, #8]
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fb8d 	bl	8007a80 <USBH_ParseStringDesc>
  }

  return status;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	72fb      	strb	r3, [r7, #11]
 800737e:	4613      	mov	r3, r2
 8007380:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	789b      	ldrb	r3, [r3, #2]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d11c      	bne.n	80073c4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007390:	b2da      	uxtb	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2206      	movs	r2, #6
 800739a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	893a      	ldrh	r2, [r7, #8]
 80073a0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80073a2:	893b      	ldrh	r3, [r7, #8]
 80073a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80073a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ac:	d104      	bne.n	80073b8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f240 4209 	movw	r2, #1033	@ 0x409
 80073b4:	829a      	strh	r2, [r3, #20]
 80073b6:	e002      	b.n	80073be <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8b3a      	ldrh	r2, [r7, #24]
 80073c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80073c4:	8b3b      	ldrh	r3, [r7, #24]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fba5 	bl	8007b1a <USBH_CtlReq>
 80073d0:	4603      	mov	r3, r0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	789b      	ldrb	r3, [r3, #2]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d10f      	bne.n	800740e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2205      	movs	r2, #5
 80073f8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800740e:	2200      	movs	r2, #0
 8007410:	2100      	movs	r1, #0
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fb81 	bl	8007b1a <USBH_CtlReq>
 8007418:	4603      	mov	r3, r0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	789b      	ldrb	r3, [r3, #2]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10e      	bne.n	8007454 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2209      	movs	r2, #9
 8007440:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	887a      	ldrh	r2, [r7, #2]
 8007446:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fb5e 	bl	8007b1a <USBH_CtlReq>
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	789b      	ldrb	r3, [r3, #2]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d10f      	bne.n	800749c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2203      	movs	r2, #3
 8007486:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800749c:	2200      	movs	r2, #0
 800749e:	2100      	movs	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fb3a 	bl	8007b1a <USBH_CtlReq>
 80074a6:	4603      	mov	r3, r0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	789b      	ldrb	r3, [r3, #2]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d10f      	bne.n	80074e4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074e4:	2200      	movs	r2, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fb16 	bl	8007b1a <USBH_CtlReq>
 80074ee:	4603      	mov	r3, r0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800750c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007518:	2302      	movs	r3, #2
 800751a:	e094      	b.n	8007646 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	785a      	ldrb	r2, [r3, #1]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	3302      	adds	r3, #2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	3303      	adds	r3, #3
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	b29b      	uxth	r3, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	b29a      	uxth	r2, r3
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	791a      	ldrb	r2, [r3, #4]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	795a      	ldrb	r2, [r3, #5]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	799a      	ldrb	r2, [r3, #6]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	79da      	ldrb	r2, [r3, #7]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007576:	2b01      	cmp	r3, #1
 8007578:	d11b      	bne.n	80075b2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	79db      	ldrb	r3, [r3, #7]
 800757e:	2b20      	cmp	r3, #32
 8007580:	dc0f      	bgt.n	80075a2 <USBH_ParseDevDesc+0xaa>
 8007582:	2b08      	cmp	r3, #8
 8007584:	db0f      	blt.n	80075a6 <USBH_ParseDevDesc+0xae>
 8007586:	3b08      	subs	r3, #8
 8007588:	4a32      	ldr	r2, [pc, #200]	@ (8007654 <USBH_ParseDevDesc+0x15c>)
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <USBH_ParseDevDesc+0xb6>
 80075a0:	e001      	b.n	80075a6 <USBH_ParseDevDesc+0xae>
 80075a2:	2b40      	cmp	r3, #64	@ 0x40
 80075a4:	d003      	beq.n	80075ae <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2208      	movs	r2, #8
 80075aa:	71da      	strb	r2, [r3, #7]
        break;
 80075ac:	e000      	b.n	80075b0 <USBH_ParseDevDesc+0xb8>
        break;
 80075ae:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80075b0:	e00e      	b.n	80075d0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d107      	bne.n	80075cc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	79db      	ldrb	r3, [r3, #7]
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d005      	beq.n	80075d0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2208      	movs	r2, #8
 80075c8:	71da      	strb	r2, [r3, #7]
 80075ca:	e001      	b.n	80075d0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80075cc:	2303      	movs	r3, #3
 80075ce:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d936      	bls.n	8007644 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	3308      	adds	r3, #8
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	3309      	adds	r3, #9
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	330a      	adds	r3, #10
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	330b      	adds	r3, #11
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	b29b      	uxth	r3, r3
 8007602:	4313      	orrs	r3, r2
 8007604:	b29a      	uxth	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	330c      	adds	r3, #12
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	330d      	adds	r3, #13
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	021b      	lsls	r3, r3, #8
 800761a:	b29b      	uxth	r3, r3
 800761c:	4313      	orrs	r3, r2
 800761e:	b29a      	uxth	r2, r3
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	7b9a      	ldrb	r2, [r3, #14]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	7bda      	ldrb	r2, [r3, #15]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	7c1a      	ldrb	r2, [r3, #16]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	7c5a      	ldrb	r2, [r3, #17]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
}
 8007646:	4618      	mov	r0, r3
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	01000101 	.word	0x01000101

08007658 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08c      	sub	sp, #48	@ 0x30
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800766c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007686:	2302      	movs	r3, #2
 8007688:	e0da      	b.n	8007840 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	785a      	ldrb	r2, [r3, #1]
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	3302      	adds	r3, #2
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	3303      	adds	r3, #3
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b8:	bf28      	it	cs
 80076ba:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80076be:	b29a      	uxth	r2, r3
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	791a      	ldrb	r2, [r3, #4]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	795a      	ldrb	r2, [r3, #5]
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	799a      	ldrb	r2, [r3, #6]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	79da      	ldrb	r2, [r3, #7]
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	7a1a      	ldrb	r2, [r3, #8]
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	d002      	beq.n	80076fa <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	2209      	movs	r2, #9
 80076f8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b09      	cmp	r3, #9
 80076fe:	f240 809d 	bls.w	800783c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007702:	2309      	movs	r3, #9
 8007704:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800770a:	e081      	b.n	8007810 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800770c:	f107 0316 	add.w	r3, r7, #22
 8007710:	4619      	mov	r1, r3
 8007712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007714:	f000 f9e7 	bl	8007ae6 <USBH_GetNextDesc>
 8007718:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	2b04      	cmp	r3, #4
 8007720:	d176      	bne.n	8007810 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b09      	cmp	r3, #9
 8007728:	d002      	beq.n	8007730 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772c:	2209      	movs	r2, #9
 800772e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007734:	221a      	movs	r2, #26
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	3308      	adds	r3, #8
 800773c:	6a3a      	ldr	r2, [r7, #32]
 800773e:	4413      	add	r3, r2
 8007740:	3302      	adds	r3, #2
 8007742:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007746:	69f8      	ldr	r0, [r7, #28]
 8007748:	f000 f87e 	bl	8007848 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007756:	e043      	b.n	80077e0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007758:	f107 0316 	add.w	r3, r7, #22
 800775c:	4619      	mov	r1, r3
 800775e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007760:	f000 f9c1 	bl	8007ae6 <USBH_GetNextDesc>
 8007764:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b05      	cmp	r3, #5
 800776c:	d138      	bne.n	80077e0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	795b      	ldrb	r3, [r3, #5]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d113      	bne.n	800779e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800777a:	2b02      	cmp	r3, #2
 800777c:	d003      	beq.n	8007786 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	799b      	ldrb	r3, [r3, #6]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d10b      	bne.n	800779e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	79db      	ldrb	r3, [r3, #7]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <USBH_ParseCfgDesc+0x14e>
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b09      	cmp	r3, #9
 8007794:	d007      	beq.n	80077a6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007798:	2209      	movs	r2, #9
 800779a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800779c:	e003      	b.n	80077a6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	2207      	movs	r2, #7
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e000      	b.n	80077a8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80077a6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80077a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077b0:	3201      	adds	r2, #1
 80077b2:	00d2      	lsls	r2, r2, #3
 80077b4:	211a      	movs	r1, #26
 80077b6:	fb01 f303 	mul.w	r3, r1, r3
 80077ba:	4413      	add	r3, r2
 80077bc:	3308      	adds	r3, #8
 80077be:	6a3a      	ldr	r2, [r7, #32]
 80077c0:	4413      	add	r3, r2
 80077c2:	3304      	adds	r3, #4
 80077c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80077c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077c8:	69b9      	ldr	r1, [r7, #24]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f870 	bl	80078b0 <USBH_ParseEPDesc>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80077d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077da:	3301      	adds	r3, #1
 80077dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	791b      	ldrb	r3, [r3, #4]
 80077e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d204      	bcs.n	80077f6 <USBH_ParseCfgDesc+0x19e>
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	885a      	ldrh	r2, [r3, #2]
 80077f0:	8afb      	ldrh	r3, [r7, #22]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d8b0      	bhi.n	8007758 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	791b      	ldrb	r3, [r3, #4]
 80077fa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077fe:	429a      	cmp	r2, r3
 8007800:	d201      	bcs.n	8007806 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007802:	2303      	movs	r3, #3
 8007804:	e01c      	b.n	8007840 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800780a:	3301      	adds	r3, #1
 800780c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007814:	2b01      	cmp	r3, #1
 8007816:	d805      	bhi.n	8007824 <USBH_ParseCfgDesc+0x1cc>
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	885a      	ldrh	r2, [r3, #2]
 800781c:	8afb      	ldrh	r3, [r7, #22]
 800781e:	429a      	cmp	r2, r3
 8007820:	f63f af74 	bhi.w	800770c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	791b      	ldrb	r3, [r3, #4]
 8007828:	2b02      	cmp	r3, #2
 800782a:	bf28      	it	cs
 800782c:	2302      	movcs	r3, #2
 800782e:	b2db      	uxtb	r3, r3
 8007830:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007834:	429a      	cmp	r2, r3
 8007836:	d201      	bcs.n	800783c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007838:	2303      	movs	r3, #3
 800783a:	e001      	b.n	8007840 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800783c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007840:	4618      	mov	r0, r3
 8007842:	3730      	adds	r7, #48	@ 0x30
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781a      	ldrb	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	785a      	ldrb	r2, [r3, #1]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	789a      	ldrb	r2, [r3, #2]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	78da      	ldrb	r2, [r3, #3]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	3304      	adds	r3, #4
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b02      	cmp	r3, #2
 800787a:	bf28      	it	cs
 800787c:	2302      	movcs	r3, #2
 800787e:	b2da      	uxtb	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	795a      	ldrb	r2, [r3, #5]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	799a      	ldrb	r2, [r3, #6]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	79da      	ldrb	r2, [r3, #7]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	7a1a      	ldrb	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	721a      	strb	r2, [r3, #8]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	785a      	ldrb	r2, [r3, #1]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	789a      	ldrb	r2, [r3, #2]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	78da      	ldrb	r2, [r3, #3]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3305      	adds	r3, #5
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	799a      	ldrb	r2, [r3, #6]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	889b      	ldrh	r3, [r3, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800790e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007912:	d804      	bhi.n	800791e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800791c:	d901      	bls.n	8007922 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800791e:	2303      	movs	r3, #3
 8007920:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007928:	2b00      	cmp	r3, #0
 800792a:	d136      	bne.n	800799a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	78db      	ldrb	r3, [r3, #3]
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d108      	bne.n	800794a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	889b      	ldrh	r3, [r3, #4]
 800793c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007940:	f240 8097 	bls.w	8007a72 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007944:	2303      	movs	r3, #3
 8007946:	75fb      	strb	r3, [r7, #23]
 8007948:	e093      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	78db      	ldrb	r3, [r3, #3]
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d107      	bne.n	8007966 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	889b      	ldrh	r3, [r3, #4]
 800795a:	2b40      	cmp	r3, #64	@ 0x40
 800795c:	f240 8089 	bls.w	8007a72 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007960:	2303      	movs	r3, #3
 8007962:	75fb      	strb	r3, [r7, #23]
 8007964:	e085      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	78db      	ldrb	r3, [r3, #3]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	2b01      	cmp	r3, #1
 8007970:	d005      	beq.n	800797e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	78db      	ldrb	r3, [r3, #3]
 8007976:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800797a:	2b03      	cmp	r3, #3
 800797c:	d10a      	bne.n	8007994 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	799b      	ldrb	r3, [r3, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <USBH_ParseEPDesc+0xde>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	799b      	ldrb	r3, [r3, #6]
 800798a:	2b10      	cmp	r3, #16
 800798c:	d970      	bls.n	8007a70 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800798e:	2303      	movs	r3, #3
 8007990:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007992:	e06d      	b.n	8007a70 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007994:	2303      	movs	r3, #3
 8007996:	75fb      	strb	r3, [r7, #23]
 8007998:	e06b      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d13c      	bne.n	8007a1e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	78db      	ldrb	r3, [r3, #3]
 80079a8:	f003 0303 	and.w	r3, r3, #3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d005      	beq.n	80079bc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	78db      	ldrb	r3, [r3, #3]
 80079b4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d106      	bne.n	80079ca <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	889b      	ldrh	r3, [r3, #4]
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d956      	bls.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80079c4:	2303      	movs	r3, #3
 80079c6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80079c8:	e053      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	78db      	ldrb	r3, [r3, #3]
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10e      	bne.n	80079f4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	799b      	ldrb	r3, [r3, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80079e2:	2b10      	cmp	r3, #16
 80079e4:	d803      	bhi.n	80079ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	d941      	bls.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80079ee:	2303      	movs	r3, #3
 80079f0:	75fb      	strb	r3, [r7, #23]
 80079f2:	e03e      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	78db      	ldrb	r3, [r3, #3]
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d10b      	bne.n	8007a18 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	799b      	ldrb	r3, [r3, #6]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <USBH_ParseEPDesc+0x162>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	889b      	ldrh	r3, [r3, #4]
 8007a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a10:	d32f      	bcc.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a12:	2303      	movs	r3, #3
 8007a14:	75fb      	strb	r3, [r7, #23]
 8007a16:	e02c      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	75fb      	strb	r3, [r7, #23]
 8007a1c:	e029      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d120      	bne.n	8007a6a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	889b      	ldrh	r3, [r3, #4]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d01a      	beq.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	75fb      	strb	r3, [r7, #23]
 8007a40:	e017      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	78db      	ldrb	r3, [r3, #3]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d10a      	bne.n	8007a64 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	799b      	ldrb	r3, [r3, #6]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <USBH_ParseEPDesc+0x1ae>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	889b      	ldrh	r3, [r3, #4]
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d909      	bls.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	75fb      	strb	r3, [r7, #23]
 8007a62:	e006      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007a64:	2303      	movs	r3, #3
 8007a66:	75fb      	strb	r3, [r7, #23]
 8007a68:	e003      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	75fb      	strb	r3, [r7, #23]
 8007a6e:	e000      	b.n	8007a72 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a70:	bf00      	nop
  }

  return status;
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	371c      	adds	r7, #28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3301      	adds	r3, #1
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d120      	bne.n	8007ada <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	1e9a      	subs	r2, r3, #2
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	bf28      	it	cs
 8007aa4:	4613      	movcs	r3, r2
 8007aa6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3302      	adds	r3, #2
 8007aac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007aae:	2300      	movs	r3, #0
 8007ab0:	82fb      	strh	r3, [r7, #22]
 8007ab2:	e00b      	b.n	8007acc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ab4:	8afb      	ldrh	r3, [r7, #22]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	781a      	ldrb	r2, [r3, #0]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ac6:	8afb      	ldrh	r3, [r7, #22]
 8007ac8:	3302      	adds	r3, #2
 8007aca:	82fb      	strh	r3, [r7, #22]
 8007acc:	8afa      	ldrh	r2, [r7, #22]
 8007ace:	8abb      	ldrh	r3, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d3ef      	bcc.n	8007ab4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7812      	ldrb	r2, [r2, #0]
 8007af8:	4413      	add	r3, r2
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	4613      	mov	r3, r2
 8007b26:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	789b      	ldrb	r3, [r3, #2]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d002      	beq.n	8007b3a <USBH_CtlReq+0x20>
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d00f      	beq.n	8007b58 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007b38:	e027      	b.n	8007b8a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b52:	2301      	movs	r3, #1
 8007b54:	75fb      	strb	r3, [r7, #23]
      break;
 8007b56:	e018      	b.n	8007b8a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f81b 	bl	8007b94 <USBH_HandleControl>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <USBH_CtlReq+0x54>
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d106      	bne.n	8007b7c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	761a      	strb	r2, [r3, #24]
      break;
 8007b7a:	e005      	b.n	8007b88 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d102      	bne.n	8007b88 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	709a      	strb	r2, [r3, #2]
      break;
 8007b88:	bf00      	nop
  }
  return status;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7e1b      	ldrb	r3, [r3, #24]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	2b0a      	cmp	r3, #10
 8007bac:	f200 8156 	bhi.w	8007e5c <USBH_HandleControl+0x2c8>
 8007bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <USBH_HandleControl+0x24>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	08007bff 	.word	0x08007bff
 8007bc0:	08007c69 	.word	0x08007c69
 8007bc4:	08007c8f 	.word	0x08007c8f
 8007bc8:	08007cc7 	.word	0x08007cc7
 8007bcc:	08007cf1 	.word	0x08007cf1
 8007bd0:	08007d43 	.word	0x08007d43
 8007bd4:	08007d65 	.word	0x08007d65
 8007bd8:	08007da1 	.word	0x08007da1
 8007bdc:	08007dc7 	.word	0x08007dc7
 8007be0:	08007e05 	.word	0x08007e05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f103 0110 	add.w	r1, r3, #16
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	795b      	ldrb	r3, [r3, #5]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f943 	bl	8007e7c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	761a      	strb	r2, [r3, #24]
      break;
 8007bfc:	e139      	b.n	8007e72 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	795b      	ldrb	r3, [r3, #5]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fec3 	bl	8008990 <USBH_LL_GetURBState>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d11e      	bne.n	8007c52 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7c1b      	ldrb	r3, [r3, #16]
 8007c18:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	8adb      	ldrh	r3, [r3, #22]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c26:	7b7b      	ldrb	r3, [r7, #13]
 8007c28:	2b80      	cmp	r3, #128	@ 0x80
 8007c2a:	d103      	bne.n	8007c34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2203      	movs	r2, #3
 8007c30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c32:	e115      	b.n	8007e60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2205      	movs	r2, #5
 8007c38:	761a      	strb	r2, [r3, #24]
      break;
 8007c3a:	e111      	b.n	8007e60 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007c3c:	7b7b      	ldrb	r3, [r7, #13]
 8007c3e:	2b80      	cmp	r3, #128	@ 0x80
 8007c40:	d103      	bne.n	8007c4a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2209      	movs	r2, #9
 8007c46:	761a      	strb	r2, [r3, #24]
      break;
 8007c48:	e10a      	b.n	8007e60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2207      	movs	r2, #7
 8007c4e:	761a      	strb	r2, [r3, #24]
      break;
 8007c50:	e106      	b.n	8007e60 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d003      	beq.n	8007c60 <USBH_HandleControl+0xcc>
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	f040 8100 	bne.w	8007e60 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	220b      	movs	r2, #11
 8007c64:	761a      	strb	r2, [r3, #24]
      break;
 8007c66:	e0fb      	b.n	8007e60 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6899      	ldr	r1, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	899a      	ldrh	r2, [r3, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	791b      	ldrb	r3, [r3, #4]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f93a 	bl	8007efa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2204      	movs	r2, #4
 8007c8a:	761a      	strb	r2, [r3, #24]
      break;
 8007c8c:	e0f1      	b.n	8007e72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	791b      	ldrb	r3, [r3, #4]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fe7b 	bl	8008990 <USBH_LL_GetURBState>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d102      	bne.n	8007caa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2209      	movs	r2, #9
 8007ca8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	d102      	bne.n	8007cb6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cb4:	e0d6      	b.n	8007e64 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	f040 80d3 	bne.w	8007e64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	220b      	movs	r2, #11
 8007cc2:	761a      	strb	r2, [r3, #24]
      break;
 8007cc4:	e0ce      	b.n	8007e64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6899      	ldr	r1, [r3, #8]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	899a      	ldrh	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	795b      	ldrb	r3, [r3, #5]
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	9000      	str	r0, [sp, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f8ea 	bl	8007eb0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2206      	movs	r2, #6
 8007cec:	761a      	strb	r2, [r3, #24]
      break;
 8007cee:	e0c0      	b.n	8007e72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	795b      	ldrb	r3, [r3, #5]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fe4a 	bl	8008990 <USBH_LL_GetURBState>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d103      	bne.n	8007d0e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2207      	movs	r2, #7
 8007d0a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d0c:	e0ac      	b.n	8007e68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	d105      	bne.n	8007d20 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220c      	movs	r2, #12
 8007d18:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1e:	e0a3      	b.n	8007e68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d103      	bne.n	8007d2e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2205      	movs	r2, #5
 8007d2a:	761a      	strb	r2, [r3, #24]
      break;
 8007d2c:	e09c      	b.n	8007e68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	f040 8099 	bne.w	8007e68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	220b      	movs	r2, #11
 8007d3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d40:	e092      	b.n	8007e68 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	791b      	ldrb	r3, [r3, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f8d5 	bl	8007efa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2208      	movs	r2, #8
 8007d60:	761a      	strb	r2, [r3, #24]

      break;
 8007d62:	e086      	b.n	8007e72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	791b      	ldrb	r3, [r3, #4]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fe10 	bl	8008990 <USBH_LL_GetURBState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d105      	bne.n	8007d86 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220d      	movs	r2, #13
 8007d7e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d84:	e072      	b.n	8007e6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d103      	bne.n	8007d94 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220b      	movs	r2, #11
 8007d90:	761a      	strb	r2, [r3, #24]
      break;
 8007d92:	e06b      	b.n	8007e6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	d168      	bne.n	8007e6c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d9e:	e065      	b.n	8007e6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	795b      	ldrb	r3, [r3, #5]
 8007da4:	2201      	movs	r2, #1
 8007da6:	9200      	str	r2, [sp, #0]
 8007da8:	2200      	movs	r2, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f87f 	bl	8007eb0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	220a      	movs	r2, #10
 8007dc2:	761a      	strb	r2, [r3, #24]
      break;
 8007dc4:	e055      	b.n	8007e72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	795b      	ldrb	r3, [r3, #5]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fddf 	bl	8008990 <USBH_LL_GetURBState>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d105      	bne.n	8007de8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220d      	movs	r2, #13
 8007de4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007de6:	e043      	b.n	8007e70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d103      	bne.n	8007df6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2209      	movs	r2, #9
 8007df2:	761a      	strb	r2, [r3, #24]
      break;
 8007df4:	e03c      	b.n	8007e70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d139      	bne.n	8007e70 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	220b      	movs	r2, #11
 8007e00:	761a      	strb	r2, [r3, #24]
      break;
 8007e02:	e035      	b.n	8007e70 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7e5b      	ldrb	r3, [r3, #25]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	765a      	strb	r2, [r3, #25]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	7e5b      	ldrb	r3, [r3, #25]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d806      	bhi.n	8007e26 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e24:	e025      	b.n	8007e72 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e2c:	2106      	movs	r1, #6
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	795b      	ldrb	r3, [r3, #5]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f90c 	bl	800805c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	791b      	ldrb	r3, [r3, #4]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f906 	bl	800805c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e56:	2302      	movs	r3, #2
 8007e58:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5a:	e00a      	b.n	8007e72 <USBH_HandleControl+0x2de>

    default:
      break;
 8007e5c:	bf00      	nop
 8007e5e:	e008      	b.n	8007e72 <USBH_HandleControl+0x2de>
      break;
 8007e60:	bf00      	nop
 8007e62:	e006      	b.n	8007e72 <USBH_HandleControl+0x2de>
      break;
 8007e64:	bf00      	nop
 8007e66:	e004      	b.n	8007e72 <USBH_HandleControl+0x2de>
      break;
 8007e68:	bf00      	nop
 8007e6a:	e002      	b.n	8007e72 <USBH_HandleControl+0x2de>
      break;
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <USBH_HandleControl+0x2de>
      break;
 8007e70:	bf00      	nop
  }

  return status;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af04      	add	r7, sp, #16
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e8a:	79f9      	ldrb	r1, [r7, #7]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	2308      	movs	r3, #8
 8007e92:	9302      	str	r3, [sp, #8]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fd44 	bl	800892e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af04      	add	r7, sp, #16
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	80fb      	strh	r3, [r7, #6]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ed4:	7979      	ldrb	r1, [r7, #5]
 8007ed6:	7e3b      	ldrb	r3, [r7, #24]
 8007ed8:	9303      	str	r3, [sp, #12]
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	9302      	str	r3, [sp, #8]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2200      	movs	r2, #0
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fd1f 	bl	800892e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b088      	sub	sp, #32
 8007efe:	af04      	add	r7, sp, #16
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	4611      	mov	r1, r2
 8007f06:	461a      	mov	r2, r3
 8007f08:	460b      	mov	r3, r1
 8007f0a:	80fb      	strh	r3, [r7, #6]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f10:	7979      	ldrb	r1, [r7, #5]
 8007f12:	2300      	movs	r3, #0
 8007f14:	9303      	str	r3, [sp, #12]
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	9302      	str	r3, [sp, #8]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	2301      	movs	r3, #1
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	2201      	movs	r2, #1
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 fd01 	bl	800892e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f2c:	2300      	movs	r3, #0

}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b088      	sub	sp, #32
 8007f3a:	af04      	add	r7, sp, #16
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	4611      	mov	r1, r2
 8007f42:	461a      	mov	r2, r3
 8007f44:	460b      	mov	r3, r1
 8007f46:	80fb      	strh	r3, [r7, #6]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f5a:	7979      	ldrb	r1, [r7, #5]
 8007f5c:	7e3b      	ldrb	r3, [r7, #24]
 8007f5e:	9303      	str	r3, [sp, #12]
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	9302      	str	r3, [sp, #8]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	2301      	movs	r3, #1
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fcdc 	bl	800892e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af04      	add	r7, sp, #16
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	460b      	mov	r3, r1
 8007f90:	80fb      	strh	r3, [r7, #6]
 8007f92:	4613      	mov	r3, r2
 8007f94:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f96:	7979      	ldrb	r1, [r7, #5]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	9302      	str	r3, [sp, #8]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2302      	movs	r3, #2
 8007faa:	2201      	movs	r2, #1
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fcbe 	bl	800892e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af04      	add	r7, sp, #16
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	4603      	mov	r3, r0
 8007fcc:	70fb      	strb	r3, [r7, #3]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70bb      	strb	r3, [r7, #2]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007fd6:	7878      	ldrb	r0, [r7, #1]
 8007fd8:	78ba      	ldrb	r2, [r7, #2]
 8007fda:	78f9      	ldrb	r1, [r7, #3]
 8007fdc:	8b3b      	ldrh	r3, [r7, #24]
 8007fde:	9302      	str	r3, [sp, #8]
 8007fe0:	7d3b      	ldrb	r3, [r7, #20]
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	7c3b      	ldrb	r3, [r7, #16]
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	4603      	mov	r3, r0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc51 	bl	8008892 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fc70 	bl	80088f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f836 	bl	8008098 <USBH_GetFreePipe>
 800802c:	4603      	mov	r3, r0
 800802e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008036:	4293      	cmp	r3, r2
 8008038:	d00a      	beq.n	8008050 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800803a:	78fa      	ldrb	r2, [r7, #3]
 800803c:	89fb      	ldrh	r3, [r7, #14]
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	33e0      	adds	r3, #224	@ 0xe0
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008050:	89fb      	ldrh	r3, [r7, #14]
 8008052:	b2db      	uxtb	r3, r3
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	2b0f      	cmp	r3, #15
 800806c:	d80d      	bhi.n	800808a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	33e0      	adds	r3, #224	@ 0xe0
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	33e0      	adds	r3, #224	@ 0xe0
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
 80080a8:	e00f      	b.n	80080ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	33e0      	adds	r3, #224	@ 0xe0
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	e007      	b.n	80080d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	3301      	adds	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	2b0f      	cmp	r3, #15
 80080ce:	d9ec      	bls.n	80080aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	@ 0x28
 80080e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ea:	4b7e      	ldr	r3, [pc, #504]	@ (80082e4 <xTaskIncrementTick+0x204>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80ed 	bne.w	80082ce <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080f4:	4b7c      	ldr	r3, [pc, #496]	@ (80082e8 <xTaskIncrementTick+0x208>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80080fc:	4a7a      	ldr	r2, [pc, #488]	@ (80082e8 <xTaskIncrementTick+0x208>)
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d121      	bne.n	800814c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008108:	4b78      	ldr	r3, [pc, #480]	@ (80082ec <xTaskIncrementTick+0x20c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	e7fd      	b.n	8008126 <xTaskIncrementTick+0x46>
 800812a:	4b70      	ldr	r3, [pc, #448]	@ (80082ec <xTaskIncrementTick+0x20c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	4b6f      	ldr	r3, [pc, #444]	@ (80082f0 <xTaskIncrementTick+0x210>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a6d      	ldr	r2, [pc, #436]	@ (80082ec <xTaskIncrementTick+0x20c>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	4a6d      	ldr	r2, [pc, #436]	@ (80082f0 <xTaskIncrementTick+0x210>)
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	4b6d      	ldr	r3, [pc, #436]	@ (80082f4 <xTaskIncrementTick+0x214>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	4a6b      	ldr	r2, [pc, #428]	@ (80082f4 <xTaskIncrementTick+0x214>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	f000 f93e 	bl	80083c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800814c:	4b6a      	ldr	r3, [pc, #424]	@ (80082f8 <xTaskIncrementTick+0x218>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6a3a      	ldr	r2, [r7, #32]
 8008152:	429a      	cmp	r2, r3
 8008154:	f0c0 80a6 	bcc.w	80082a4 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008158:	4b64      	ldr	r3, [pc, #400]	@ (80082ec <xTaskIncrementTick+0x20c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d104      	bne.n	800816c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008162:	4b65      	ldr	r3, [pc, #404]	@ (80082f8 <xTaskIncrementTick+0x218>)
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	601a      	str	r2, [r3, #0]
                    break;
 800816a:	e09b      	b.n	80082a4 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816c:	4b5f      	ldr	r3, [pc, #380]	@ (80082ec <xTaskIncrementTick+0x20c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800817c:	6a3a      	ldr	r2, [r7, #32]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	429a      	cmp	r2, r3
 8008182:	d203      	bcs.n	800818c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008184:	4a5c      	ldr	r2, [pc, #368]	@ (80082f8 <xTaskIncrementTick+0x218>)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800818a:	e08b      	b.n	80082a4 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	68d2      	ldr	r2, [r2, #12]
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	6892      	ldr	r2, [r2, #8]
 80081a4:	605a      	str	r2, [r3, #4]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	3304      	adds	r3, #4
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d103      	bne.n	80081ba <xTaskIncrementTick+0xda>
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	605a      	str	r2, [r3, #4]
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2200      	movs	r2, #0
 80081be:	615a      	str	r2, [r3, #20]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	1e5a      	subs	r2, r3, #1
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d01e      	beq.n	8008210 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	6a12      	ldr	r2, [r2, #32]
 80081e0:	609a      	str	r2, [r3, #8]
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	69d2      	ldr	r2, [r2, #28]
 80081ea:	605a      	str	r2, [r3, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	3318      	adds	r3, #24
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d103      	bne.n	8008200 <xTaskIncrementTick+0x120>
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	6a1a      	ldr	r2, [r3, #32]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	605a      	str	r2, [r3, #4]
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2200      	movs	r2, #0
 8008204:	629a      	str	r2, [r3, #40]	@ 0x28
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	1e5a      	subs	r2, r3, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	2201      	movs	r2, #1
 8008216:	409a      	lsls	r2, r3
 8008218:	4b38      	ldr	r3, [pc, #224]	@ (80082fc <xTaskIncrementTick+0x21c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4313      	orrs	r3, r2
 800821e:	4a37      	ldr	r2, [pc, #220]	@ (80082fc <xTaskIncrementTick+0x21c>)
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008226:	4936      	ldr	r1, [pc, #216]	@ (8008300 <xTaskIncrementTick+0x220>)
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	3304      	adds	r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60bb      	str	r3, [r7, #8]
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	609a      	str	r2, [r3, #8]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	3204      	adds	r2, #4
 800824e:	605a      	str	r2, [r3, #4]
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	1d1a      	adds	r2, r3, #4
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4a26      	ldr	r2, [pc, #152]	@ (8008300 <xTaskIncrementTick+0x220>)
 8008266:	441a      	add	r2, r3
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	615a      	str	r2, [r3, #20]
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008270:	4923      	ldr	r1, [pc, #140]	@ (8008300 <xTaskIncrementTick+0x220>)
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	481f      	ldr	r0, [pc, #124]	@ (8008300 <xTaskIncrementTick+0x220>)
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4403      	add	r3, r0
 800828c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008292:	4b1c      	ldr	r3, [pc, #112]	@ (8008304 <xTaskIncrementTick+0x224>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	429a      	cmp	r2, r3
 800829a:	f67f af5d 	bls.w	8008158 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800829e:	2301      	movs	r3, #1
 80082a0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a2:	e759      	b.n	8008158 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082a4:	4b17      	ldr	r3, [pc, #92]	@ (8008304 <xTaskIncrementTick+0x224>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082aa:	4915      	ldr	r1, [pc, #84]	@ (8008300 <xTaskIncrementTick+0x220>)
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d901      	bls.n	80082c0 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80082bc:	2301      	movs	r3, #1
 80082be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80082c0:	4b11      	ldr	r3, [pc, #68]	@ (8008308 <xTaskIncrementTick+0x228>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d007      	beq.n	80082d8 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80082c8:	2301      	movs	r3, #1
 80082ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80082cc:	e004      	b.n	80082d8 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80082ce:	4b0f      	ldr	r3, [pc, #60]	@ (800830c <xTaskIncrementTick+0x22c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	4a0d      	ldr	r2, [pc, #52]	@ (800830c <xTaskIncrementTick+0x22c>)
 80082d6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3728      	adds	r7, #40	@ 0x28
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000260 	.word	0x20000260
 80082e8:	20000248 	.word	0x20000248
 80082ec:	20000240 	.word	0x20000240
 80082f0:	20000244 	.word	0x20000244
 80082f4:	20000258 	.word	0x20000258
 80082f8:	2000025c 	.word	0x2000025c
 80082fc:	2000024c 	.word	0x2000024c
 8008300:	200001dc 	.word	0x200001dc
 8008304:	200001d8 	.word	0x200001d8
 8008308:	20000254 	.word	0x20000254
 800830c:	20000250 	.word	0x20000250

08008310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008316:	4b27      	ldr	r3, [pc, #156]	@ (80083b4 <vTaskSwitchContext+0xa4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800831e:	4b26      	ldr	r3, [pc, #152]	@ (80083b8 <vTaskSwitchContext+0xa8>)
 8008320:	2201      	movs	r2, #1
 8008322:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008324:	e040      	b.n	80083a8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8008326:	4b24      	ldr	r3, [pc, #144]	@ (80083b8 <vTaskSwitchContext+0xa8>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832c:	4b23      	ldr	r3, [pc, #140]	@ (80083bc <vTaskSwitchContext+0xac>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	fab3 f383 	clz	r3, r3
 8008338:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	f1c3 031f 	rsb	r3, r3, #31
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	491f      	ldr	r1, [pc, #124]	@ (80083c0 <vTaskSwitchContext+0xb0>)
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10b      	bne.n	800836e <vTaskSwitchContext+0x5e>
        __asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	607b      	str	r3, [r7, #4]
    }
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	e7fd      	b.n	800836a <vTaskSwitchContext+0x5a>
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4a11      	ldr	r2, [pc, #68]	@ (80083c0 <vTaskSwitchContext+0xb0>)
 800837a:	4413      	add	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	3308      	adds	r3, #8
 8008390:	429a      	cmp	r2, r3
 8008392:	d104      	bne.n	800839e <vTaskSwitchContext+0x8e>
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	4a07      	ldr	r2, [pc, #28]	@ (80083c4 <vTaskSwitchContext+0xb4>)
 80083a6:	6013      	str	r3, [r2, #0]
}
 80083a8:	bf00      	nop
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	20000260 	.word	0x20000260
 80083b8:	20000254 	.word	0x20000254
 80083bc:	2000024c 	.word	0x2000024c
 80083c0:	200001dc 	.word	0x200001dc
 80083c4:	200001d8 	.word	0x200001d8

080083c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <prvResetNextTaskUnblockTime+0x30>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d104      	bne.n	80083e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80083d6:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <prvResetNextTaskUnblockTime+0x34>)
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295
 80083dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80083de:	e005      	b.n	80083ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80083e0:	4b05      	ldr	r3, [pc, #20]	@ (80083f8 <prvResetNextTaskUnblockTime+0x30>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a04      	ldr	r2, [pc, #16]	@ (80083fc <prvResetNextTaskUnblockTime+0x34>)
 80083ea:	6013      	str	r3, [r2, #0]
}
 80083ec:	bf00      	nop
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20000240 	.word	0x20000240
 80083fc:	2000025c 	.word	0x2000025c

08008400 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008400:	4b07      	ldr	r3, [pc, #28]	@ (8008420 <pxCurrentTCBConst2>)
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6808      	ldr	r0, [r1, #0]
 8008406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	f380 8809 	msr	PSP, r0
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8811 	msr	BASEPRI, r0
 800841a:	4770      	bx	lr
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst2>:
 8008420:	200001d8 	.word	0x200001d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
	...

08008430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008430:	f3ef 8009 	mrs	r0, PSP
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4b15      	ldr	r3, [pc, #84]	@ (8008490 <pxCurrentTCBConst>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	f01e 0f10 	tst.w	lr, #16
 8008440:	bf08      	it	eq
 8008442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	6010      	str	r0, [r2, #0]
 800844c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008454:	f380 8811 	msr	BASEPRI, r0
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f7ff ff56 	bl	8008310 <vTaskSwitchContext>
 8008464:	f04f 0000 	mov.w	r0, #0
 8008468:	f380 8811 	msr	BASEPRI, r0
 800846c:	bc09      	pop	{r0, r3}
 800846e:	6819      	ldr	r1, [r3, #0]
 8008470:	6808      	ldr	r0, [r1, #0]
 8008472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008476:	f01e 0f10 	tst.w	lr, #16
 800847a:	bf08      	it	eq
 800847c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008480:	f380 8809 	msr	PSP, r0
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	f3af 8000 	nop.w

08008490 <pxCurrentTCBConst>:
 8008490:	200001d8 	.word	0x200001d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop

08008498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
        __asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	607b      	str	r3, [r7, #4]
    }
 80084b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80084b2:	f7ff fe15 	bl	80080e0 <xTaskIncrementTick>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084bc:	4b06      	ldr	r3, [pc, #24]	@ (80084d8 <SysTick_Handler+0x40>)
 80084be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80084ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	e000ed04 	.word	0xe000ed04

080084dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084e0:	2201      	movs	r2, #1
 80084e2:	490e      	ldr	r1, [pc, #56]	@ (800851c <MX_USB_HOST_Init+0x40>)
 80084e4:	480e      	ldr	r0, [pc, #56]	@ (8008520 <MX_USB_HOST_Init+0x44>)
 80084e6:	f7fe f917 	bl	8006718 <USBH_Init>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80084f0:	f7f8 fa2a 	bl	8000948 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80084f4:	490b      	ldr	r1, [pc, #44]	@ (8008524 <MX_USB_HOST_Init+0x48>)
 80084f6:	480a      	ldr	r0, [pc, #40]	@ (8008520 <MX_USB_HOST_Init+0x44>)
 80084f8:	f7fe f9bb 	bl	8006872 <USBH_RegisterClass>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008502:	f7f8 fa21 	bl	8000948 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008506:	4806      	ldr	r0, [pc, #24]	@ (8008520 <MX_USB_HOST_Init+0x44>)
 8008508:	f7fe fa3f 	bl	800698a <USBH_Start>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008512:	f7f8 fa19 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008516:	bf00      	nop
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	0800853d 	.word	0x0800853d
 8008520:	20000264 	.word	0x20000264
 8008524:	2000000c 	.word	0x2000000c

08008528 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800852c:	4802      	ldr	r0, [pc, #8]	@ (8008538 <MX_USB_HOST_Process+0x10>)
 800852e:	f7fe fa3d 	bl	80069ac <USBH_Process>
}
 8008532:	bf00      	nop
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000264 	.word	0x20000264

0800853c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	3b01      	subs	r3, #1
 800854c:	2b04      	cmp	r3, #4
 800854e:	d819      	bhi.n	8008584 <USBH_UserProcess+0x48>
 8008550:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <USBH_UserProcess+0x1c>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	08008585 	.word	0x08008585
 800855c:	08008575 	.word	0x08008575
 8008560:	08008585 	.word	0x08008585
 8008564:	0800857d 	.word	0x0800857d
 8008568:	0800856d 	.word	0x0800856d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800856c:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <USBH_UserProcess+0x58>)
 800856e:	2203      	movs	r2, #3
 8008570:	701a      	strb	r2, [r3, #0]
  break;
 8008572:	e008      	b.n	8008586 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008574:	4b07      	ldr	r3, [pc, #28]	@ (8008594 <USBH_UserProcess+0x58>)
 8008576:	2202      	movs	r2, #2
 8008578:	701a      	strb	r2, [r3, #0]
  break;
 800857a:	e004      	b.n	8008586 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800857c:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <USBH_UserProcess+0x58>)
 800857e:	2201      	movs	r2, #1
 8008580:	701a      	strb	r2, [r3, #0]
  break;
 8008582:	e000      	b.n	8008586 <USBH_UserProcess+0x4a>

  default:
  break;
 8008584:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	2000063c 	.word	0x2000063c

08008598 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	@ 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085a0:	f107 0314 	add.w	r3, r7, #20
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	605a      	str	r2, [r3, #4]
 80085aa:	609a      	str	r2, [r3, #8]
 80085ac:	60da      	str	r2, [r3, #12]
 80085ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085b8:	d147      	bne.n	800864a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	4b25      	ldr	r3, [pc, #148]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c2:	4a24      	ldr	r2, [pc, #144]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 80085c4:	f043 0301 	orr.w	r3, r3, #1
 80085c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80085ca:	4b22      	ldr	r3, [pc, #136]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80085d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80085e4:	f107 0314 	add.w	r3, r7, #20
 80085e8:	4619      	mov	r1, r3
 80085ea:	481b      	ldr	r0, [pc, #108]	@ (8008658 <HAL_HCD_MspInit+0xc0>)
 80085ec:	f7f8 fd2e 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80085f0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80085f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f6:	2302      	movs	r3, #2
 80085f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085fe:	2303      	movs	r3, #3
 8008600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008602:	230a      	movs	r3, #10
 8008604:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008606:	f107 0314 	add.w	r3, r7, #20
 800860a:	4619      	mov	r1, r3
 800860c:	4812      	ldr	r0, [pc, #72]	@ (8008658 <HAL_HCD_MspInit+0xc0>)
 800860e:	f7f8 fd1d 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008612:	4b10      	ldr	r3, [pc, #64]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 8008614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008616:	4a0f      	ldr	r2, [pc, #60]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 8008618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800861c:	6353      	str	r3, [r2, #52]	@ 0x34
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 8008624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008626:	4a0b      	ldr	r2, [pc, #44]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 8008628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800862c:	6453      	str	r3, [r2, #68]	@ 0x44
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <HAL_HCD_MspInit+0xbc>)
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	2043      	movs	r0, #67	@ 0x43
 8008640:	f7f8 fccd 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008644:	2043      	movs	r0, #67	@ 0x43
 8008646:	f7f8 fce6 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800864a:	bf00      	nop
 800864c:	3728      	adds	r7, #40	@ 0x28
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40023800 	.word	0x40023800
 8008658:	40020000 	.word	0x40020000

0800865c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fd75 	bl	800715a <USBH_LL_IncTimer>
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fdad 	bl	80071e6 <USBH_LL_Connect>
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fdb6 	bl	8007214 <USBH_LL_Disconnect>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
 80086bc:	4613      	mov	r3, r2
 80086be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fd67 	bl	80071ae <USBH_LL_PortEnabled>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fd67 	bl	80071ca <USBH_LL_PortDisabled>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008712:	2b01      	cmp	r3, #1
 8008714:	d12a      	bne.n	800876c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008716:	4a18      	ldr	r2, [pc, #96]	@ (8008778 <USBH_LL_Init+0x74>)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a15      	ldr	r2, [pc, #84]	@ (8008778 <USBH_LL_Init+0x74>)
 8008722:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008726:	4b14      	ldr	r3, [pc, #80]	@ (8008778 <USBH_LL_Init+0x74>)
 8008728:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800872c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800872e:	4b12      	ldr	r3, [pc, #72]	@ (8008778 <USBH_LL_Init+0x74>)
 8008730:	2208      	movs	r2, #8
 8008732:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008734:	4b10      	ldr	r3, [pc, #64]	@ (8008778 <USBH_LL_Init+0x74>)
 8008736:	2201      	movs	r2, #1
 8008738:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800873a:	4b0f      	ldr	r3, [pc, #60]	@ (8008778 <USBH_LL_Init+0x74>)
 800873c:	2200      	movs	r2, #0
 800873e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008740:	4b0d      	ldr	r3, [pc, #52]	@ (8008778 <USBH_LL_Init+0x74>)
 8008742:	2202      	movs	r2, #2
 8008744:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008746:	4b0c      	ldr	r3, [pc, #48]	@ (8008778 <USBH_LL_Init+0x74>)
 8008748:	2200      	movs	r2, #0
 800874a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800874c:	480a      	ldr	r0, [pc, #40]	@ (8008778 <USBH_LL_Init+0x74>)
 800874e:	f7f8 fe1a 	bl	8001386 <HAL_HCD_Init>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008758:	f7f8 f8f6 	bl	8000948 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800875c:	4806      	ldr	r0, [pc, #24]	@ (8008778 <USBH_LL_Init+0x74>)
 800875e:	f7f9 fa7b 	bl	8001c58 <HAL_HCD_GetCurrentFrame>
 8008762:	4603      	mov	r3, r0
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fe fce8 	bl	800713c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000640 	.word	0x20000640

0800877c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008792:	4618      	mov	r0, r3
 8008794:	f7f9 f9e8 	bl	8001b68 <HAL_HCD_Start>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f95e 	bl	8008a60 <USBH_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7f9 f9f0 	bl	8001bae <HAL_HCD_Stop>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f943 	bl	8008a60 <USBH_Get_USB_Status>
 80087da:	4603      	mov	r3, r0
 80087dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087de:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f9 fa3a 	bl	8001c74 <HAL_HCD_GetCurrentSpeed>
 8008800:	4603      	mov	r3, r0
 8008802:	2b02      	cmp	r3, #2
 8008804:	d00c      	beq.n	8008820 <USBH_LL_GetSpeed+0x38>
 8008806:	2b02      	cmp	r3, #2
 8008808:	d80d      	bhi.n	8008826 <USBH_LL_GetSpeed+0x3e>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <USBH_LL_GetSpeed+0x2c>
 800880e:	2b01      	cmp	r3, #1
 8008810:	d003      	beq.n	800881a <USBH_LL_GetSpeed+0x32>
 8008812:	e008      	b.n	8008826 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	e008      	b.n	800882c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
    break;
 800881e:	e005      	b.n	800882c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008820:	2302      	movs	r3, #2
 8008822:	73fb      	strb	r3, [r7, #15]
    break;
 8008824:	e002      	b.n	800882c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008826:	2301      	movs	r3, #1
 8008828:	73fb      	strb	r3, [r7, #15]
    break;
 800882a:	bf00      	nop
  }
  return  speed;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800884c:	4618      	mov	r0, r3
 800884e:	f7f9 f9cb 	bl	8001be8 <HAL_HCD_ResetPort>
 8008852:	4603      	mov	r3, r0
 8008854:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	4618      	mov	r0, r3
 800885a:	f000 f901 	bl	8008a60 <USBH_Get_USB_Status>
 800885e:	4603      	mov	r3, r0
 8008860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008862:	7bbb      	ldrb	r3, [r7, #14]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7f9 f9d3 	bl	8001c2e <HAL_HCD_HC_GetXferCount>
 8008888:	4603      	mov	r3, r0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008892:	b590      	push	{r4, r7, lr}
 8008894:	b089      	sub	sp, #36	@ 0x24
 8008896:	af04      	add	r7, sp, #16
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	461a      	mov	r2, r3
 80088a0:	4603      	mov	r3, r0
 80088a2:	70fb      	strb	r3, [r7, #3]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70bb      	strb	r3, [r7, #2]
 80088a8:	4613      	mov	r3, r2
 80088aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80088ba:	787c      	ldrb	r4, [r7, #1]
 80088bc:	78ba      	ldrb	r2, [r7, #2]
 80088be:	78f9      	ldrb	r1, [r7, #3]
 80088c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80088c2:	9302      	str	r3, [sp, #8]
 80088c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	4623      	mov	r3, r4
 80088d2:	f7f8 fdbf 	bl	8001454 <HAL_HCD_HC_Init>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f8bf 	bl	8008a60 <USBH_Get_USB_Status>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd90      	pop	{r4, r7, pc}

080088f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f7f8 fe58 	bl	80015c4 <HAL_HCD_HC_Halt>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 f8a0 	bl	8008a60 <USBH_Get_USB_Status>
 8008920:	4603      	mov	r3, r0
 8008922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008924:	7bbb      	ldrb	r3, [r7, #14]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800892e:	b590      	push	{r4, r7, lr}
 8008930:	b089      	sub	sp, #36	@ 0x24
 8008932:	af04      	add	r7, sp, #16
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	4608      	mov	r0, r1
 8008938:	4611      	mov	r1, r2
 800893a:	461a      	mov	r2, r3
 800893c:	4603      	mov	r3, r0
 800893e:	70fb      	strb	r3, [r7, #3]
 8008940:	460b      	mov	r3, r1
 8008942:	70bb      	strb	r3, [r7, #2]
 8008944:	4613      	mov	r3, r2
 8008946:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008956:	787c      	ldrb	r4, [r7, #1]
 8008958:	78ba      	ldrb	r2, [r7, #2]
 800895a:	78f9      	ldrb	r1, [r7, #3]
 800895c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008960:	9303      	str	r3, [sp, #12]
 8008962:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008964:	9302      	str	r3, [sp, #8]
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	4623      	mov	r3, r4
 8008972:	f7f8 fe4b 	bl	800160c <HAL_HCD_HC_SubmitRequest>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	4618      	mov	r0, r3
 800897e:	f000 f86f 	bl	8008a60 <USBH_Get_USB_Status>
 8008982:	4603      	mov	r3, r0
 8008984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008986:	7bbb      	ldrb	r3, [r7, #14]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	bd90      	pop	{r4, r7, pc}

08008990 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f9 f92c 	bl	8001c04 <HAL_HCD_HC_GetURBState>
 80089ac:	4603      	mov	r3, r0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d103      	bne.n	80089d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 f872 	bl	8008ab8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80089d4:	20c8      	movs	r0, #200	@ 0xc8
 80089d6:	f7f8 fa03 	bl	8000de0 <HAL_Delay>
  return USBH_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
 80089f0:	4613      	mov	r3, r2
 80089f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80089fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	68f9      	ldr	r1, [r7, #12]
 8008a00:	4613      	mov	r3, r2
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	3317      	adds	r3, #23
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	68f9      	ldr	r1, [r7, #12]
 8008a16:	4613      	mov	r3, r2
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	440b      	add	r3, r1
 8008a20:	333c      	adds	r3, #60	@ 0x3c
 8008a22:	78ba      	ldrb	r2, [r7, #2]
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e009      	b.n	8008a3c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	1a9b      	subs	r3, r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	333d      	adds	r3, #61	@ 0x3d
 8008a38:	78ba      	ldrb	r2, [r7, #2]
 8008a3a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7f8 f9c4 	bl	8000de0 <HAL_Delay>
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d817      	bhi.n	8008aa4 <USBH_Get_USB_Status+0x44>
 8008a74:	a201      	add	r2, pc, #4	@ (adr r2, 8008a7c <USBH_Get_USB_Status+0x1c>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a93 	.word	0x08008a93
 8008a84:	08008a99 	.word	0x08008a99
 8008a88:	08008a9f 	.word	0x08008a9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	e00b      	b.n	8008aaa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a92:	2302      	movs	r3, #2
 8008a94:	73fb      	strb	r3, [r7, #15]
    break;
 8008a96:	e008      	b.n	8008aaa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	e005      	b.n	8008aaa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa2:	e002      	b.n	8008aaa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	bf00      	nop
  }
  return usb_status;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
 8008ad0:	e001      	b.n	8008ad6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	2101      	movs	r1, #1
 8008adc:	4803      	ldr	r0, [pc, #12]	@ (8008aec <MX_DriverVbusFS+0x34>)
 8008ade:	f7f8 fc39 	bl	8001354 <HAL_GPIO_WritePin>
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	40020800 	.word	0x40020800

08008af0 <malloc>:
 8008af0:	4b02      	ldr	r3, [pc, #8]	@ (8008afc <malloc+0xc>)
 8008af2:	4601      	mov	r1, r0
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	f000 b82d 	b.w	8008b54 <_malloc_r>
 8008afa:	bf00      	nop
 8008afc:	2000002c 	.word	0x2000002c

08008b00 <free>:
 8008b00:	4b02      	ldr	r3, [pc, #8]	@ (8008b0c <free+0xc>)
 8008b02:	4601      	mov	r1, r0
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f000 b8ef 	b.w	8008ce8 <_free_r>
 8008b0a:	bf00      	nop
 8008b0c:	2000002c 	.word	0x2000002c

08008b10 <sbrk_aligned>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4e0f      	ldr	r6, [pc, #60]	@ (8008b50 <sbrk_aligned+0x40>)
 8008b14:	460c      	mov	r4, r1
 8008b16:	6831      	ldr	r1, [r6, #0]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	b911      	cbnz	r1, 8008b22 <sbrk_aligned+0x12>
 8008b1c:	f000 f8ae 	bl	8008c7c <_sbrk_r>
 8008b20:	6030      	str	r0, [r6, #0]
 8008b22:	4621      	mov	r1, r4
 8008b24:	4628      	mov	r0, r5
 8008b26:	f000 f8a9 	bl	8008c7c <_sbrk_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d103      	bne.n	8008b36 <sbrk_aligned+0x26>
 8008b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b32:	4620      	mov	r0, r4
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	1cc4      	adds	r4, r0, #3
 8008b38:	f024 0403 	bic.w	r4, r4, #3
 8008b3c:	42a0      	cmp	r0, r4
 8008b3e:	d0f8      	beq.n	8008b32 <sbrk_aligned+0x22>
 8008b40:	1a21      	subs	r1, r4, r0
 8008b42:	4628      	mov	r0, r5
 8008b44:	f000 f89a 	bl	8008c7c <_sbrk_r>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d1f2      	bne.n	8008b32 <sbrk_aligned+0x22>
 8008b4c:	e7ef      	b.n	8008b2e <sbrk_aligned+0x1e>
 8008b4e:	bf00      	nop
 8008b50:	20000a20 	.word	0x20000a20

08008b54 <_malloc_r>:
 8008b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b58:	1ccd      	adds	r5, r1, #3
 8008b5a:	f025 0503 	bic.w	r5, r5, #3
 8008b5e:	3508      	adds	r5, #8
 8008b60:	2d0c      	cmp	r5, #12
 8008b62:	bf38      	it	cc
 8008b64:	250c      	movcc	r5, #12
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	4606      	mov	r6, r0
 8008b6a:	db01      	blt.n	8008b70 <_malloc_r+0x1c>
 8008b6c:	42a9      	cmp	r1, r5
 8008b6e:	d904      	bls.n	8008b7a <_malloc_r+0x26>
 8008b70:	230c      	movs	r3, #12
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	2000      	movs	r0, #0
 8008b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c50 <_malloc_r+0xfc>
 8008b7e:	f000 f869 	bl	8008c54 <__malloc_lock>
 8008b82:	f8d8 3000 	ldr.w	r3, [r8]
 8008b86:	461c      	mov	r4, r3
 8008b88:	bb44      	cbnz	r4, 8008bdc <_malloc_r+0x88>
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7ff ffbf 	bl	8008b10 <sbrk_aligned>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	4604      	mov	r4, r0
 8008b96:	d158      	bne.n	8008c4a <_malloc_r+0xf6>
 8008b98:	f8d8 4000 	ldr.w	r4, [r8]
 8008b9c:	4627      	mov	r7, r4
 8008b9e:	2f00      	cmp	r7, #0
 8008ba0:	d143      	bne.n	8008c2a <_malloc_r+0xd6>
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d04b      	beq.n	8008c3e <_malloc_r+0xea>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	eb04 0903 	add.w	r9, r4, r3
 8008bb0:	f000 f864 	bl	8008c7c <_sbrk_r>
 8008bb4:	4581      	cmp	r9, r0
 8008bb6:	d142      	bne.n	8008c3e <_malloc_r+0xea>
 8008bb8:	6821      	ldr	r1, [r4, #0]
 8008bba:	1a6d      	subs	r5, r5, r1
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f7ff ffa6 	bl	8008b10 <sbrk_aligned>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d03a      	beq.n	8008c3e <_malloc_r+0xea>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	442b      	add	r3, r5
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	bb62      	cbnz	r2, 8008c30 <_malloc_r+0xdc>
 8008bd6:	f8c8 7000 	str.w	r7, [r8]
 8008bda:	e00f      	b.n	8008bfc <_malloc_r+0xa8>
 8008bdc:	6822      	ldr	r2, [r4, #0]
 8008bde:	1b52      	subs	r2, r2, r5
 8008be0:	d420      	bmi.n	8008c24 <_malloc_r+0xd0>
 8008be2:	2a0b      	cmp	r2, #11
 8008be4:	d917      	bls.n	8008c16 <_malloc_r+0xc2>
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	6025      	str	r5, [r4, #0]
 8008bec:	bf18      	it	ne
 8008bee:	6059      	strne	r1, [r3, #4]
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	bf08      	it	eq
 8008bf4:	f8c8 1000 	streq.w	r1, [r8]
 8008bf8:	5162      	str	r2, [r4, r5]
 8008bfa:	604b      	str	r3, [r1, #4]
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f000 f82f 	bl	8008c60 <__malloc_unlock>
 8008c02:	f104 000b 	add.w	r0, r4, #11
 8008c06:	1d23      	adds	r3, r4, #4
 8008c08:	f020 0007 	bic.w	r0, r0, #7
 8008c0c:	1ac2      	subs	r2, r0, r3
 8008c0e:	bf1c      	itt	ne
 8008c10:	1a1b      	subne	r3, r3, r0
 8008c12:	50a3      	strne	r3, [r4, r2]
 8008c14:	e7af      	b.n	8008b76 <_malloc_r+0x22>
 8008c16:	6862      	ldr	r2, [r4, #4]
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	bf0c      	ite	eq
 8008c1c:	f8c8 2000 	streq.w	r2, [r8]
 8008c20:	605a      	strne	r2, [r3, #4]
 8008c22:	e7eb      	b.n	8008bfc <_malloc_r+0xa8>
 8008c24:	4623      	mov	r3, r4
 8008c26:	6864      	ldr	r4, [r4, #4]
 8008c28:	e7ae      	b.n	8008b88 <_malloc_r+0x34>
 8008c2a:	463c      	mov	r4, r7
 8008c2c:	687f      	ldr	r7, [r7, #4]
 8008c2e:	e7b6      	b.n	8008b9e <_malloc_r+0x4a>
 8008c30:	461a      	mov	r2, r3
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d1fb      	bne.n	8008c30 <_malloc_r+0xdc>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6053      	str	r3, [r2, #4]
 8008c3c:	e7de      	b.n	8008bfc <_malloc_r+0xa8>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	6033      	str	r3, [r6, #0]
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f80c 	bl	8008c60 <__malloc_unlock>
 8008c48:	e794      	b.n	8008b74 <_malloc_r+0x20>
 8008c4a:	6005      	str	r5, [r0, #0]
 8008c4c:	e7d6      	b.n	8008bfc <_malloc_r+0xa8>
 8008c4e:	bf00      	nop
 8008c50:	20000a24 	.word	0x20000a24

08008c54 <__malloc_lock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	@ (8008c5c <__malloc_lock+0x8>)
 8008c56:	f000 b845 	b.w	8008ce4 <__retarget_lock_acquire_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	20000b64 	.word	0x20000b64

08008c60 <__malloc_unlock>:
 8008c60:	4801      	ldr	r0, [pc, #4]	@ (8008c68 <__malloc_unlock+0x8>)
 8008c62:	f000 b840 	b.w	8008ce6 <__retarget_lock_release_recursive>
 8008c66:	bf00      	nop
 8008c68:	20000b64 	.word	0x20000b64

08008c6c <memset>:
 8008c6c:	4402      	add	r2, r0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d100      	bne.n	8008c76 <memset+0xa>
 8008c74:	4770      	bx	lr
 8008c76:	f803 1b01 	strb.w	r1, [r3], #1
 8008c7a:	e7f9      	b.n	8008c70 <memset+0x4>

08008c7c <_sbrk_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4d06      	ldr	r5, [pc, #24]	@ (8008c98 <_sbrk_r+0x1c>)
 8008c80:	2300      	movs	r3, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	f000 f878 	bl	8008d7c <_sbrk>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_sbrk_r+0x1a>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_sbrk_r+0x1a>
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20000b60 	.word	0x20000b60

08008c9c <__libc_init_array>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8008cd4 <__libc_init_array+0x38>)
 8008ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8008cd8 <__libc_init_array+0x3c>)
 8008ca2:	1b64      	subs	r4, r4, r5
 8008ca4:	10a4      	asrs	r4, r4, #2
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	42a6      	cmp	r6, r4
 8008caa:	d109      	bne.n	8008cc0 <__libc_init_array+0x24>
 8008cac:	4d0b      	ldr	r5, [pc, #44]	@ (8008cdc <__libc_init_array+0x40>)
 8008cae:	4c0c      	ldr	r4, [pc, #48]	@ (8008ce0 <__libc_init_array+0x44>)
 8008cb0:	f000 f872 	bl	8008d98 <_init>
 8008cb4:	1b64      	subs	r4, r4, r5
 8008cb6:	10a4      	asrs	r4, r4, #2
 8008cb8:	2600      	movs	r6, #0
 8008cba:	42a6      	cmp	r6, r4
 8008cbc:	d105      	bne.n	8008cca <__libc_init_array+0x2e>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc4:	4798      	blx	r3
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7ee      	b.n	8008ca8 <__libc_init_array+0xc>
 8008cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cce:	4798      	blx	r3
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	e7f2      	b.n	8008cba <__libc_init_array+0x1e>
 8008cd4:	08008dd4 	.word	0x08008dd4
 8008cd8:	08008dd4 	.word	0x08008dd4
 8008cdc:	08008dd4 	.word	0x08008dd4
 8008ce0:	08008dd8 	.word	0x08008dd8

08008ce4 <__retarget_lock_acquire_recursive>:
 8008ce4:	4770      	bx	lr

08008ce6 <__retarget_lock_release_recursive>:
 8008ce6:	4770      	bx	lr

08008ce8 <_free_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4605      	mov	r5, r0
 8008cec:	2900      	cmp	r1, #0
 8008cee:	d041      	beq.n	8008d74 <_free_r+0x8c>
 8008cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf4:	1f0c      	subs	r4, r1, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfb8      	it	lt
 8008cfa:	18e4      	addlt	r4, r4, r3
 8008cfc:	f7ff ffaa 	bl	8008c54 <__malloc_lock>
 8008d00:	4a1d      	ldr	r2, [pc, #116]	@ (8008d78 <_free_r+0x90>)
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	b933      	cbnz	r3, 8008d14 <_free_r+0x2c>
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	6014      	str	r4, [r2, #0]
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d10:	f7ff bfa6 	b.w	8008c60 <__malloc_unlock>
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d908      	bls.n	8008d2a <_free_r+0x42>
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	1821      	adds	r1, r4, r0
 8008d1c:	428b      	cmp	r3, r1
 8008d1e:	bf01      	itttt	eq
 8008d20:	6819      	ldreq	r1, [r3, #0]
 8008d22:	685b      	ldreq	r3, [r3, #4]
 8008d24:	1809      	addeq	r1, r1, r0
 8008d26:	6021      	streq	r1, [r4, #0]
 8008d28:	e7ed      	b.n	8008d06 <_free_r+0x1e>
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	b10b      	cbz	r3, 8008d34 <_free_r+0x4c>
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d9fa      	bls.n	8008d2a <_free_r+0x42>
 8008d34:	6811      	ldr	r1, [r2, #0]
 8008d36:	1850      	adds	r0, r2, r1
 8008d38:	42a0      	cmp	r0, r4
 8008d3a:	d10b      	bne.n	8008d54 <_free_r+0x6c>
 8008d3c:	6820      	ldr	r0, [r4, #0]
 8008d3e:	4401      	add	r1, r0
 8008d40:	1850      	adds	r0, r2, r1
 8008d42:	4283      	cmp	r3, r0
 8008d44:	6011      	str	r1, [r2, #0]
 8008d46:	d1e0      	bne.n	8008d0a <_free_r+0x22>
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	6053      	str	r3, [r2, #4]
 8008d4e:	4408      	add	r0, r1
 8008d50:	6010      	str	r0, [r2, #0]
 8008d52:	e7da      	b.n	8008d0a <_free_r+0x22>
 8008d54:	d902      	bls.n	8008d5c <_free_r+0x74>
 8008d56:	230c      	movs	r3, #12
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	e7d6      	b.n	8008d0a <_free_r+0x22>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	1821      	adds	r1, r4, r0
 8008d60:	428b      	cmp	r3, r1
 8008d62:	bf04      	itt	eq
 8008d64:	6819      	ldreq	r1, [r3, #0]
 8008d66:	685b      	ldreq	r3, [r3, #4]
 8008d68:	6063      	str	r3, [r4, #4]
 8008d6a:	bf04      	itt	eq
 8008d6c:	1809      	addeq	r1, r1, r0
 8008d6e:	6021      	streq	r1, [r4, #0]
 8008d70:	6054      	str	r4, [r2, #4]
 8008d72:	e7ca      	b.n	8008d0a <_free_r+0x22>
 8008d74:	bd38      	pop	{r3, r4, r5, pc}
 8008d76:	bf00      	nop
 8008d78:	20000a24 	.word	0x20000a24

08008d7c <_sbrk>:
 8008d7c:	4a04      	ldr	r2, [pc, #16]	@ (8008d90 <_sbrk+0x14>)
 8008d7e:	6811      	ldr	r1, [r2, #0]
 8008d80:	4603      	mov	r3, r0
 8008d82:	b909      	cbnz	r1, 8008d88 <_sbrk+0xc>
 8008d84:	4903      	ldr	r1, [pc, #12]	@ (8008d94 <_sbrk+0x18>)
 8008d86:	6011      	str	r1, [r2, #0]
 8008d88:	6810      	ldr	r0, [r2, #0]
 8008d8a:	4403      	add	r3, r0
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	4770      	bx	lr
 8008d90:	20000b68 	.word	0x20000b68
 8008d94:	20000b70 	.word	0x20000b70

08008d98 <_init>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr

08008da4 <_fini>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr
