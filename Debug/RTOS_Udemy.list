
RTOS_Udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080093b0  080093b0  0000a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093cc  080093cc  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080093cc  080093cc  0000a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d4  080093d4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d4  080093d4  0000a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093d8  080093d8  0000a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080093dc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  2000007c  08009458  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  08009458  0000bbb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4f8  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000456f  00000000  00000000  000275a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135e  00000000  00000000  0002d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bd0  00000000  00000000  0002e776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002031b  00000000  00000000  00048346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e222  00000000  00000000  00068661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d44  00000000  00000000  001068c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0010d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009398 	.word	0x08009398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009398 	.word	0x08009398

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcb4 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f812 	bl	8000500 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004dc:	f000 f878 	bl	80005d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f958 	bl	8000794 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f894 	bl	8000610 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004e8:	f000 f8c0 	bl	800066c <MX_I2S2_Init>
  MX_I2S3_Init();
 80004ec:	f000 f8ec 	bl	80006c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f0:	f000 f91a 	bl	8000728 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f4:	f008 faf2 	bl	8008adc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f008 fb16 	bl	8008b28 <MX_USB_HOST_Process>
 80004fc:	e7fc      	b.n	80004f8 <main+0x28>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	@ 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	@ 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 feac 	bl	800926c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <SystemClock_Config+0xc8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	4a26      	ldr	r2, [pc, #152]	@ (80005c8 <SystemClock_Config+0xc8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	@ 0x40
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b21      	ldr	r3, [pc, #132]	@ (80005cc <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a20      	ldr	r2, [pc, #128]	@ (80005cc <SystemClock_Config+0xcc>)
 800054a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000560:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000570:	2304      	movs	r3, #4
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000574:	23c0      	movs	r3, #192	@ 0xc0
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000578:	2304      	movs	r3, #4
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f003 fe3f 	bl	8004208 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000590:	f000 f9ec 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2103      	movs	r1, #3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 f8a1 	bl	80046f8 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005bc:	f000 f9d6 	bl	800096c <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	@ 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005e6:	2301      	movs	r3, #1
 80005e8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80005ea:	23c8      	movs	r3, #200	@ 0xc8
 80005ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80005ee:	2305      	movs	r3, #5
 80005f0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 facf 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000604:	f000 f9b2 	bl	800096c <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f002 fff7 	bl	8003640 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f988 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000098 	.word	0x20000098
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_I2S2_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_I2S2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <MX_I2S2_Init+0x58>)
 8000694:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_I2S2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_I2S2_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_I2S2_Init+0x50>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_I2S2_Init+0x50>)
 80006aa:	f003 f90d 	bl	80038c8 <HAL_I2S_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f95a 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000ec 	.word	0x200000ec
 80006c0:	40003800 	.word	0x40003800
 80006c4:	00017700 	.word	0x00017700

080006c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_I2S3_Init+0x54>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <MX_I2S3_Init+0x58>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2S3_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_I2S3_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_I2S3_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_I2S3_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_I2S3_Init+0x54>)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <MX_I2S3_Init+0x5c>)
 80006f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_I2S3_Init+0x54>)
 8000708:	f003 f8de 	bl	80038c8 <HAL_I2S_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000712:	f000 f92b 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000134 	.word	0x20000134
 8000720:	40003c00 	.word	0x40003c00
 8000724:	00017700 	.word	0x00017700

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_SPI1_Init+0x64>)
 800077a:	f004 fb61 	bl	8004e40 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f8f2 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000017c 	.word	0x2000017c
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b61      	ldr	r3, [pc, #388]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a60      	ldr	r2, [pc, #384]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a59      	ldr	r2, [pc, #356]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b57      	ldr	r3, [pc, #348]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b53      	ldr	r3, [pc, #332]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a52      	ldr	r2, [pc, #328]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b50      	ldr	r3, [pc, #320]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b4c      	ldr	r3, [pc, #304]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a4b      	ldr	r2, [pc, #300]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b49      	ldr	r3, [pc, #292]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b45      	ldr	r3, [pc, #276]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a44      	ldr	r2, [pc, #272]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b42      	ldr	r3, [pc, #264]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b3e      	ldr	r3, [pc, #248]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a3d      	ldr	r2, [pc, #244]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b3b      	ldr	r3, [pc, #236]	@ (8000934 <MX_GPIO_Init+0x1a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4838      	ldr	r0, [pc, #224]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 8000858:	f000 fdbe 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4836      	ldr	r0, [pc, #216]	@ (800093c <MX_GPIO_Init+0x1a8>)
 8000862:	f000 fdb9 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800086c:	4834      	ldr	r0, [pc, #208]	@ (8000940 <MX_GPIO_Init+0x1ac>)
 800086e:	f000 fdb3 	bl	80013d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000872:	2304      	movs	r3, #4
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	482c      	ldr	r0, [pc, #176]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 8000886:	f000 fc23 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 80008a2:	f000 fc15 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008a6:	2332      	movs	r3, #50	@ 0x32
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481f      	ldr	r0, [pc, #124]	@ (8000938 <MX_GPIO_Init+0x1a4>)
 80008bc:	f000 fc08 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4819      	ldr	r0, [pc, #100]	@ (800093c <MX_GPIO_Init+0x1a8>)
 80008d8:	f000 fbfa 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4814      	ldr	r0, [pc, #80]	@ (8000944 <MX_GPIO_Init+0x1b0>)
 80008f2:	f000 fbed 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <MX_GPIO_Init+0x1ac>)
 8000910:	f000 fbde 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000914:	2320      	movs	r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_GPIO_Init+0x1ac>)
 8000928:	f000 fbd2 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	@ 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40021000 	.word	0x40021000
 800093c:	40020800 	.word	0x40020800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 fa93 	bl	8000e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40014000 	.word	0x40014000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <HAL_I2C_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12c      	bne.n	8000a44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0c:	2312      	movs	r3, #18
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <HAL_I2C_MspInit+0x8c>)
 8000a24:	f000 fb54 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	@ 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a59      	ldr	r2, [pc, #356]	@ (8000bdc <HAL_I2S_MspInit+0x184>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d15b      	bne.n	8000b32 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
 8000a7e:	4b58      	ldr	r3, [pc, #352]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a57      	ldr	r2, [pc, #348]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b55      	ldr	r3, [pc, #340]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a92:	623b      	str	r3, [r7, #32]
 8000a94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	4b51      	ldr	r3, [pc, #324]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a50      	ldr	r2, [pc, #320]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a49      	ldr	r2, [pc, #292]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b47      	ldr	r3, [pc, #284]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	483e      	ldr	r0, [pc, #248]	@ (8000be4 <HAL_I2S_MspInit+0x18c>)
 8000aea:	f000 faf1 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aee:	2308      	movs	r3, #8
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afe:	2305      	movs	r3, #5
 8000b00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4836      	ldr	r0, [pc, #216]	@ (8000be4 <HAL_I2S_MspInit+0x18c>)
 8000b0a:	f000 fae1 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b20:	2305      	movs	r3, #5
 8000b22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482f      	ldr	r0, [pc, #188]	@ (8000be8 <HAL_I2S_MspInit+0x190>)
 8000b2c:	f000 fad0 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b30:	e04f      	b.n	8000bd2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a2d      	ldr	r2, [pc, #180]	@ (8000bec <HAL_I2S_MspInit+0x194>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d14a      	bne.n	8000bd2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	4b27      	ldr	r3, [pc, #156]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a26      	ldr	r2, [pc, #152]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4c:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a1f      	ldr	r2, [pc, #124]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <HAL_I2S_MspInit+0x188>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b90:	2310      	movs	r3, #16
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <HAL_I2S_MspInit+0x198>)
 8000bac:	f000 fa90 	bl	80010d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <HAL_I2S_MspInit+0x18c>)
 8000bce:	f000 fa7f 	bl	80010d0 <HAL_GPIO_Init>
}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	@ 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40003800 	.word	0x40003800
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40003c00 	.word	0x40003c00
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_SPI_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4e:	23e0      	movs	r3, #224	@ 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <HAL_SPI_MspInit+0x8c>)
 8000c6a:	f000 fa31 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b2e      	ldr	r3, [pc, #184]	@ (8000d54 <HAL_InitTick+0xd0>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d54 <HAL_InitTick+0xd0>)
 8000c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ca2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <HAL_InitTick+0xd0>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb0:	f107 020c 	add.w	r2, r7, #12
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 ff3c 	bl	8004b38 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cc0:	f003 ff26 	bl	8004b10 <HAL_RCC_GetPCLK2Freq>
 8000cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc8:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9b      	lsrs	r3, r3, #18
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cd6:	4a22      	ldr	r2, [pc, #136]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000cd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cdc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce0:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce6:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000cfa:	4818      	ldr	r0, [pc, #96]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cfc:	f004 f929 	bl	8004f52 <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d11b      	bne.n	8000d46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000d0e:	4813      	ldr	r0, [pc, #76]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000d10:	f004 f978 	bl	8005004 <HAL_TIM_Base_Start_IT>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d111      	bne.n	8000d46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000d22:	2018      	movs	r0, #24
 8000d24:	f000 f9c6 	bl	80010b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b0f      	cmp	r3, #15
 8000d2c:	d808      	bhi.n	8000d40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	2018      	movs	r0, #24
 8000d34:	f000 f9a2 	bl	800107c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_InitTick+0xe0>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e002      	b.n	8000d46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3730      	adds	r7, #48	@ 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	200001d4 	.word	0x200001d4
 8000d60:	40014000 	.word	0x40014000
 8000d64:	20000004 	.word	0x20000004

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000da6:	f004 f98f 	bl	80050c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001d4 	.word	0x200001d4

08000db4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <OTG_FS_IRQHandler+0x10>)
 8000dba:	f000 fe07 	bl	80019cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000688 	.word	0x20000688

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f008 fa3f 	bl	800929c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fb57 	bl	80004d0 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e30:	080093dc 	.word	0x080093dc
  ldr r2, =_sbss
 8000e34:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e38:	20000bb4 	.word	0x20000bb4

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f8fc 	bl	8001066 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff ff08 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fd80 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	2000021c 	.word	0x2000021c

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000021c 	.word	0x2000021c

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	@ (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	@ (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	@ 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff4c 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108e:	f7ff ff61 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 8001092:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	6978      	ldr	r0, [r7, #20]
 800109a:	f7ff ffb1 	bl	8001000 <NVIC_EncodePriority>
 800109e:	4602      	mov	r2, r0
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff80 	bl	8000fac <__NVIC_SetPriority>
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff54 	bl	8000f70 <__NVIC_EnableIRQ>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e159      	b.n	80013a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8148 	bne.w	800139a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80a2 	beq.w	800139a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b57      	ldr	r3, [pc, #348]	@ (80013b8 <HAL_GPIO_Init+0x2e8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a56      	ldr	r2, [pc, #344]	@ (80013b8 <HAL_GPIO_Init+0x2e8>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b54      	ldr	r3, [pc, #336]	@ (80013b8 <HAL_GPIO_Init+0x2e8>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a52      	ldr	r2, [pc, #328]	@ (80013bc <HAL_GPIO_Init+0x2ec>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a49      	ldr	r2, [pc, #292]	@ (80013c0 <HAL_GPIO_Init+0x2f0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x202>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a48      	ldr	r2, [pc, #288]	@ (80013c4 <HAL_GPIO_Init+0x2f4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x1fe>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a47      	ldr	r2, [pc, #284]	@ (80013c8 <HAL_GPIO_Init+0x2f8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a46      	ldr	r2, [pc, #280]	@ (80013cc <HAL_GPIO_Init+0x2fc>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x1f6>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a45      	ldr	r2, [pc, #276]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x1f2>
 80012be:	2304      	movs	r3, #4
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	@ (80013bc <HAL_GPIO_Init+0x2ec>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a2f      	ldr	r2, [pc, #188]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a24      	ldr	r2, [pc, #144]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1a      	ldr	r2, [pc, #104]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f aea2 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af02      	add	r7, sp, #8
 8001410:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e059      	b.n	80014d0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f007 fbae 	bl	8008b98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800144a:	d102      	bne.n	8001452 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f004 f863 	bl	8005522 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7c1a      	ldrb	r2, [r3, #16]
 8001464:	f88d 2000 	strb.w	r2, [sp]
 8001468:	3304      	adds	r3, #4
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	f003 ffe4 	bl	8005438 <USB_CoreInit>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e026      	b.n	80014d0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f004 f85b 	bl	8005544 <USB_SetCurrentMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e017      	b.n	80014d0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7c1a      	ldrb	r2, [r3, #16]
 80014a8:	f88d 2000 	strb.w	r2, [sp]
 80014ac:	3304      	adds	r3, #4
 80014ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b0:	f004 f9fe 	bl	80058b0 <USB_HostInit>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2202      	movs	r2, #2
 80014be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e004      	b.n	80014d0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08b      	sub	sp, #44	@ 0x2c
 80014dc:	af04      	add	r7, sp, #16
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	460b      	mov	r3, r1
 80014ec:	70bb      	strb	r3, [r7, #2]
 80014ee:	4613      	mov	r3, r2
 80014f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80014f2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80014f4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_HCD_HC_Init+0x2c>
 8001500:	2302      	movs	r3, #2
 8001502:	e09d      	b.n	8001640 <HAL_HCD_HC_Init+0x168>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3319      	adds	r3, #25
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	3314      	adds	r3, #20
 8001530:	787a      	ldrb	r2, [r7, #1]
 8001532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001534:	78fa      	ldrb	r2, [r7, #3]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3315      	adds	r3, #21
 8001544:	78fa      	ldrb	r2, [r7, #3]
 8001546:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	1a9b      	subs	r3, r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3326      	adds	r3, #38	@ 0x26
 8001558:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800155c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	78bb      	ldrb	r3, [r7, #2]
 8001562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001566:	b2d8      	uxtb	r0, r3
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3316      	adds	r3, #22
 8001576:	4602      	mov	r2, r0
 8001578:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fbc8 	bl	8001d14 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001584:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001588:	2b00      	cmp	r3, #0
 800158a:	da0a      	bge.n	80015a2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3317      	adds	r3, #23
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e009      	b.n	80015b6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3317      	adds	r3, #23
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fac6 	bl	8005b4c <USB_GetHostSpeed>
 80015c0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80015c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10b      	bne.n	80015e2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80015ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_HCD_HC_Init+0x10a>
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d104      	bne.n	80015e2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2bbc      	cmp	r3, #188	@ 0xbc
 80015dc:	d901      	bls.n	80015e2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80015de:	23bc      	movs	r3, #188	@ 0xbc
 80015e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3318      	adds	r3, #24
 80015f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	b298      	uxth	r0, r3
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3328      	adds	r3, #40	@ 0x28
 800160c:	4602      	mov	r2, r0
 800160e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	b29b      	uxth	r3, r3
 8001618:	787c      	ldrb	r4, [r7, #1]
 800161a:	78ba      	ldrb	r2, [r7, #2]
 800161c:	78f9      	ldrb	r1, [r7, #3]
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4623      	mov	r3, r4
 800162e:	f004 fab5 	bl	8005b9c <USB_HC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}

08001648 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_HCD_HC_Halt+0x1e>
 8001662:	2302      	movs	r3, #2
 8001664:	e00f      	b.n	8001686 <HAL_HCD_HC_Halt+0x3e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	78fa      	ldrb	r2, [r7, #3]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fdfb 	bl	8006272 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	70fb      	strb	r3, [r7, #3]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70bb      	strb	r3, [r7, #2]
 80016a6:	4613      	mov	r3, r2
 80016a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3317      	adds	r3, #23
 80016ba:	78ba      	ldrb	r2, [r7, #2]
 80016bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3326      	adds	r3, #38	@ 0x26
 80016ce:	787a      	ldrb	r2, [r7, #1]
 80016d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016d2:	7c3b      	ldrb	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d114      	bne.n	8001702 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	332a      	adds	r3, #42	@ 0x2a
 80016e8:	2203      	movs	r2, #3
 80016ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3319      	adds	r3, #25
 80016fc:	7f3a      	ldrb	r2, [r7, #28]
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e009      	b.n	8001716 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	1a9b      	subs	r3, r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	332a      	adds	r3, #42	@ 0x2a
 8001712:	2202      	movs	r2, #2
 8001714:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001716:	787b      	ldrb	r3, [r7, #1]
 8001718:	2b03      	cmp	r3, #3
 800171a:	f200 8102 	bhi.w	8001922 <HAL_HCD_HC_SubmitRequest+0x292>
 800171e:	a201      	add	r2, pc, #4	@ (adr r2, 8001724 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	0800190d 	.word	0x0800190d
 800172c:	080017f9 	.word	0x080017f9
 8001730:	08001883 	.word	0x08001883
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001734:	7c3b      	ldrb	r3, [r7, #16]
 8001736:	2b01      	cmp	r3, #1
 8001738:	f040 80f5 	bne.w	8001926 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d12d      	bne.n	800179e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001742:	8b3b      	ldrh	r3, [r7, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	333d      	adds	r3, #61	@ 0x3d
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	333d      	adds	r3, #61	@ 0x3d
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10a      	bne.n	8001788 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	332a      	adds	r3, #42	@ 0x2a
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001786:	e0ce      	b.n	8001926 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	332a      	adds	r3, #42	@ 0x2a
 8001798:	2202      	movs	r2, #2
 800179a:	701a      	strb	r2, [r3, #0]
      break;
 800179c:	e0c3      	b.n	8001926 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	331a      	adds	r3, #26
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 80b8 	bne.w	8001926 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	333c      	adds	r3, #60	@ 0x3c
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10a      	bne.n	80017e2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	332a      	adds	r3, #42	@ 0x2a
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
      break;
 80017e0:	e0a1      	b.n	8001926 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	332a      	adds	r3, #42	@ 0x2a
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]
      break;
 80017f6:	e096      	b.n	8001926 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d120      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	333d      	adds	r3, #61	@ 0x3d
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10a      	bne.n	800182a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	332a      	adds	r3, #42	@ 0x2a
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001828:	e07e      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	332a      	adds	r3, #42	@ 0x2a
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
      break;
 800183e:	e073      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	333c      	adds	r3, #60	@ 0x3c
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	332a      	adds	r3, #42	@ 0x2a
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
      break;
 800186a:	e05d      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	332a      	adds	r3, #42	@ 0x2a
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e052      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001882:	78bb      	ldrb	r3, [r7, #2]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d120      	bne.n	80018ca <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	333d      	adds	r3, #61	@ 0x3d
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10a      	bne.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	332a      	adds	r3, #42	@ 0x2a
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018b2:	e039      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	332a      	adds	r3, #42	@ 0x2a
 80018c4:	2202      	movs	r2, #2
 80018c6:	701a      	strb	r2, [r3, #0]
      break;
 80018c8:	e02e      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	333c      	adds	r3, #60	@ 0x3c
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	332a      	adds	r3, #42	@ 0x2a
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
      break;
 80018f4:	e018      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	332a      	adds	r3, #42	@ 0x2a
 8001906:	2202      	movs	r2, #2
 8001908:	701a      	strb	r2, [r3, #0]
      break;
 800190a:	e00d      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	332a      	adds	r3, #42	@ 0x2a
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
      break;
 8001920:	e002      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001922:	bf00      	nop
 8001924:	e000      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001926:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	332c      	adds	r3, #44	@ 0x2c
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	8b39      	ldrh	r1, [r7, #24]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4403      	add	r3, r0
 800194c:	3334      	adds	r3, #52	@ 0x34
 800194e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	334c      	adds	r3, #76	@ 0x4c
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	3338      	adds	r3, #56	@ 0x38
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	3315      	adds	r3, #21
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	334d      	adds	r3, #77	@ 0x4d
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	3310      	adds	r3, #16
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	1d19      	adds	r1, r3, #4
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	799b      	ldrb	r3, [r3, #6]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f004 fa04 	bl	8005dc8 <USB_HC_StartXfer>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop

080019cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 ff24 	bl	8005830 <USB_GetMode>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	f040 80fb 	bne.w	8001be6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fee7 	bl	80057c8 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80f1 	beq.w	8001be4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fede 	bl	80057c8 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a16:	d104      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fece 	bl	80057c8 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a36:	d104      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 febe 	bl	80057c8 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a56:	d104      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 feae 	bl	80057c8 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d103      	bne.n	8001a7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fea0 	bl	80057c8 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a92:	d120      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d113      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001aae:	2110      	movs	r1, #16
 8001ab0:	6938      	ldr	r0, [r7, #16]
 8001ab2:	f003 fd93 	bl	80055dc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ab6:	6938      	ldr	r0, [r7, #16]
 8001ab8:	f003 fdc2 	bl	8005640 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7a5b      	ldrb	r3, [r3, #9]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d105      	bne.n	8001ad0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 ff9e 	bl	8005a0c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f007 f8df 	bl	8008c94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fe74 	bl	80057c8 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aea:	d102      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f001 fd33 	bl	8003558 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fe66 	bl	80057c8 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d106      	bne.n	8001b14 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f007 f8a8 	bl	8008c5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fe55 	bl	80057c8 <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b28:	d139      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f004 fb8e 	bl	8006250 <USB_HC_ReadInterrupt>
 8001b34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e025      	b.n	8001b88 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d018      	beq.n	8001b82 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b66:	d106      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f905 	bl	8001d7e <HCD_HC_IN_IRQHandler>
 8001b74:	e005      	b.n	8001b82 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 ff67 	bl	8002a50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	795b      	ldrb	r3, [r3, #5]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d3d3      	bcc.n	8001b3c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fe10 	bl	80057c8 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d101      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x1ea>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_HCD_IRQHandler+0x1ec>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d014      	beq.n	8001be6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0210 	bic.w	r2, r2, #16
 8001bca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f001 fbe4 	bl	800339a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0210 	orr.w	r2, r2, #16
 8001be0:	619a      	str	r2, [r3, #24]
 8001be2:	e000      	b.n	8001be6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001be4:	bf00      	nop
    }
  }
}
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_HCD_Start+0x16>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e013      	b.n	8001c2a <HAL_HCD_Start+0x3e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 ff62 	bl	8005ada <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fc70 	bl	8005500 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_HCD_Stop+0x16>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e00d      	b.n	8001c64 <HAL_HCD_Stop+0x32>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fc2c 	bl	80064b2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 ff04 	bl	8005a86 <USB_ResetPort>
 8001c7e:	4603      	mov	r3, r0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	334c      	adds	r3, #76	@ 0x4c
 8001ca4:	781b      	ldrb	r3, [r3, #0]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3338      	adds	r3, #56	@ 0x38
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 ff46 	bl	8005b7a <USB_GetCurrentFrame>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 ff21 	bl	8005b4c <USB_GetHostSpeed>
 8001d0a:	4603      	mov	r3, r0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	331a      	adds	r3, #26
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	331b      	adds	r3, #27
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3325      	adds	r3, #37	@ 0x25
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3324      	adds	r3, #36	@ 0x24
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fd26 	bl	80057ee <USB_ReadChInterrupts>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d11a      	bne.n	8001de2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001db8:	461a      	mov	r2, r3
 8001dba:	2304      	movs	r3, #4
 8001dbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	334d      	adds	r3, #77	@ 0x4d
 8001dce:	2207      	movs	r2, #7
 8001dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fa49 	bl	8006272 <USB_HC_Halt>
 8001de0:	e09e      	b.n	8001f20 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 fcff 	bl	80057ee <USB_ReadChInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dfa:	d11b      	bne.n	8001e34 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	334d      	adds	r3, #77	@ 0x4d
 8001e20:	2208      	movs	r2, #8
 8001e22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 fa20 	bl	8006272 <USB_HC_Halt>
 8001e32:	e075      	b.n	8001f20 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fcd6 	bl	80057ee <USB_ReadChInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d11a      	bne.n	8001e82 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	334d      	adds	r3, #77	@ 0x4d
 8001e6e:	2206      	movs	r2, #6
 8001e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 f9f9 	bl	8006272 <USB_HC_Halt>
 8001e80:	e04e      	b.n	8001f20 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fcaf 	bl	80057ee <USB_ReadChInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9a:	d11b      	bne.n	8001ed4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	334d      	adds	r3, #77	@ 0x4d
 8001ec0:	2209      	movs	r2, #9
 8001ec2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 f9d0 	bl	8006272 <USB_HC_Halt>
 8001ed2:	e025      	b.n	8001f20 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fc86 	bl	80057ee <USB_ReadChInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee8:	2b80      	cmp	r3, #128	@ 0x80
 8001eea:	d119      	bne.n	8001f20 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	334d      	adds	r3, #77	@ 0x4d
 8001f0e:	2207      	movs	r2, #7
 8001f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f9a9 	bl	8006272 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fc60 	bl	80057ee <USB_ReadChInterrupts>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f38:	d112      	bne.n	8001f60 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 f995 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f5a:	6093      	str	r3, [r2, #8]
 8001f5c:	f000 bd75 	b.w	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fc40 	bl	80057ee <USB_ReadChInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	f040 8128 	bne.w	80021ca <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f86:	461a      	mov	r2, r3
 8001f88:	2320      	movs	r3, #32
 8001f8a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d119      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	331b      	adds	r3, #27
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	0151      	lsls	r1, r2, #5
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	440a      	add	r2, r1
 8001fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	799b      	ldrb	r3, [r3, #6]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01b      	beq.n	8002016 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3330      	adds	r3, #48	@ 0x30
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	1ac9      	subs	r1, r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4403      	add	r3, r0
 8002012:	3338      	adds	r3, #56	@ 0x38
 8002014:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	334d      	adds	r3, #77	@ 0x4d
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3344      	adds	r3, #68	@ 0x44
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800204a:	461a      	mov	r2, r3
 800204c:	2301      	movs	r3, #1
 800204e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3326      	adds	r3, #38	@ 0x26
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3326      	adds	r3, #38	@ 0x26
 8002076:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002078:	2b02      	cmp	r3, #2
 800207a:	d110      	bne.n	800209e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f004 f8f4 	bl	8006272 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002096:	461a      	mov	r2, r3
 8002098:	2310      	movs	r3, #16
 800209a:	6093      	str	r3, [r2, #8]
 800209c:	e03d      	b.n	800211a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3326      	adds	r3, #38	@ 0x26
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d00a      	beq.n	80020ca <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	3326      	adds	r3, #38	@ 0x26
 80020c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d127      	bne.n	800211a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	0151      	lsls	r1, r2, #5
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	440a      	add	r2, r1
 80020e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020e8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	334c      	adds	r3, #76	@ 0x4c
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	334c      	adds	r3, #76	@ 0x4c
 800210e:	781a      	ldrb	r2, [r3, #0]
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f006 fdcb 	bl	8008cb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	799b      	ldrb	r3, [r3, #6]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d13b      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3338      	adds	r3, #56	@ 0x38
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4403      	add	r3, r0
 8002142:	3328      	adds	r3, #40	@ 0x28
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	440b      	add	r3, r1
 8002148:	1e59      	subs	r1, r3, #1
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4403      	add	r3, r0
 8002158:	3328      	adds	r3, #40	@ 0x28
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8470 	beq.w	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	333c      	adds	r3, #60	@ 0x3c
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	f083 0301 	eor.w	r3, r3, #1
 8002182:	b2d8      	uxtb	r0, r3
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	333c      	adds	r3, #60	@ 0x3c
 8002192:	4602      	mov	r2, r0
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	f000 bc58 	b.w	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	333c      	adds	r3, #60	@ 0x3c
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	f083 0301 	eor.w	r3, r3, #1
 80021b2:	b2d8      	uxtb	r0, r3
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	333c      	adds	r3, #60	@ 0x3c
 80021c2:	4602      	mov	r2, r0
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	f000 bc40 	b.w	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 fb0b 	bl	80057ee <USB_ReadChInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d131      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ee:	461a      	mov	r2, r3
 80021f0:	2320      	movs	r3, #32
 80021f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	331a      	adds	r3, #26
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	f040 841f 	bne.w	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	331b      	adds	r3, #27
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	334d      	adds	r3, #77	@ 0x4d
 8002230:	2203      	movs	r2, #3
 8002232:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f004 f818 	bl	8006272 <USB_HC_Halt>
 8002242:	f000 bc02 	b.w	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f003 facd 	bl	80057ee <USB_ReadChInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	f040 8305 	bne.w	800286a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	2302      	movs	r3, #2
 8002270:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	334d      	adds	r3, #77	@ 0x4d
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d114      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	334d      	adds	r3, #77	@ 0x4d
 8002298:	2202      	movs	r2, #2
 800229a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	334c      	adds	r3, #76	@ 0x4c
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	e2cc      	b.n	800284c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	334d      	adds	r3, #77	@ 0x4d
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b06      	cmp	r3, #6
 80022c6:	d114      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	@ 0x4d
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334c      	adds	r3, #76	@ 0x4c
 80022ec:	2205      	movs	r2, #5
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e2ac      	b.n	800284c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	334d      	adds	r3, #77	@ 0x4d
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b07      	cmp	r3, #7
 8002306:	d00b      	beq.n	8002320 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334d      	adds	r3, #77	@ 0x4d
 8002318:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800231a:	2b09      	cmp	r3, #9
 800231c:	f040 80a6 	bne.w	800246c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334d      	adds	r3, #77	@ 0x4d
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3344      	adds	r3, #68	@ 0x44
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4403      	add	r3, r0
 8002354:	3344      	adds	r3, #68	@ 0x44
 8002356:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3344      	adds	r3, #68	@ 0x44
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d943      	bls.n	80023f6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3344      	adds	r3, #68	@ 0x44
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	331a      	adds	r3, #26
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d123      	bne.n	80023e0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	331b      	adds	r3, #27
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	331c      	adds	r3, #28
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	0151      	lsls	r1, r2, #5
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	440a      	add	r2, r1
 80023d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023de:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334c      	adds	r3, #76	@ 0x4c
 80023f0:	2204      	movs	r2, #4
 80023f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023f4:	e229      	b.n	800284a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	334c      	adds	r3, #76	@ 0x4c
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3326      	adds	r3, #38	@ 0x26
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3326      	adds	r3, #38	@ 0x26
 8002430:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002432:	2b02      	cmp	r3, #2
 8002434:	f040 8209 	bne.w	800284a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800244e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002456:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800246a:	e1ee      	b.n	800284a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	334d      	adds	r3, #77	@ 0x4d
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b05      	cmp	r3, #5
 8002480:	f040 80c8 	bne.w	8002614 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	334d      	adds	r3, #77	@ 0x4d
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	331b      	adds	r3, #27
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f040 81ce 	bne.w	800284c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	3326      	adds	r3, #38	@ 0x26
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d16b      	bne.n	800259e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	3348      	adds	r3, #72	@ 0x48
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	1c59      	adds	r1, r3, #1
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4403      	add	r3, r0
 80024e6:	3348      	adds	r3, #72	@ 0x48
 80024e8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3348      	adds	r3, #72	@ 0x48
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d943      	bls.n	8002588 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3348      	adds	r3, #72	@ 0x48
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	331b      	adds	r3, #27
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3344      	adds	r3, #68	@ 0x44
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d809      	bhi.n	8002552 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	331c      	adds	r3, #28
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	0151      	lsls	r1, r2, #5
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	440a      	add	r2, r1
 8002568:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800256c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002570:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	334c      	adds	r3, #76	@ 0x4c
 8002582:	2204      	movs	r2, #4
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e014      	b.n	80025b2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	334c      	adds	r3, #76	@ 0x4c
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e009      	b.n	80025b2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	334c      	adds	r3, #76	@ 0x4c
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3326      	adds	r3, #38	@ 0x26
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3326      	adds	r3, #38	@ 0x26
 80025d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f040 8136 	bne.w	800284c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e11b      	b.n	800284c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	334d      	adds	r3, #77	@ 0x4d
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b03      	cmp	r3, #3
 8002628:	f040 8081 	bne.w	800272e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	334d      	adds	r3, #77	@ 0x4d
 800263c:	2202      	movs	r2, #2
 800263e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	331b      	adds	r3, #27
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 80fa 	bne.w	800284c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	334c      	adds	r3, #76	@ 0x4c
 8002668:	2202      	movs	r2, #2
 800266a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	0151      	lsls	r1, r2, #5
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	440a      	add	r2, r1
 8002682:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026aa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	0151      	lsls	r1, r2, #5
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	440a      	add	r2, r1
 80026c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026c6:	f023 0320 	bic.w	r3, r3, #32
 80026ca:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3326      	adds	r3, #38	@ 0x26
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3326      	adds	r3, #38	@ 0x26
 80026f2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	f040 80a9 	bne.w	800284c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002710:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002718:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	e08e      	b.n	800284c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	334d      	adds	r3, #77	@ 0x4d
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d143      	bne.n	80027cc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334d      	adds	r3, #77	@ 0x4d
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	334c      	adds	r3, #76	@ 0x4c
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3326      	adds	r3, #38	@ 0x26
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	3326      	adds	r3, #38	@ 0x26
 8002792:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002794:	2b02      	cmp	r3, #2
 8002796:	d159      	bne.n	800284c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027ae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027b6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e03f      	b.n	800284c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	334d      	adds	r3, #77	@ 0x4d
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d126      	bne.n	8002830 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	334d      	adds	r3, #77	@ 0x4d
 80027f2:	2202      	movs	r2, #2
 80027f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3344      	adds	r3, #68	@ 0x44
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4403      	add	r3, r0
 8002816:	3344      	adds	r3, #68	@ 0x44
 8002818:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334c      	adds	r3, #76	@ 0x4c
 800282a:	2204      	movs	r2, #4
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e00d      	b.n	800284c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334d      	adds	r3, #77	@ 0x4d
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b02      	cmp	r3, #2
 8002844:	f000 8100 	beq.w	8002a48 <HCD_HC_IN_IRQHandler+0xcca>
 8002848:	e000      	b.n	800284c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800284a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334c      	adds	r3, #76	@ 0x4c
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f006 fa24 	bl	8008cb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002868:	e0ef      	b.n	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f002 ffbb 	bl	80057ee <USB_ReadChInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287e:	2b40      	cmp	r3, #64	@ 0x40
 8002880:	d12f      	bne.n	80028e2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800288e:	461a      	mov	r2, r3
 8002890:	2340      	movs	r3, #64	@ 0x40
 8002892:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	334d      	adds	r3, #77	@ 0x4d
 80028a4:	2205      	movs	r2, #5
 80028a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	331a      	adds	r3, #26
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3344      	adds	r3, #68	@ 0x44
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 fcc9 	bl	8006272 <USB_HC_Halt>
 80028e0:	e0b3      	b.n	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 ff7f 	bl	80057ee <USB_ReadChInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	f040 80a7 	bne.w	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3326      	adds	r3, #38	@ 0x26
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d11b      	bne.n	800294a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3344      	adds	r3, #68	@ 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	334d      	adds	r3, #77	@ 0x4d
 8002936:	2204      	movs	r2, #4
 8002938:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fc95 	bl	8006272 <USB_HC_Halt>
 8002948:	e03f      	b.n	80029ca <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3326      	adds	r3, #38	@ 0x26
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3326      	adds	r3, #38	@ 0x26
 8002970:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002972:	2b02      	cmp	r3, #2
 8002974:	d129      	bne.n	80029ca <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3344      	adds	r3, #68	@ 0x44
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	331b      	adds	r3, #27
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d110      	bne.n	80029ca <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	@ 0x4d
 80029b8:	2204      	movs	r2, #4
 80029ba:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 fc54 	bl	8006272 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	331b      	adds	r3, #27
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d129      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	331b      	adds	r3, #27
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	0151      	lsls	r1, r2, #5
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	440a      	add	r2, r1
 8002a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	0151      	lsls	r1, r2, #5
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	440a      	add	r2, r1
 8002a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a2e:	f043 0320 	orr.w	r3, r3, #32
 8002a32:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	2310      	movs	r3, #16
 8002a44:	6093      	str	r3, [r2, #8]
 8002a46:	e000      	b.n	8002a4a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a48:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 febd 	bl	80057ee <USB_ReadChInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d11b      	bne.n	8002ab6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	@ 0x4d
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 fbe0 	bl	8006272 <USB_HC_Halt>
 8002ab2:	f000 bc6f 	b.w	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 fe95 	bl	80057ee <USB_ReadChInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	f040 8082 	bne.w	8002bd4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2320      	movs	r3, #32
 8002ae0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3319      	adds	r3, #25
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d124      	bne.n	8002b42 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3319      	adds	r3, #25
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	334c      	adds	r3, #76	@ 0x4c
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	334d      	adds	r3, #77	@ 0x4d
 8002b30:	2203      	movs	r2, #3
 8002b32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fb98 	bl	8006272 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	331a      	adds	r3, #26
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	f040 841d 	bne.w	8003394 <HCD_HC_OUT_IRQHandler+0x944>
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	331b      	adds	r3, #27
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 8411 	bne.w	8003394 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3326      	adds	r3, #38	@ 0x26
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d009      	beq.n	8002b9c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	331b      	adds	r3, #27
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	334d      	adds	r3, #77	@ 0x4d
 8002bac:	2203      	movs	r2, #3
 8002bae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fb5a 	bl	8006272 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3344      	adds	r3, #68	@ 0x44
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e3df      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 fe06 	bl	80057ee <USB_ReadChInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bec:	d111      	bne.n	8002c12 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 fb31 	bl	8006272 <USB_HC_Halt>
 8002c10:	e3c0      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 fde7 	bl	80057ee <USB_ReadChInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d168      	bne.n	8002cfc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3344      	adds	r3, #68	@ 0x44
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fdd1 	bl	80057ee <USB_ReadChInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b40      	cmp	r3, #64	@ 0x40
 8002c54:	d112      	bne.n	8002c7c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3319      	adds	r3, #25
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	2340      	movs	r3, #64	@ 0x40
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	331b      	adds	r3, #27
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d019      	beq.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	331b      	adds	r3, #27
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	0151      	lsls	r1, r2, #5
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	440a      	add	r2, r1
 8002cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fabc 	bl	8006272 <USB_HC_Halt>
 8002cfa:	e34b      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fd72 	bl	80057ee <USB_ReadChInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b40      	cmp	r3, #64	@ 0x40
 8002d12:	d139      	bne.n	8002d88 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	334d      	adds	r3, #77	@ 0x4d
 8002d24:	2205      	movs	r2, #5
 8002d26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	331a      	adds	r3, #26
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3319      	adds	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3344      	adds	r3, #68	@ 0x44
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fa7f 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	2340      	movs	r3, #64	@ 0x40
 8002d84:	6093      	str	r3, [r2, #8]
 8002d86:	e305      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fd2c 	bl	80057ee <USB_ReadChInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d11a      	bne.n	8002dd6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	2308      	movs	r3, #8
 8002db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	334d      	adds	r3, #77	@ 0x4d
 8002dc2:	2206      	movs	r2, #6
 8002dc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fa4f 	bl	8006272 <USB_HC_Halt>
 8002dd4:	e2de      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fd05 	bl	80057ee <USB_ReadChInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d144      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3344      	adds	r3, #68	@ 0x44
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	334d      	adds	r3, #77	@ 0x4d
 8002e12:	2204      	movs	r2, #4
 8002e14:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3319      	adds	r3, #25
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d114      	bne.n	8002e56 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3318      	adds	r3, #24
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3319      	adds	r3, #25
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fa07 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2310      	movs	r3, #16
 8002e74:	6093      	str	r3, [r2, #8]
 8002e76:	e28d      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fcb4 	bl	80057ee <USB_ReadChInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8c:	2b80      	cmp	r3, #128	@ 0x80
 8002e8e:	d169      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	799b      	ldrb	r3, [r3, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	334d      	adds	r3, #77	@ 0x4d
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 f9dc 	bl	8006272 <USB_HC_Halt>
 8002eba:	e049      	b.n	8002f50 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3344      	adds	r3, #68	@ 0x44
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4403      	add	r3, r0
 8002edc:	3344      	adds	r3, #68	@ 0x44
 8002ede:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3344      	adds	r3, #68	@ 0x44
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d922      	bls.n	8002f3c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3344      	adds	r3, #68	@ 0x44
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	334c      	adds	r3, #76	@ 0x4c
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	334c      	adds	r3, #76	@ 0x4c
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f005 febb 	bl	8008cb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f3a:	e009      	b.n	8002f50 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334c      	adds	r3, #76	@ 0x4c
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2380      	movs	r3, #128	@ 0x80
 8002f60:	6093      	str	r3, [r2, #8]
 8002f62:	e217      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 fc3e 	bl	80057ee <USB_ReadChInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7c:	d11b      	bne.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334d      	adds	r3, #77	@ 0x4d
 8002f8e:	2209      	movs	r2, #9
 8002f90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 f969 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fb2:	6093      	str	r3, [r2, #8]
 8002fb4:	e1ee      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 fc15 	bl	80057ee <USB_ReadChInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	f040 81df 	bne.w	800338e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2302      	movs	r3, #2
 8002fe0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	334d      	adds	r3, #77	@ 0x4d
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 8093 	bne.w	8003120 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	334d      	adds	r3, #77	@ 0x4d
 800300a:	2202      	movs	r2, #2
 800300c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	334c      	adds	r3, #76	@ 0x4c
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3326      	adds	r3, #38	@ 0x26
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d00b      	beq.n	8003050 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3326      	adds	r3, #38	@ 0x26
 8003048:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800304a:	2b03      	cmp	r3, #3
 800304c:	f040 8190 	bne.w	8003370 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	799b      	ldrb	r3, [r3, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d115      	bne.n	8003084 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	333d      	adds	r3, #61	@ 0x3d
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	f083 0301 	eor.w	r3, r3, #1
 8003070:	b2d8      	uxtb	r0, r3
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	333d      	adds	r3, #61	@ 0x3d
 8003080:	4602      	mov	r2, r0
 8003082:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	799b      	ldrb	r3, [r3, #6]
 8003088:	2b01      	cmp	r3, #1
 800308a:	f040 8171 	bne.w	8003370 <HCD_HC_OUT_IRQHandler+0x920>
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3334      	adds	r3, #52	@ 0x34
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8165 	beq.w	8003370 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3334      	adds	r3, #52	@ 0x34
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4403      	add	r3, r0
 80030c6:	3328      	adds	r3, #40	@ 0x28
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	440b      	add	r3, r1
 80030cc:	1e59      	subs	r1, r3, #1
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4403      	add	r3, r0
 80030dc:	3328      	adds	r3, #40	@ 0x28
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 813f 	beq.w	8003370 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	333d      	adds	r3, #61	@ 0x3d
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2d8      	uxtb	r0, r3
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	333d      	adds	r3, #61	@ 0x3d
 800311a:	4602      	mov	r2, r0
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e127      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	334d      	adds	r3, #77	@ 0x4d
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d120      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	334d      	adds	r3, #77	@ 0x4d
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	331b      	adds	r3, #27
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 8107 	bne.w	8003370 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334c      	adds	r3, #76	@ 0x4c
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e0fb      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	334d      	adds	r3, #77	@ 0x4d
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b04      	cmp	r3, #4
 800318c:	d13a      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334d      	adds	r3, #77	@ 0x4d
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	334c      	adds	r3, #76	@ 0x4c
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	331b      	adds	r3, #27
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	f040 80d1 	bne.w	8003370 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	331b      	adds	r3, #27
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	0151      	lsls	r1, r2, #5
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	440a      	add	r2, r1
 80031f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003200:	6053      	str	r3, [r2, #4]
 8003202:	e0b5      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	334d      	adds	r3, #77	@ 0x4d
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d114      	bne.n	8003244 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334d      	adds	r3, #77	@ 0x4d
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334c      	adds	r3, #76	@ 0x4c
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e095      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	334d      	adds	r3, #77	@ 0x4d
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d114      	bne.n	8003284 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334d      	adds	r3, #77	@ 0x4d
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334c      	adds	r3, #76	@ 0x4c
 800327e:	2205      	movs	r2, #5
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e075      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b07      	cmp	r3, #7
 8003298:	d00a      	beq.n	80032b0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334d      	adds	r3, #77	@ 0x4d
 80032aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	d170      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334d      	adds	r3, #77	@ 0x4d
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3344      	adds	r3, #68	@ 0x44
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1c59      	adds	r1, r3, #1
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4403      	add	r3, r0
 80032e4:	3344      	adds	r3, #68	@ 0x44
 80032e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3344      	adds	r3, #68	@ 0x44
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d914      	bls.n	8003328 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3344      	adds	r3, #68	@ 0x44
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334c      	adds	r3, #76	@ 0x4c
 8003322:	2204      	movs	r2, #4
 8003324:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003326:	e022      	b.n	800336e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334c      	adds	r3, #76	@ 0x4c
 8003338:	2202      	movs	r2, #2
 800333a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003352:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800335a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800336e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334c      	adds	r3, #76	@ 0x4c
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f005 fc92 	bl	8008cb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800338c:	e002      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003392:	bf00      	nop
  }
}
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	@ 0x28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	0c5b      	lsrs	r3, r3, #17
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d004      	beq.n	80033e0 <HCD_RXQLVL_IRQHandler+0x46>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b05      	cmp	r3, #5
 80033da:	f000 80b6 	beq.w	800354a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033de:	e0b7      	b.n	8003550 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80b3 	beq.w	800354e <HCD_RXQLVL_IRQHandler+0x1b4>
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	332c      	adds	r3, #44	@ 0x2c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80a7 	beq.w	800354e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3338      	adds	r3, #56	@ 0x38
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	18d1      	adds	r1, r2, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4403      	add	r3, r0
 8003424:	3334      	adds	r3, #52	@ 0x34
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4299      	cmp	r1, r3
 800342a:	f200 8083 	bhi.w	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	332c      	adds	r3, #44	@ 0x2c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	b292      	uxth	r2, r2
 8003448:	4619      	mov	r1, r3
 800344a:	f002 f965 	bl	8005718 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	332c      	adds	r3, #44	@ 0x2c
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	18d1      	adds	r1, r2, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4403      	add	r3, r0
 8003472:	332c      	adds	r3, #44	@ 0x2c
 8003474:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3338      	adds	r3, #56	@ 0x38
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	18d1      	adds	r1, r2, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4403      	add	r3, r0
 800349a:	3338      	adds	r3, #56	@ 0x38
 800349c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	0cdb      	lsrs	r3, r3, #19
 80034ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3328      	adds	r3, #40	@ 0x28
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d13f      	bne.n	800354e <HCD_RXQLVL_IRQHandler+0x1b4>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d03c      	beq.n	800354e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	333c      	adds	r3, #60	@ 0x3c
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2d8      	uxtb	r0, r3
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	333c      	adds	r3, #60	@ 0x3c
 800352e:	4602      	mov	r2, r0
 8003530:	701a      	strb	r2, [r3, #0]
      break;
 8003532:	e00c      	b.n	800354e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334c      	adds	r3, #76	@ 0x4c
 8003544:	2204      	movs	r2, #4
 8003546:	701a      	strb	r2, [r3, #0]
      break;
 8003548:	e001      	b.n	800354e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800354e:	bf00      	nop
  }
}
 8003550:	bf00      	nop
 8003552:	3728      	adds	r7, #40	@ 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003584:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	d10b      	bne.n	80035a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d102      	bne.n	80035a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f005 fb6c 	bl	8008c78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f043 0302 	orr.w	r3, r3, #2
 80035a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d132      	bne.n	8003618 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d126      	bne.n	8003612 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7a5b      	ldrb	r3, [r3, #9]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d113      	bne.n	80035f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035d6:	d106      	bne.n	80035e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2102      	movs	r1, #2
 80035de:	4618      	mov	r0, r3
 80035e0:	f002 fa14 	bl	8005a0c <USB_InitFSLSPClkSel>
 80035e4:	e011      	b.n	800360a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 fa0d 	bl	8005a0c <USB_InitFSLSPClkSel>
 80035f2:	e00a      	b.n	800360a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	79db      	ldrb	r3, [r3, #7]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003602:	461a      	mov	r2, r3
 8003604:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003608:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f005 fb5e 	bl	8008ccc <HAL_HCD_PortEnabled_Callback>
 8003610:	e002      	b.n	8003618 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f005 fb68 	bl	8008ce8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b20      	cmp	r3, #32
 8003620:	d103      	bne.n	800362a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f043 0320 	orr.w	r3, r3, #32
 8003628:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6013      	str	r3, [r2, #0]
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e12b      	b.n	80038aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd f9ae 	bl	80009c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a4:	f001 fa20 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 80036a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a81      	ldr	r2, [pc, #516]	@ (80038b4 <HAL_I2C_Init+0x274>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d807      	bhi.n	80036c4 <HAL_I2C_Init+0x84>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a80      	ldr	r2, [pc, #512]	@ (80038b8 <HAL_I2C_Init+0x278>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e006      	b.n	80036d2 <HAL_I2C_Init+0x92>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a7d      	ldr	r2, [pc, #500]	@ (80038bc <HAL_I2C_Init+0x27c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	bf94      	ite	ls
 80036cc:	2301      	movls	r3, #1
 80036ce:	2300      	movhi	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0e7      	b.n	80038aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a78      	ldr	r2, [pc, #480]	@ (80038c0 <HAL_I2C_Init+0x280>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0c9b      	lsrs	r3, r3, #18
 80036e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a6a      	ldr	r2, [pc, #424]	@ (80038b4 <HAL_I2C_Init+0x274>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d802      	bhi.n	8003714 <HAL_I2C_Init+0xd4>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3301      	adds	r3, #1
 8003712:	e009      	b.n	8003728 <HAL_I2C_Init+0xe8>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a69      	ldr	r2, [pc, #420]	@ (80038c4 <HAL_I2C_Init+0x284>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	3301      	adds	r3, #1
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	430b      	orrs	r3, r1
 800372e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800373a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	495c      	ldr	r1, [pc, #368]	@ (80038b4 <HAL_I2C_Init+0x274>)
 8003744:	428b      	cmp	r3, r1
 8003746:	d819      	bhi.n	800377c <HAL_I2C_Init+0x13c>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e59      	subs	r1, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fbb1 f3f3 	udiv	r3, r1, r3
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800375c:	400b      	ands	r3, r1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_I2C_Init+0x138>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1e59      	subs	r1, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003776:	e051      	b.n	800381c <HAL_I2C_Init+0x1dc>
 8003778:	2304      	movs	r3, #4
 800377a:	e04f      	b.n	800381c <HAL_I2C_Init+0x1dc>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d111      	bne.n	80037a8 <HAL_I2C_Init+0x168>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e012      	b.n	80037ce <HAL_I2C_Init+0x18e>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e58      	subs	r0, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	0099      	lsls	r1, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Init+0x196>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e022      	b.n	800381c <HAL_I2C_Init+0x1dc>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10e      	bne.n	80037fc <HAL_I2C_Init+0x1bc>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e58      	subs	r0, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	440b      	add	r3, r1
 80037ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037fa:	e00f      	b.n	800381c <HAL_I2C_Init+0x1dc>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	0099      	lsls	r1, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	6809      	ldr	r1, [r1, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800384a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6911      	ldr	r1, [r2, #16]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68d2      	ldr	r2, [r2, #12]
 8003856:	4311      	orrs	r1, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	430b      	orrs	r3, r1
 800385e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	000186a0 	.word	0x000186a0
 80038b8:	001e847f 	.word	0x001e847f
 80038bc:	003d08ff 	.word	0x003d08ff
 80038c0:	431bde83 	.word	0x431bde83
 80038c4:	10624dd3 	.word	0x10624dd3

080038c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e128      	b.n	8003b2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a90      	ldr	r2, [pc, #576]	@ (8003b34 <HAL_I2S_Init+0x26c>)
 80038f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd f8af 	bl	8000a58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2202      	movs	r2, #2
 800391c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d060      	beq.n	80039e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800392e:	2310      	movs	r3, #16
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e001      	b.n	8003938 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b20      	cmp	r3, #32
 800393e:	d802      	bhi.n	8003946 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003946:	2001      	movs	r0, #1
 8003948:	f001 fa18 	bl	8004d7c <HAL_RCCEx_GetPeriphCLKFreq>
 800394c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003956:	d125      	bne.n	80039a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	fbb2 f2f3 	udiv	r2, r2, r3
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	3305      	adds	r3, #5
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e01f      	b.n	80039c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	fbb2 f2f3 	udiv	r2, r2, r3
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	461a      	mov	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	3305      	adds	r3, #5
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	e00e      	b.n	80039c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	3305      	adds	r3, #5
 80039c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003b38 <HAL_I2S_Init+0x270>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	08db      	lsrs	r3, r3, #3
 80039cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e003      	b.n	80039f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039e8:	2302      	movs	r3, #2
 80039ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d902      	bls.n	80039fc <HAL_I2S_Init+0x134>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2bff      	cmp	r3, #255	@ 0xff
 80039fa:	d907      	bls.n	8003a0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	f043 0210 	orr.w	r2, r3, #16
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e08f      	b.n	8003b2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	ea42 0103 	orr.w	r1, r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a2a:	f023 030f 	bic.w	r3, r3, #15
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6851      	ldr	r1, [r2, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68d2      	ldr	r2, [r2, #12]
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6992      	ldr	r2, [r2, #24]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d161      	bne.n	8003b1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a38      	ldr	r2, [pc, #224]	@ (8003b3c <HAL_I2S_Init+0x274>)
 8003a5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a37      	ldr	r2, [pc, #220]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_I2S_Init+0x1a4>
 8003a68:	4b36      	ldr	r3, [pc, #216]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003a6a:	e001      	b.n	8003a70 <HAL_I2S_Init+0x1a8>
 8003a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	4932      	ldr	r1, [pc, #200]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2S_Init+0x1b8>
 8003a7c:	4a31      	ldr	r2, [pc, #196]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x1bc>
 8003a80:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a84:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a88:	f023 030f 	bic.w	r3, r3, #15
 8003a8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_I2S_Init+0x1d4>
 8003a98:	4b2a      	ldr	r3, [pc, #168]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003a9a:	e001      	b.n	8003aa0 <HAL_I2S_Init+0x1d8>
 8003a9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2S_Init+0x1ea>
 8003aae:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003ab0:	e001      	b.n	8003ab6 <HAL_I2S_Init+0x1ee>
 8003ab2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac2:	d003      	beq.n	8003acc <HAL_I2S_Init+0x204>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e001      	b.n	8003ad8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aec:	4313      	orrs	r3, r2
 8003aee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2S_Init+0x24c>
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003b12:	e001      	b.n	8003b18 <HAL_I2S_Init+0x250>
 8003b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b18:	897a      	ldrh	r2, [r7, #10]
 8003b1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	08003c3f 	.word	0x08003c3f
 8003b38:	cccccccd 	.word	0xcccccccd
 8003b3c:	08003d55 	.word	0x08003d55
 8003b40:	40003800 	.word	0x40003800
 8003b44:	40003400 	.word	0x40003400

08003b48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ffb8 	bl	8003b48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10e      	bne.n	8003c36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff93 	bl	8003b5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d13a      	bne.n	8003cd0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d109      	bne.n	8003c78 <I2S_IRQHandler+0x3a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d102      	bne.n	8003c78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffb4 	bl	8003be0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d126      	bne.n	8003cd0 <I2S_IRQHandler+0x92>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d11f      	bne.n	8003cd0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f043 0202 	orr.w	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ff50 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d136      	bne.n	8003d4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d109      	bne.n	8003cfa <I2S_IRQHandler+0xbc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf0:	2b80      	cmp	r3, #128	@ 0x80
 8003cf2:	d102      	bne.n	8003cfa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff45 	bl	8003b84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d122      	bne.n	8003d4a <I2S_IRQHandler+0x10c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d11b      	bne.n	8003d4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff13 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a92      	ldr	r2, [pc, #584]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d6e:	4b92      	ldr	r3, [pc, #584]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d70:	e001      	b.n	8003d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a8b      	ldr	r2, [pc, #556]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d8e:	e001      	b.n	8003d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da0:	d004      	beq.n	8003dac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 8099 	bne.w	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d107      	bne.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f925 	bl	8004010 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d107      	bne.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9c8 	bl	8004170 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d13a      	bne.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d035      	beq.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e00:	e001      	b.n	8003e06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4969      	ldr	r1, [pc, #420]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0e:	428b      	cmp	r3, r1
 8003e10:	d101      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e12:	4b69      	ldr	r3, [pc, #420]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e14:	e001      	b.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fe88 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	f040 80c3 	bne.w	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80bd 	beq.w	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a49      	ldr	r2, [pc, #292]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e92:	4b49      	ldr	r3, [pc, #292]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e94:	e001      	b.n	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4944      	ldr	r1, [pc, #272]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea2:	428b      	cmp	r3, r1
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ea6:	4b44      	ldr	r3, [pc, #272]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea8:	e001      	b.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fe4a 	bl	8003b70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003edc:	e089      	b.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d107      	bne.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8be 	bl	8004074 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f8fd 	bl	800410c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d12f      	bne.n	8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02a      	beq.n	8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f42:	e001      	b.n	8003f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4919      	ldr	r1, [pc, #100]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f50:	428b      	cmp	r3, r1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f54:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f56:	e001      	b.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0202 	orr.w	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fdfa 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d136      	bne.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d031      	beq.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a07      	ldr	r2, [pc, #28]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f9c:	e001      	b.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4902      	ldr	r1, [pc, #8]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003faa:	428b      	cmp	r3, r1
 8003fac:	d106      	bne.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fae:	4b02      	ldr	r3, [pc, #8]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb0:	e006      	b.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003fb2:	bf00      	nop
 8003fb4:	40003800 	.word	0x40003800
 8003fb8:	40003400 	.word	0x40003400
 8003fbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f043 0204 	orr.w	r2, r3, #4
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fdc0 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff0:	e000      	b.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ff2:	bf00      	nop
}
 8003ff4:	bf00      	nop
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	1c99      	adds	r1, r3, #2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6251      	str	r1, [r2, #36]	@ 0x24
 8004022:	881a      	ldrh	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d113      	bne.n	800406a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004050:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ffc9 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c99      	adds	r1, r3, #2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6251      	str	r1, [r2, #36]	@ 0x24
 8004086:	8819      	ldrh	r1, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1d      	ldr	r2, [pc, #116]	@ (8004104 <I2SEx_TxISR_I2SExt+0x90>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <I2SEx_TxISR_I2SExt+0x22>
 8004092:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <I2SEx_TxISR_I2SExt+0x94>)
 8004094:	e001      	b.n	800409a <I2SEx_TxISR_I2SExt+0x26>
 8004096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800409a:	460a      	mov	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d121      	bne.n	80040fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <I2SEx_TxISR_I2SExt+0x90>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <I2SEx_TxISR_I2SExt+0x50>
 80040c0:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <I2SEx_TxISR_I2SExt+0x94>)
 80040c2:	e001      	b.n	80040c8 <I2SEx_TxISR_I2SExt+0x54>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	490d      	ldr	r1, [pc, #52]	@ (8004104 <I2SEx_TxISR_I2SExt+0x90>)
 80040d0:	428b      	cmp	r3, r1
 80040d2:	d101      	bne.n	80040d8 <I2SEx_TxISR_I2SExt+0x64>
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <I2SEx_TxISR_I2SExt+0x94>)
 80040d6:	e001      	b.n	80040dc <I2SEx_TxISR_I2SExt+0x68>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff81 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40003800 	.word	0x40003800
 8004108:	40003400 	.word	0x40003400

0800410c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68d8      	ldr	r0, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	1c99      	adds	r1, r3, #2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004124:	b282      	uxth	r2, r0
 8004126:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d113      	bne.n	8004168 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800414e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff4a 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a20      	ldr	r2, [pc, #128]	@ (8004200 <I2SEx_RxISR_I2SExt+0x90>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <I2SEx_RxISR_I2SExt+0x16>
 8004182:	4b20      	ldr	r3, [pc, #128]	@ (8004204 <I2SEx_RxISR_I2SExt+0x94>)
 8004184:	e001      	b.n	800418a <I2SEx_RxISR_I2SExt+0x1a>
 8004186:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418a:	68d8      	ldr	r0, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	1c99      	adds	r1, r3, #2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004196:	b282      	uxth	r2, r0
 8004198:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d121      	bne.n	80041f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <I2SEx_RxISR_I2SExt+0x90>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <I2SEx_RxISR_I2SExt+0x50>
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <I2SEx_RxISR_I2SExt+0x94>)
 80041be:	e001      	b.n	80041c4 <I2SEx_RxISR_I2SExt+0x54>
 80041c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	490d      	ldr	r1, [pc, #52]	@ (8004200 <I2SEx_RxISR_I2SExt+0x90>)
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d101      	bne.n	80041d4 <I2SEx_RxISR_I2SExt+0x64>
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <I2SEx_RxISR_I2SExt+0x94>)
 80041d2:	e001      	b.n	80041d8 <I2SEx_RxISR_I2SExt+0x68>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff03 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40003800 	.word	0x40003800
 8004204:	40003400 	.word	0x40003400

08004208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e267      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d075      	beq.n	8004312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d00c      	beq.n	800424c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423a:	2b08      	cmp	r3, #8
 800423c:	d112      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423e:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800424a:	d10b      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	4b7e      	ldr	r3, [pc, #504]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05b      	beq.n	8004310 <HAL_RCC_OscConfig+0x108>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d157      	bne.n	8004310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e242      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x74>
 800426e:	4b76      	ldr	r3, [pc, #472]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a75      	ldr	r2, [pc, #468]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x98>
 8004286:	4b70      	ldr	r3, [pc, #448]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6f      	ldr	r2, [pc, #444]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6d      	ldr	r3, [pc, #436]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6c      	ldr	r2, [pc, #432]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 80042a0:	4b69      	ldr	r3, [pc, #420]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b66      	ldr	r3, [pc, #408]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a65      	ldr	r2, [pc, #404]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fc fdf4 	bl	8000eac <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fc fdf0 	bl	8000eac <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e207      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xc0>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fc fde0 	bl	8000eac <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fc fddc 	bl	8000eac <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1f3      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b51      	ldr	r3, [pc, #324]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0xe8>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431e:	4b4a      	ldr	r3, [pc, #296]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	4b44      	ldr	r3, [pc, #272]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b41      	ldr	r3, [pc, #260]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1c7      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4937      	ldr	r1, [pc, #220]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b34      	ldr	r3, [pc, #208]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fc fd95 	bl	8000eac <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004386:	f7fc fd91 	bl	8000eac <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1a8      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2b      	ldr	r3, [pc, #172]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b28      	ldr	r3, [pc, #160]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4925      	ldr	r1, [pc, #148]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fc fd74 	bl	8000eac <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fc fd70 	bl	8000eac <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e187      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d036      	beq.n	8004460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fc fd54 	bl	8000eac <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004408:	f7fc fd50 	bl	8000eac <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e167      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x200>
 8004426:	e01b      	b.n	8004460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fc fd3d 	bl	8000eac <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	e00e      	b.n	8004454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004436:	f7fc fd39 	bl	8000eac <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d907      	bls.n	8004454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e150      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004448:	40023800 	.word	0x40023800
 800444c:	42470000 	.word	0x42470000
 8004450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004454:	4b88      	ldr	r3, [pc, #544]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ea      	bne.n	8004436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8097 	beq.w	800459c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b81      	ldr	r3, [pc, #516]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	4b7d      	ldr	r3, [pc, #500]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a7c      	ldr	r2, [pc, #496]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b7a      	ldr	r3, [pc, #488]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b77      	ldr	r3, [pc, #476]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b74      	ldr	r3, [pc, #464]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a73      	ldr	r2, [pc, #460]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fc fcf9 	bl	8000eac <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fc fcf5 	bl	8000eac <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e10c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b6a      	ldr	r3, [pc, #424]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2ea>
 80044e4:	4b64      	ldr	r3, [pc, #400]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a63      	ldr	r2, [pc, #396]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	e01c      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x30c>
 80044fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	4a5b      	ldr	r2, [pc, #364]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 8004514:	4b58      	ldr	r3, [pc, #352]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	4a57      	ldr	r2, [pc, #348]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004520:	4b55      	ldr	r3, [pc, #340]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4a54      	ldr	r2, [pc, #336]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004526:	f023 0304 	bic.w	r3, r3, #4
 800452a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fc fcba 	bl	8000eac <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fc fcb6 	bl	8000eac <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0cb      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	4b49      	ldr	r3, [pc, #292]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ee      	beq.n	800453c <HAL_RCC_OscConfig+0x334>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f7fc fca4 	bl	8000eac <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fc fca0 	bl	8000eac <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0b5      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457e:	4b3e      	ldr	r3, [pc, #248]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ee      	bne.n	8004568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	4a38      	ldr	r2, [pc, #224]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a1 	beq.w	80046e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d05c      	beq.n	800466c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d141      	bne.n	800463e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fc fc74 	bl	8000eac <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fc fc70 	bl	8000eac <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e087      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	491b      	ldr	r1, [pc, #108]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fc fc49 	bl	8000eac <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461e:	f7fc fc45 	bl	8000eac <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e05c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004630:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x416>
 800463c:	e054      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fc fc32 	bl	8000eac <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fc fc2e 	bl	8000eac <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e045      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x444>
 800466a:	e03d      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e038      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000
 8004680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x4ec>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d028      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d121      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	4293      	cmp	r3, r2
 80046be:	d111      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	3b01      	subs	r3, #1
 80046ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800

080046f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0cc      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b68      	ldr	r3, [pc, #416]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d90c      	bls.n	8004734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b65      	ldr	r3, [pc, #404]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b63      	ldr	r3, [pc, #396]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0b8      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474c:	4b59      	ldr	r3, [pc, #356]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a58      	ldr	r2, [pc, #352]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a52      	ldr	r2, [pc, #328]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800476e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b50      	ldr	r3, [pc, #320]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	494d      	ldr	r1, [pc, #308]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d044      	beq.n	8004818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b47      	ldr	r3, [pc, #284]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d119      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b3f      	ldr	r3, [pc, #252]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e067      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b37      	ldr	r3, [pc, #220]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4934      	ldr	r1, [pc, #208]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7fc fb60 	bl	8000eac <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fc fb5c 	bl	8000eac <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e04f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d20c      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b22      	ldr	r3, [pc, #136]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b20      	ldr	r3, [pc, #128]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e032      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4916      	ldr	r1, [pc, #88]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486a:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	490e      	ldr	r1, [pc, #56]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800487e:	f000 f821 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004882:	4602      	mov	r2, r0
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	490a      	ldr	r1, [pc, #40]	@ (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a09      	ldr	r2, [pc, #36]	@ (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fc f9f0 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023c00 	.word	0x40023c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	080093b4 	.word	0x080093b4
 80048bc:	20000000 	.word	0x20000000
 80048c0:	20000004 	.word	0x20000004

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b094      	sub	sp, #80	@ 0x50
 80048ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d0:	2300      	movs	r3, #0
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	2300      	movs	r3, #0
 80048d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048dc:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d00d      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x40>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	f200 80e1 	bhi.w	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x34>
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x3a>
 80048f6:	e0db      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b73      	ldr	r3, [pc, #460]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80048fc:	e0db      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048fe:	4b73      	ldr	r3, [pc, #460]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x208>)
 8004900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004902:	e0d8      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004904:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2200      	movs	r2, #0
 8004922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	633b      	str	r3, [r7, #48]	@ 0x30
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4621      	mov	r1, r4
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	6139      	str	r1, [r7, #16]
 8004954:	4629      	mov	r1, r5
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004968:	4659      	mov	r1, fp
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4651      	mov	r1, sl
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4651      	mov	r1, sl
 8004978:	ebb2 0801 	subs.w	r8, r2, r1
 800497c:	4659      	mov	r1, fp
 800497e:	eb63 0901 	sbc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	462b      	mov	r3, r5
 80049a4:	eb49 0303 	adc.w	r3, r9, r3
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049b6:	4629      	mov	r1, r5
 80049b8:	024b      	lsls	r3, r1, #9
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c0:	4621      	mov	r1, r4
 80049c2:	024a      	lsls	r2, r1, #9
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	2200      	movs	r2, #0
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049d4:	f7fb fc04 	bl	80001e0 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	e058      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	2200      	movs	r2, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	4611      	mov	r1, r2
 80049ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a0e:	0150      	lsls	r0, r2, #5
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4641      	mov	r1, r8
 8004a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a34:	ebb2 040a 	subs.w	r4, r2, sl
 8004a38:	eb63 050b 	sbc.w	r5, r3, fp
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	00eb      	lsls	r3, r5, #3
 8004a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4a:	00e2      	lsls	r2, r4, #3
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	18e3      	adds	r3, r4, r3
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	464b      	mov	r3, r9
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	028b      	lsls	r3, r1, #10
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a74:	4621      	mov	r1, r4
 8004a76:	028a      	lsls	r2, r1, #10
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	61fa      	str	r2, [r7, #28]
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	f7fb fbaa 	bl	80001e0 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3750      	adds	r7, #80	@ 0x50
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000000 	.word	0x20000000

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aec:	f7ff fff0 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	080093c4 	.word	0x080093c4

08004b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b14:	f7ff ffdc 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0b5b      	lsrs	r3, r3, #13
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4903      	ldr	r1, [pc, #12]	@ (8004b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	080093c4 	.word	0x080093c4

08004b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	220f      	movs	r2, #15
 8004b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0203 	and.w	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b54:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b6c:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b7a:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <HAL_RCC_GetClockConfig+0x60>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0207 	and.w	r2, r3, #7
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40023c00 	.word	0x40023c00

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d038      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bc4:	4b68      	ldr	r3, [pc, #416]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bca:	f7fc f96f 	bl	8000eac <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bd2:	f7fc f96b 	bl	8000eac <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e0bd      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004be4:	4b61      	ldr	r3, [pc, #388]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	071b      	lsls	r3, r3, #28
 8004c02:	495a      	ldr	r1, [pc, #360]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c0a:	4b57      	ldr	r3, [pc, #348]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c10:	f7fc f94c 	bl	8000eac <HAL_GetTick>
 8004c14:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c18:	f7fc f948 	bl	8000eac <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e09a      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2a:	4b50      	ldr	r3, [pc, #320]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8083 	beq.w	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	4b48      	ldr	r3, [pc, #288]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	4a47      	ldr	r2, [pc, #284]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c54:	4b45      	ldr	r3, [pc, #276]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c60:	4b43      	ldr	r3, [pc, #268]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a42      	ldr	r2, [pc, #264]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c6c:	f7fc f91e 	bl	8000eac <HAL_GetTick>
 8004c70:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c74:	f7fc f91a 	bl	8000eac <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e06c      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c86:	4b3a      	ldr	r3, [pc, #232]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c92:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d02f      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d028      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cba:	4b2e      	ldr	r3, [pc, #184]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cc6:	4a29      	ldr	r2, [pc, #164]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ccc:	4b27      	ldr	r3, [pc, #156]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d114      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7fc f8e8 	bl	8000eac <HAL_GetTick>
 8004cdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fc f8e4 	bl	8000eac <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e034      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ee      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004d10:	4b16      	ldr	r3, [pc, #88]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d24:	4911      	ldr	r1, [pc, #68]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
 8004d2a:	e005      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a0e      	ldr	r2, [pc, #56]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d36:	6093      	str	r3, [r2, #8]
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d44:	4909      	ldr	r1, [pc, #36]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7d1a      	ldrb	r2, [r3, #20]
 8004d5a:	4b07      	ldr	r3, [pc, #28]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d5c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	42470068 	.word	0x42470068
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40007000 	.word	0x40007000
 8004d74:	42470e40 	.word	0x42470e40
 8004d78:	424711e0 	.word	0x424711e0

08004d7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d141      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d9a:	4b25      	ldr	r3, [pc, #148]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004db0:	d131      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004db2:	4b20      	ldr	r3, [pc, #128]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004db4:	617b      	str	r3, [r7, #20]
          break;
 8004db6:	e031      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004db8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dc4:	d109      	bne.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd0:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	e008      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004dda:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de4:	4a15      	ldr	r2, [pc, #84]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004dec:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e00:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e06:	0f1b      	lsrs	r3, r3, #28
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	617b      	str	r3, [r7, #20]
          break;
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
          break;
 8004e1a:	bf00      	nop
        }
      }
      break;
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8004e1e:	bf00      	nop
    }
  }
  return frequency;
 8004e20:	697b      	ldr	r3, [r7, #20]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	00bb8000 	.word	0x00bb8000
 8004e38:	007a1200 	.word	0x007a1200
 8004e3c:	00f42400 	.word	0x00f42400

08004e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07b      	b.n	8004f4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e62:	d009      	beq.n	8004e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	61da      	str	r2, [r3, #28]
 8004e6a:	e005      	b.n	8004e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fb feae 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efc:	ea42 0103 	orr.w	r1, r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0104 	and.w	r1, r3, #4
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	f003 0210 	and.w	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e041      	b.n	8004fe8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f839 	bl	8004ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f000 f9b1 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d001      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e044      	b.n	80050a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1e      	ldr	r2, [pc, #120]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <HAL_TIM_Base_Start_IT+0x6c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005046:	d013      	beq.n	8005070 <HAL_TIM_Base_Start_IT+0x6c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1a      	ldr	r2, [pc, #104]	@ (80050b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <HAL_TIM_Base_Start_IT+0x6c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <HAL_TIM_Base_Start_IT+0xb8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_TIM_Base_Start_IT+0x6c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_TIM_Base_Start_IT+0x6c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a16      	ldr	r2, [pc, #88]	@ (80050c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d111      	bne.n	8005094 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b06      	cmp	r3, #6
 8005080:	d010      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	e007      	b.n	80050a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40014000 	.word	0x40014000

080050c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0202 	mvn.w	r2, #2
 80050fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8d2 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8c4 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8d5 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0204 	mvn.w	r2, #4
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8ac 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f89e 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8af 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d020      	beq.n	80051c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01b      	beq.n	80051c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0208 	mvn.w	r2, #8
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f886 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f878 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f889 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d020      	beq.n	8005210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0210 	mvn.w	r2, #16
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2208      	movs	r2, #8
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f860 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f852 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f863 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0201 	mvn.w	r2, #1
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fb fb8a 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f8e6 	bl	8005424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f834 	bl	80052e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0220 	mvn.w	r2, #32
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8b8 	bl	8005410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3a      	ldr	r2, [pc, #232]	@ (80053f4 <TIM_Base_SetConfig+0xfc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00f      	beq.n	8005330 <TIM_Base_SetConfig+0x38>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005316:	d00b      	beq.n	8005330 <TIM_Base_SetConfig+0x38>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a37      	ldr	r2, [pc, #220]	@ (80053f8 <TIM_Base_SetConfig+0x100>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_Base_SetConfig+0x38>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a36      	ldr	r2, [pc, #216]	@ (80053fc <TIM_Base_SetConfig+0x104>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_Base_SetConfig+0x38>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a35      	ldr	r2, [pc, #212]	@ (8005400 <TIM_Base_SetConfig+0x108>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2b      	ldr	r2, [pc, #172]	@ (80053f4 <TIM_Base_SetConfig+0xfc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01b      	beq.n	8005382 <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d017      	beq.n	8005382 <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a28      	ldr	r2, [pc, #160]	@ (80053f8 <TIM_Base_SetConfig+0x100>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a27      	ldr	r2, [pc, #156]	@ (80053fc <TIM_Base_SetConfig+0x104>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <TIM_Base_SetConfig+0x8a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a26      	ldr	r2, [pc, #152]	@ (8005400 <TIM_Base_SetConfig+0x108>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00b      	beq.n	8005382 <TIM_Base_SetConfig+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a25      	ldr	r2, [pc, #148]	@ (8005404 <TIM_Base_SetConfig+0x10c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_Base_SetConfig+0x8a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a24      	ldr	r2, [pc, #144]	@ (8005408 <TIM_Base_SetConfig+0x110>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_Base_SetConfig+0x8a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a23      	ldr	r2, [pc, #140]	@ (800540c <TIM_Base_SetConfig+0x114>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d108      	bne.n	8005394 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0e      	ldr	r2, [pc, #56]	@ (80053f4 <TIM_Base_SetConfig+0xfc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d103      	bne.n	80053c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d105      	bne.n	80053e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	611a      	str	r2, [r3, #16]
  }
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005438:	b084      	sub	sp, #16
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	f107 001c 	add.w	r0, r7, #28
 8005446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800544a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800544e:	2b01      	cmp	r3, #1
 8005450:	d123      	bne.n	800549a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005456:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800547a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800547e:	2b01      	cmp	r3, #1
 8005480:	d105      	bne.n	800548e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9dc 	bl	800584c <USB_CoreReset>
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
 8005498:	e01b      	b.n	80054d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9d0 	bl	800584c <USB_CoreReset>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80054c4:	e005      	b.n	80054d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054d2:	7fbb      	ldrb	r3, [r7, #30]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d10b      	bne.n	80054f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f043 0206 	orr.w	r2, r3, #6
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054fc:	b004      	add	sp, #16
 80054fe:	4770      	bx	lr

08005500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f043 0201 	orr.w	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f023 0201 	bic.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d115      	bne.n	8005592 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005572:	200a      	movs	r0, #10
 8005574:	f7fb fca6 	bl	8000ec4 <HAL_Delay>
      ms += 10U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	330a      	adds	r3, #10
 800557c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f956 	bl	8005830 <USB_GetMode>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d01e      	beq.n	80055c8 <USB_SetCurrentMode+0x84>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2bc7      	cmp	r3, #199	@ 0xc7
 800558e:	d9f0      	bls.n	8005572 <USB_SetCurrentMode+0x2e>
 8005590:	e01a      	b.n	80055c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d115      	bne.n	80055c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055a4:	200a      	movs	r0, #10
 80055a6:	f7fb fc8d 	bl	8000ec4 <HAL_Delay>
      ms += 10U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	330a      	adds	r3, #10
 80055ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f93d 	bl	8005830 <USB_GetMode>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <USB_SetCurrentMode+0x84>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2bc7      	cmp	r3, #199	@ 0xc7
 80055c0:	d9f0      	bls.n	80055a4 <USB_SetCurrentMode+0x60>
 80055c2:	e001      	b.n	80055c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e005      	b.n	80055d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80055cc:	d101      	bne.n	80055d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055f6:	d901      	bls.n	80055fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e01b      	b.n	8005634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	daf2      	bge.n	80055ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	019b      	lsls	r3, r3, #6
 800560c:	f043 0220 	orr.w	r2, r3, #32
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005620:	d901      	bls.n	8005626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e006      	b.n	8005634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b20      	cmp	r3, #32
 8005630:	d0f0      	beq.n	8005614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005658:	d901      	bls.n	800565e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e018      	b.n	8005690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	daf2      	bge.n	800564c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2210      	movs	r2, #16
 800566e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800567c:	d901      	bls.n	8005682 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e006      	b.n	8005690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b10      	cmp	r3, #16
 800568c:	d0f0      	beq.n	8005670 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	@ 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	460b      	mov	r3, r1
 80056ac:	71fb      	strb	r3, [r7, #7]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d123      	bne.n	800570a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056c2:	88bb      	ldrh	r3, [r7, #4]
 80056c4:	3303      	adds	r3, #3
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e018      	b.n	8005702 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	031a      	lsls	r2, r3, #12
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056dc:	461a      	mov	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3301      	adds	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	3301      	adds	r3, #1
 80056ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	3301      	adds	r3, #1
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d3e2      	bcc.n	80056d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3724      	adds	r7, #36	@ 0x24
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005718:	b480      	push	{r7}
 800571a:	b08b      	sub	sp, #44	@ 0x2c
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	089b      	lsrs	r3, r3, #2
 8005732:	b29b      	uxth	r3, r3
 8005734:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800573e:	2300      	movs	r3, #0
 8005740:	623b      	str	r3, [r7, #32]
 8005742:	e014      	b.n	800576e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	3301      	adds	r3, #1
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	3301      	adds	r3, #1
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	3301      	adds	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	3301      	adds	r3, #1
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	3301      	adds	r3, #1
 800576c:	623b      	str	r3, [r7, #32]
 800576e:	6a3a      	ldr	r2, [r7, #32]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	429a      	cmp	r2, r3
 8005774:	d3e6      	bcc.n	8005744 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01e      	beq.n	80057ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005786:	461a      	mov	r2, r3
 8005788:	f107 0310 	add.w	r3, r7, #16
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	701a      	strb	r2, [r3, #0]
      i++;
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	3301      	adds	r3, #1
 80057a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	3301      	adds	r3, #1
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80057ae:	8bfb      	ldrh	r3, [r7, #30]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057b4:	8bfb      	ldrh	r3, [r7, #30]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1ea      	bne.n	8005790 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057bc:	4618      	mov	r0, r3
 80057be:	372c      	adds	r7, #44	@ 0x2c
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057e0:	68fb      	ldr	r3, [r7, #12]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005822:	68bb      	ldr	r3, [r7, #8]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f003 0301 	and.w	r3, r3, #1
}
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005864:	d901      	bls.n	800586a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e01b      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	daf2      	bge.n	8005858 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800588e:	d901      	bls.n	8005894 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e006      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d0f0      	beq.n	8005882 <USB_CoreReset+0x36>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b0:	b084      	sub	sp, #16
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80058be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d119      	bne.n	800593a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10a      	bne.n	8005924 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800591c:	f043 0304 	orr.w	r3, r3, #4
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e014      	b.n	800594e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005932:	f023 0304 	bic.w	r3, r3, #4
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e009      	b.n	800594e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800594e:	2110      	movs	r1, #16
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fe43 	bl	80055dc <USB_FlushTxFifo>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff fe6d 	bl	8005640 <USB_FlushRxFifo>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	e015      	b.n	80059a2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005982:	461a      	mov	r2, r3
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
 8005988:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3301      	adds	r3, #1
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059a6:	461a      	mov	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d3e3      	bcc.n	8005976 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ba:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2280      	movs	r2, #128	@ 0x80
 80059c0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005a00 <USB_HostInit+0x150>)
 80059c6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005a04 <USB_HostInit+0x154>)
 80059cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f043 0210 	orr.w	r2, r3, #16
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <USB_HostInit+0x158>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059fc:	b004      	add	sp, #16
 80059fe:	4770      	bx	lr
 8005a00:	00600080 	.word	0x00600080
 8005a04:	004000e0 	.word	0x004000e0
 8005a08:	a3200008 	.word	0xa3200008

08005a0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005a44:	4313      	orrs	r3, r2
 8005a46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a54:	461a      	mov	r2, r3
 8005a56:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a5a:	6053      	str	r3, [r2, #4]
 8005a5c:	e00c      	b.n	8005a78 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d107      	bne.n	8005a74 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005a70:	6053      	str	r3, [r2, #4]
 8005a72:	e001      	b.n	8005a78 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005aa6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ab6:	2064      	movs	r0, #100	@ 0x64
 8005ab8:	f7fb fa04 	bl	8000ec4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005aca:	200a      	movs	r0, #10
 8005acc:	f7fb f9fa 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005afe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <USB_DriveVbus+0x44>
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d106      	bne.n	8005b1e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b1c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b28:	d109      	bne.n	8005b3e <USB_DriveVbus+0x64>
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b3c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	0c5b      	lsrs	r3, r3, #17
 8005b6a:	f003 0303 	and.w	r3, r3, #3
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	b29b      	uxth	r3, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	70fb      	strb	r3, [r7, #3]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	70bb      	strb	r3, [r7, #2]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d867      	bhi.n	8005caa <USB_HC_Init+0x10e>
 8005bda:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <USB_HC_Init+0x44>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005c6d 	.word	0x08005c6d
 8005be8:	08005bf1 	.word	0x08005bf1
 8005bec:	08005c2f 	.word	0x08005c2f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005c02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	da51      	bge.n	8005cb0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c2a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005c2c:	e040      	b.n	8005cb0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005c40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da34      	bge.n	8005cb4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c68:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c6a:	e023      	b.n	8005cb4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f240 2325 	movw	r3, #549	@ 0x225
 8005c7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	da17      	bge.n	8005cb8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ca2:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005ca6:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ca8:	e006      	b.n	8005cb8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	77fb      	strb	r3, [r7, #31]
      break;
 8005cae:	e004      	b.n	8005cba <USB_HC_Init+0x11e>
      break;
 8005cb0:	bf00      	nop
 8005cb2:	e002      	b.n	8005cba <USB_HC_Init+0x11e>
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <USB_HC_Init+0x11e>
      break;
 8005cb8:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ce6:	f043 0302 	orr.w	r3, r3, #2
 8005cea:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	6939      	ldr	r1, [r7, #16]
 8005d02:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d06:	4313      	orrs	r3, r2
 8005d08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da03      	bge.n	8005d26 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e001      	b.n	8005d2a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ff0e 	bl	8005b4c <USB_GetHostSpeed>
 8005d30:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d106      	bne.n	8005d48 <USB_HC_Init+0x1ac>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d003      	beq.n	8005d48 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	e001      	b.n	8005d4c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d4c:	787b      	ldrb	r3, [r7, #1]
 8005d4e:	059b      	lsls	r3, r3, #22
 8005d50:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d54:	78bb      	ldrb	r3, [r7, #2]
 8005d56:	02db      	lsls	r3, r3, #11
 8005d58:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d5c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d62:	049b      	lsls	r3, r3, #18
 8005d64:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005d6a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d70:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d7a:	78fa      	ldrb	r2, [r7, #3]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d8a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005d8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d003      	beq.n	8005d9c <USB_HC_Init+0x200>
 8005d94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d10f      	bne.n	8005dbc <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	@ 0x30
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005de4:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	799b      	ldrb	r3, [r3, #6]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d158      	bne.n	8005ea0 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005dee:	2301      	movs	r3, #1
 8005df0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	78db      	ldrb	r3, [r3, #3]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	8a92      	ldrh	r2, [r2, #20]
 8005e00:	fb03 f202 	mul.w	r2, r3, r2
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	61da      	str	r2, [r3, #28]
 8005e08:	e079      	b.n	8005efe <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	7c9b      	ldrb	r3, [r3, #18]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d130      	bne.n	8005e74 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	2bbc      	cmp	r3, #188	@ 0xbc
 8005e18:	d918      	bls.n	8005e4c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	8a9b      	ldrh	r3, [r3, #20]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d003      	beq.n	8005e3c <USB_HC_StartXfer+0x74>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d103      	bne.n	8005e44 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	e05c      	b.n	8005efe <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2201      	movs	r2, #1
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	e058      	b.n	8005efe <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d007      	beq.n	8005e6c <USB_HC_StartXfer+0xa4>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d003      	beq.n	8005e6c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2204      	movs	r2, #4
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	e048      	b.n	8005efe <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	e044      	b.n	8005efe <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d10d      	bne.n	8005e96 <USB_HC_StartXfer+0xce>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	8a92      	ldrh	r2, [r2, #20]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d907      	bls.n	8005e96 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	8a92      	ldrh	r2, [r2, #20]
 8005e8c:	fb03 f202 	mul.w	r2, r3, r2
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	61da      	str	r2, [r3, #28]
 8005e94:	e033      	b.n	8005efe <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	61da      	str	r2, [r3, #28]
 8005e9e:	e02e      	b.n	8005efe <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d018      	beq.n	8005eda <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	8a92      	ldrh	r2, [r2, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	8a92      	ldrh	r2, [r2, #20]
 8005eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ebc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005ebe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005ec0:	8b7b      	ldrh	r3, [r7, #26]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d90b      	bls.n	8005ede <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005ec6:	8b7b      	ldrh	r3, [r7, #26]
 8005ec8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005eca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	8a92      	ldrh	r2, [r2, #20]
 8005ed0:	fb03 f202 	mul.w	r2, r3, r2
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	61da      	str	r2, [r3, #28]
 8005ed8:	e001      	b.n	8005ede <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005eda:	2301      	movs	r3, #1
 8005edc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	78db      	ldrb	r3, [r3, #3]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ee6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	8a92      	ldrh	r2, [r2, #20]
 8005eec:	fb03 f202 	mul.w	r2, r3, r2
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	61da      	str	r2, [r3, #28]
 8005ef4:	e003      	b.n	8005efe <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6a1a      	ldr	r2, [r3, #32]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f08:	04d9      	lsls	r1, r3, #19
 8005f0a:	4ba4      	ldr	r3, [pc, #656]	@ (800619c <USB_HC_StartXfer+0x3d4>)
 8005f0c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f0e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	7d9b      	ldrb	r3, [r3, #22]
 8005f14:	075b      	lsls	r3, r3, #29
 8005f16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f1a:	69f9      	ldr	r1, [r7, #28]
 8005f1c:	0148      	lsls	r0, r1, #5
 8005f1e:	6a39      	ldr	r1, [r7, #32]
 8005f20:	4401      	add	r1, r0
 8005f22:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f26:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f28:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6999      	ldr	r1, [r3, #24]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f40:	460a      	mov	r2, r1
 8005f42:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	6a3a      	ldr	r2, [r7, #32]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f7a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	7e7b      	ldrb	r3, [r7, #25]
 8005f8c:	075b      	lsls	r3, r3, #29
 8005f8e:	69f9      	ldr	r1, [r7, #28]
 8005f90:	0148      	lsls	r0, r1, #5
 8005f92:	6a39      	ldr	r1, [r7, #32]
 8005f94:	4401      	add	r1, r0
 8005f96:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	799b      	ldrb	r3, [r3, #6]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	f040 80c4 	bne.w	8006130 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	7c5b      	ldrb	r3, [r3, #17]
 8005fac:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fc4:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	6a3a      	ldr	r2, [r7, #32]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fe0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005fe4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	79db      	ldrb	r3, [r3, #7]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d123      	bne.n	8006036 <USB_HC_StartXfer+0x26e>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	78db      	ldrb	r3, [r3, #3]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d11f      	bne.n	8006036 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	440a      	add	r2, r1
 800600c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006014:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	6a3a      	ldr	r2, [r7, #32]
 800602a:	440a      	add	r2, r1
 800602c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006034:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7c9b      	ldrb	r3, [r3, #18]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d003      	beq.n	8006046 <USB_HC_StartXfer+0x27e>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	7c9b      	ldrb	r3, [r3, #18]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d117      	bne.n	8006076 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800604a:	2b01      	cmp	r3, #1
 800604c:	d113      	bne.n	8006076 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	78db      	ldrb	r3, [r3, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10f      	bne.n	8006076 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	440a      	add	r2, r1
 800606c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006074:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	7c9b      	ldrb	r3, [r3, #18]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d163      	bne.n	8006146 <USB_HC_StartXfer+0x37e>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	78db      	ldrb	r3, [r3, #3]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d15f      	bne.n	8006146 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	3b01      	subs	r3, #1
 800608c:	2b03      	cmp	r3, #3
 800608e:	d859      	bhi.n	8006144 <USB_HC_StartXfer+0x37c>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <USB_HC_StartXfer+0x2d0>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060cb 	.word	0x080060cb
 80060a0:	080060ed 	.word	0x080060ed
 80060a4:	0800610f 	.word	0x0800610f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c6:	6053      	str	r3, [r2, #4]
          break;
 80060c8:	e03d      	b.n	8006146 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	6a3a      	ldr	r2, [r7, #32]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e4:	f043 030e 	orr.w	r3, r3, #14
 80060e8:	6053      	str	r3, [r2, #4]
          break;
 80060ea:	e02c      	b.n	8006146 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	6a3a      	ldr	r2, [r7, #32]
 8006100:	440a      	add	r2, r1
 8006102:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800610a:	6053      	str	r3, [r2, #4]
          break;
 800610c:	e01b      	b.n	8006146 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800612c:	6053      	str	r3, [r2, #4]
          break;
 800612e:	e00a      	b.n	8006146 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613c:	461a      	mov	r2, r3
 800613e:	2300      	movs	r3, #0
 8006140:	6053      	str	r3, [r2, #4]
 8006142:	e000      	b.n	8006146 <USB_HC_StartXfer+0x37e>
          break;
 8006144:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800615c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	78db      	ldrb	r3, [r3, #3]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	e003      	b.n	8006178 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006176:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800617e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618c:	461a      	mov	r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	e055      	b.n	8006248 <USB_HC_StartXfer+0x480>
 800619c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	78db      	ldrb	r3, [r3, #3]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d14e      	bne.n	8006246 <USB_HC_StartXfer+0x47e>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d04a      	beq.n	8006246 <USB_HC_StartXfer+0x47e>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	79db      	ldrb	r3, [r3, #7]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d146      	bne.n	8006246 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	7c9b      	ldrb	r3, [r3, #18]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d831      	bhi.n	8006224 <USB_HC_StartXfer+0x45c>
 80061c0:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <USB_HC_StartXfer+0x400>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061d9 	.word	0x080061d9
 80061d4:	080061fd 	.word	0x080061fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	3303      	adds	r3, #3
 80061de:	089b      	lsrs	r3, r3, #2
 80061e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061e2:	8afa      	ldrh	r2, [r7, #22]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d91c      	bls.n	8006228 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80061fa:	e015      	b.n	8006228 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	3303      	adds	r3, #3
 8006202:	089b      	lsrs	r3, r3, #2
 8006204:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006206:	8afa      	ldrh	r2, [r7, #22]
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	b29b      	uxth	r3, r3
 8006212:	429a      	cmp	r2, r3
 8006214:	d90a      	bls.n	800622c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	619a      	str	r2, [r3, #24]
        }
        break;
 8006222:	e003      	b.n	800622c <USB_HC_StartXfer+0x464>

      default:
        break;
 8006224:	bf00      	nop
 8006226:	e002      	b.n	800622e <USB_HC_StartXfer+0x466>
        break;
 8006228:	bf00      	nop
 800622a:	e000      	b.n	800622e <USB_HC_StartXfer+0x466>
        break;
 800622c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6999      	ldr	r1, [r3, #24]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	785a      	ldrb	r2, [r3, #1]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	b29b      	uxth	r3, r3
 800623c:	2000      	movs	r0, #0
 800623e:	9000      	str	r0, [sp, #0]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fa2b 	bl	800569c <USB_WritePacket>
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3728      	adds	r7, #40	@ 0x28
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	b29b      	uxth	r3, r3
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006272:	b480      	push	{r7}
 8006274:	b089      	sub	sp, #36	@ 0x24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	0c9b      	lsrs	r3, r3, #18
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	0fdb      	lsrs	r3, r3, #31
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	0fdb      	lsrs	r3, r3, #31
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d10d      	bne.n	80062f4 <USB_HC_Halt+0x82>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USB_HC_Halt+0x82>
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d002      	beq.n	80062f0 <USB_HC_Halt+0x7e>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d101      	bne.n	80062f4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e0d8      	b.n	80064a6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <USB_HC_Halt+0x8e>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d173      	bne.n	80063e8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	440a      	add	r2, r1
 8006316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800631a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800631e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d14a      	bne.n	80063c2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d133      	bne.n	80063a0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006356:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	440a      	add	r2, r1
 800636e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006376:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	3301      	adds	r3, #1
 800637c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006384:	d82e      	bhi.n	80063e4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800639c:	d0ec      	beq.n	8006378 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800639e:	e081      	b.n	80064a4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063be:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063c0:	e070      	b.n	80064a4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063e2:	e05f      	b.n	80064a4 <USB_HC_Halt+0x232>
            break;
 80063e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063e6:	e05d      	b.n	80064a4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006402:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006406:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d133      	bne.n	8006480 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006436:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006452:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006456:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	3301      	adds	r3, #1
 800645c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006464:	d81d      	bhi.n	80064a2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800647c:	d0ec      	beq.n	8006458 <USB_HC_Halt+0x1e6>
 800647e:	e011      	b.n	80064a4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800649a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e000      	b.n	80064a4 <USB_HC_Halt+0x232>
          break;
 80064a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	@ 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b088      	sub	sp, #32
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff f82b 	bl	8005522 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064cc:	2110      	movs	r1, #16
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff f884 	bl	80055dc <USB_FlushTxFifo>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff f8ae 	bl	8005640 <USB_FlushRxFifo>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	e01f      	b.n	8006534 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800650a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006512:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800651a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006528:	461a      	mov	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	3301      	adds	r3, #1
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d9dc      	bls.n	80064f4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e034      	b.n	80065aa <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006556:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800655e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006566:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006574:	461a      	mov	r2, r3
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006586:	d80c      	bhi.n	80065a2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800659a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800659e:	d0ec      	beq.n	800657a <USB_StopHost+0xc8>
 80065a0:	e000      	b.n	80065a4 <USB_StopHost+0xf2>
        break;
 80065a2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	3301      	adds	r3, #1
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b0f      	cmp	r3, #15
 80065ae:	d9c7      	bls.n	8006540 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065b6:	461a      	mov	r2, r3
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f04f 32ff 	mov.w	r2, #4294967295
 80065c4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fe ff9a 	bl	8005500 <USB_EnableGlobalInt>

  return ret;
 80065cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065d6:	b590      	push	{r4, r7, lr}
 80065d8:	b089      	sub	sp, #36	@ 0x24
 80065da:	af04      	add	r7, sp, #16
 80065dc:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065de:	2301      	movs	r3, #1
 80065e0:	2202      	movs	r2, #2
 80065e2:	2102      	movs	r1, #2
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc86 	bl	8006ef6 <USBH_FindInterface>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2bff      	cmp	r3, #255	@ 0xff
 80065f2:	d002      	beq.n	80065fa <USBH_CDC_InterfaceInit+0x24>
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d901      	bls.n	80065fe <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	e13d      	b.n	800687a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fc5b 	bl	8006ebe <USBH_SelectInterface>
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006612:	2302      	movs	r3, #2
 8006614:	e131      	b.n	800687a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800661c:	2050      	movs	r0, #80	@ 0x50
 800661e:	f002 fd67 	bl	80090f0 <malloc>
 8006622:	4603      	mov	r3, r0
 8006624:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006636:	2302      	movs	r3, #2
 8006638:	e11f      	b.n	800687a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800663a:	2250      	movs	r2, #80	@ 0x50
 800663c:	2100      	movs	r1, #0
 800663e:	68b8      	ldr	r0, [r7, #8]
 8006640:	f002 fe14 	bl	800926c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	211a      	movs	r1, #26
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	4413      	add	r3, r2
 8006650:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	b25b      	sxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	da15      	bge.n	8006688 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	211a      	movs	r1, #26
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	4413      	add	r3, r2
 8006668:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	211a      	movs	r1, #26
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	4413      	add	r3, r2
 800667e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 ffbf 	bl	8008612 <USBH_AllocPipe>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	7819      	ldrb	r1, [r3, #0]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	7858      	ldrb	r0, [r3, #1]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	8952      	ldrh	r2, [r2, #10]
 80066b4:	9202      	str	r2, [sp, #8]
 80066b6:	2203      	movs	r2, #3
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4623      	mov	r3, r4
 80066be:	4602      	mov	r2, r0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 ff77 	bl	80085b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f002 fc88 	bl	8008fe4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066d4:	2300      	movs	r3, #0
 80066d6:	2200      	movs	r2, #0
 80066d8:	210a      	movs	r1, #10
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fc0b 	bl	8006ef6 <USBH_FindInterface>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	2bff      	cmp	r3, #255	@ 0xff
 80066e8:	d002      	beq.n	80066f0 <USBH_CDC_InterfaceInit+0x11a>
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d901      	bls.n	80066f4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066f0:	2302      	movs	r3, #2
 80066f2:	e0c2      	b.n	800687a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	211a      	movs	r1, #26
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b25b      	sxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	da16      	bge.n	800673a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	211a      	movs	r1, #26
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	4413      	add	r3, r2
 8006718:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800671c:	781a      	ldrb	r2, [r3, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	211a      	movs	r1, #26
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	4413      	add	r3, r2
 800672e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006732:	881a      	ldrh	r2, [r3, #0]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	835a      	strh	r2, [r3, #26]
 8006738:	e015      	b.n	8006766 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	211a      	movs	r1, #26
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	4413      	add	r3, r2
 8006746:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	211a      	movs	r1, #26
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	4413      	add	r3, r2
 800675c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006760:	881a      	ldrh	r2, [r3, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	211a      	movs	r1, #26
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	4413      	add	r3, r2
 8006772:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	b25b      	sxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	da16      	bge.n	80067ac <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	211a      	movs	r1, #26
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	4413      	add	r3, r2
 800678a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800678e:	781a      	ldrb	r2, [r3, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	211a      	movs	r1, #26
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	835a      	strh	r2, [r3, #26]
 80067aa:	e015      	b.n	80067d8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	211a      	movs	r1, #26
 80067b2:	fb01 f303 	mul.w	r3, r1, r3
 80067b6:	4413      	add	r3, r2
 80067b8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	211a      	movs	r1, #26
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80067d2:	881a      	ldrh	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	7b9b      	ldrb	r3, [r3, #14]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 ff17 	bl	8008612 <USBH_AllocPipe>
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	7bdb      	ldrb	r3, [r3, #15]
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 ff0d 	bl	8008612 <USBH_AllocPipe>
 80067f8:	4603      	mov	r3, r0
 80067fa:	461a      	mov	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	7b59      	ldrb	r1, [r3, #13]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	7b98      	ldrb	r0, [r3, #14]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	8b12      	ldrh	r2, [r2, #24]
 8006818:	9202      	str	r2, [sp, #8]
 800681a:	2202      	movs	r2, #2
 800681c:	9201      	str	r2, [sp, #4]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	4623      	mov	r3, r4
 8006822:	4602      	mov	r2, r0
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fec5 	bl	80085b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	7b19      	ldrb	r1, [r3, #12]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	7bd8      	ldrb	r0, [r3, #15]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	8b52      	ldrh	r2, [r2, #26]
 8006842:	9202      	str	r2, [sp, #8]
 8006844:	2202      	movs	r2, #2
 8006846:	9201      	str	r2, [sp, #4]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4623      	mov	r3, r4
 800684c:	4602      	mov	r2, r0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 feb0 	bl	80085b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	7b5b      	ldrb	r3, [r3, #13]
 8006860:	2200      	movs	r2, #0
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f002 fbbd 	bl	8008fe4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	7b1b      	ldrb	r3, [r3, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f002 fbb6 	bl	8008fe4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	bd90      	pop	{r4, r7, pc}

08006882 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00e      	beq.n	80068ba <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 fea5 	bl	80085f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fed0 	bl	8008654 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7b1b      	ldrb	r3, [r3, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00e      	beq.n	80068e0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	7b1b      	ldrb	r3, [r3, #12]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fe92 	bl	80085f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	7b1b      	ldrb	r3, [r3, #12]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 febd 	bl	8008654 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	7b5b      	ldrb	r3, [r3, #13]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00e      	beq.n	8006906 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	7b5b      	ldrb	r3, [r3, #13]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 fe7f 	bl	80085f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	7b5b      	ldrb	r3, [r3, #13]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 feaa 	bl	8008654 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4618      	mov	r0, r3
 800691c:	f002 fbf0 	bl	8009100 <free>
    phost->pActiveClass->pData = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006926:	2200      	movs	r2, #0
 8006928:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3340      	adds	r3, #64	@ 0x40
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f8b2 	bl	8006ab6 <GetLineCoding>
 8006952:	4603      	mov	r3, r0
 8006954:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006956:	7afb      	ldrb	r3, [r7, #11]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006962:	2102      	movs	r1, #2
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006968:	7afb      	ldrb	r3, [r7, #11]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006994:	2b04      	cmp	r3, #4
 8006996:	d877      	bhi.n	8006a88 <USBH_CDC_Process+0x114>
 8006998:	a201      	add	r2, pc, #4	@ (adr r2, 80069a0 <USBH_CDC_Process+0x2c>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069b5 	.word	0x080069b5
 80069a4:	080069bb 	.word	0x080069bb
 80069a8:	080069eb 	.word	0x080069eb
 80069ac:	08006a5f 	.word	0x08006a5f
 80069b0:	08006a6d 	.word	0x08006a6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e06d      	b.n	8006a96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f897 	bl	8006af4 <SetLineCoding>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069d8:	e058      	b.n	8006a8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d055      	beq.n	8006a8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2204      	movs	r2, #4
 80069e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80069e8:	e050      	b.n	8006a8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	3340      	adds	r3, #64	@ 0x40
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f860 	bl	8006ab6 <GetLineCoding>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d126      	bne.n	8006a4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a12:	791b      	ldrb	r3, [r3, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d13b      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d133      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d12b      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d124      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f958 	bl	8006cfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a4c:	e020      	b.n	8006a90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d01d      	beq.n	8006a90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2204      	movs	r2, #4
 8006a58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006a5c:	e018      	b.n	8006a90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f867 	bl	8006b32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8da 	bl	8006c1e <CDC_ProcessReception>
      break;
 8006a6a:	e014      	b.n	8006a96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 f81a 	bl	8007aa8 <USBH_ClrFeature>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006a86:	e005      	b.n	8006a94 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a88:	bf00      	nop
 8006a8a:	e004      	b.n	8006a96 <USBH_CDC_Process+0x122>
      break;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <USBH_CDC_Process+0x122>
      break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <USBH_CDC_Process+0x122>
      break;
 8006a94:	bf00      	nop

  }

  return status;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	22a1      	movs	r2, #161	@ 0xa1
 8006ac4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2221      	movs	r2, #33	@ 0x21
 8006aca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2207      	movs	r2, #7
 8006adc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fb14 	bl	8008112 <USBH_CtlReq>
 8006aea:	4603      	mov	r3, r0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2221      	movs	r2, #33	@ 0x21
 8006b02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2207      	movs	r2, #7
 8006b1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2207      	movs	r2, #7
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 faf5 	bl	8008112 <USBH_CtlReq>
 8006b28:	4603      	mov	r3, r0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af02      	add	r7, sp, #8
 8006b38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d002      	beq.n	8006b58 <CDC_ProcessTransmission+0x26>
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d023      	beq.n	8006b9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b56:	e05e      	b.n	8006c16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	8b12      	ldrh	r2, [r2, #24]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d90b      	bls.n	8006b7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	69d9      	ldr	r1, [r3, #28]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8b1a      	ldrh	r2, [r3, #24]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7b5b      	ldrb	r3, [r3, #13]
 8006b70:	2001      	movs	r0, #1
 8006b72:	9000      	str	r0, [sp, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 fcda 	bl	800852e <USBH_BulkSendData>
 8006b7a:	e00b      	b.n	8006b94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	7b5b      	ldrb	r3, [r3, #13]
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	9000      	str	r0, [sp, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fccd 	bl	800852e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006b9c:	e03b      	b.n	8006c16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	7b5b      	ldrb	r3, [r3, #13]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 f9f3 	bl	8008f90 <USBH_LL_GetURBState>
 8006baa:	4603      	mov	r3, r0
 8006bac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d128      	bne.n	8006c06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	8b12      	ldrh	r2, [r2, #24]
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d90e      	bls.n	8006bde <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	8b12      	ldrh	r2, [r2, #24]
 8006bc8:	1a9a      	subs	r2, r3, r2
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	8b12      	ldrh	r2, [r2, #24]
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	61da      	str	r2, [r3, #28]
 8006bdc:	e002      	b.n	8006be4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006bf4:	e00e      	b.n	8006c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f868 	bl	8006cd4 <USBH_CDC_TransmitCallback>
      break;
 8006c04:	e006      	b.n	8006c14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d103      	bne.n	8006c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006c14:	bf00      	nop
  }
}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c30:	2300      	movs	r3, #0
 8006c32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d002      	beq.n	8006c44 <CDC_ProcessReception+0x26>
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d00e      	beq.n	8006c60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c42:	e043      	b.n	8006ccc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	6a19      	ldr	r1, [r3, #32]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	8b5a      	ldrh	r2, [r3, #26]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	7b1b      	ldrb	r3, [r3, #12]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fc91 	bl	8008578 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006c5e:	e035      	b.n	8006ccc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	7b1b      	ldrb	r3, [r3, #12]
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f002 f992 	bl	8008f90 <USBH_LL_GetURBState>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c70:	7cfb      	ldrb	r3, [r7, #19]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d129      	bne.n	8006cca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	7b1b      	ldrb	r3, [r3, #12]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f002 f8f5 	bl	8008e6c <USBH_LL_GetLastXferSize>
 8006c82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d016      	beq.n	8006cbc <CDC_ProcessReception+0x9e>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	8b5b      	ldrh	r3, [r3, #26]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d910      	bls.n	8006cbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1ad2      	subs	r2, r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a1a      	ldr	r2, [r3, #32]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	441a      	add	r2, r3
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006cba:	e006      	b.n	8006cca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f80f 	bl	8006ce8 <USBH_CDC_ReceiveCallback>
      break;
 8006cca:	bf00      	nop
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d24:	2302      	movs	r3, #2
 8006d26:	e029      	b.n	8006d7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	79fa      	ldrb	r2, [r7, #7]
 8006d2c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f81f 	bl	8006d84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f001 ffc5 	bl	8008d04 <USBH_LL_Init>

  return USBH_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e009      	b.n	8006daa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	33e0      	adds	r3, #224	@ 0xe0
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	2200      	movs	r2, #0
 8006da2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b0f      	cmp	r3, #15
 8006dae:	d9f2      	bls.n	8006d96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e009      	b.n	8006dca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd0:	d3f1      	bcc.n	8006db6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2240      	movs	r2, #64	@ 0x40
 8006df6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	331c      	adds	r3, #28
 8006e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e26:	2100      	movs	r1, #0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f002 fa1f 	bl	800926c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f002 fa16 	bl	800926c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006e46:	2212      	movs	r2, #18
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f002 fa0e 	bl	800926c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006e56:	223e      	movs	r2, #62	@ 0x3e
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f002 fa06 	bl	800926c <memset>

  return USBH_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d016      	beq.n	8006eac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10e      	bne.n	8006ea6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e8e:	1c59      	adds	r1, r3, #1
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	33de      	adds	r3, #222	@ 0xde
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e004      	b.n	8006eb0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	e001      	b.n	8006eb0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d204      	bcs.n	8006ee4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006ee2:	e001      	b.n	8006ee8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b087      	sub	sp, #28
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	4608      	mov	r0, r1
 8006f00:	4611      	mov	r1, r2
 8006f02:	461a      	mov	r2, r3
 8006f04:	4603      	mov	r3, r0
 8006f06:	70fb      	strb	r3, [r7, #3]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70bb      	strb	r3, [r7, #2]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006f1e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f20:	e025      	b.n	8006f6e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	221a      	movs	r2, #26
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	3302      	adds	r3, #2
 8006f32:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	795b      	ldrb	r3, [r3, #5]
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d002      	beq.n	8006f44 <USBH_FindInterface+0x4e>
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	2bff      	cmp	r3, #255	@ 0xff
 8006f42:	d111      	bne.n	8006f68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f48:	78ba      	ldrb	r2, [r7, #2]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d002      	beq.n	8006f54 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f4e:	78bb      	ldrb	r3, [r7, #2]
 8006f50:	2bff      	cmp	r3, #255	@ 0xff
 8006f52:	d109      	bne.n	8006f68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f58:	787a      	ldrb	r2, [r7, #1]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d002      	beq.n	8006f64 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f5e:	787b      	ldrb	r3, [r7, #1]
 8006f60:	2bff      	cmp	r3, #255	@ 0xff
 8006f62:	d101      	bne.n	8006f68 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	e006      	b.n	8006f76 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d9d6      	bls.n	8006f22 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f74:	23ff      	movs	r3, #255	@ 0xff
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fef6 	bl	8008d7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f90:	2101      	movs	r1, #1
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 f80f 	bl	8008fb6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fac:	2302      	movs	r3, #2
 8006fae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d102      	bne.n	8006fc6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b0b      	cmp	r3, #11
 8006fce:	f200 81bb 	bhi.w	8007348 <USBH_Process+0x3a4>
 8006fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <USBH_Process+0x34>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007009 	.word	0x08007009
 8006fdc:	0800703b 	.word	0x0800703b
 8006fe0:	080070a3 	.word	0x080070a3
 8006fe4:	080072e3 	.word	0x080072e3
 8006fe8:	08007349 	.word	0x08007349
 8006fec:	08007143 	.word	0x08007143
 8006ff0:	08007289 	.word	0x08007289
 8006ff4:	08007179 	.word	0x08007179
 8006ff8:	08007199 	.word	0x08007199
 8006ffc:	080071b7 	.word	0x080071b7
 8007000:	080071fb 	.word	0x080071fb
 8007004:	080072cb 	.word	0x080072cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 819b 	beq.w	800734c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800701c:	20c8      	movs	r0, #200	@ 0xc8
 800701e:	f002 f814 	bl	800904a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 ff07 	bl	8008e36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007038:	e188      	b.n	800734c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007040:	2b01      	cmp	r3, #1
 8007042:	d107      	bne.n	8007054 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007052:	e18a      	b.n	800736a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800705a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800705e:	d914      	bls.n	800708a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007066:	3301      	adds	r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007076:	2b03      	cmp	r3, #3
 8007078:	d903      	bls.n	8007082 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	220d      	movs	r2, #13
 800707e:	701a      	strb	r2, [r3, #0]
      break;
 8007080:	e173      	b.n	800736a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
      break;
 8007088:	e16f      	b.n	800736a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007090:	f103 020a 	add.w	r2, r3, #10
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800709a:	200a      	movs	r0, #10
 800709c:	f001 ffd5 	bl	800904a <USBH_Delay>
      break;
 80070a0:	e163      	b.n	800736a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070b2:	2104      	movs	r1, #4
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070b8:	2064      	movs	r0, #100	@ 0x64
 80070ba:	f001 ffc6 	bl	800904a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fe92 	bl	8008de8 <USBH_LL_GetSpeed>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2205      	movs	r2, #5
 80070d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fa9b 	bl	8008612 <USBH_AllocPipe>
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070e4:	2180      	movs	r1, #128	@ 0x80
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fa93 	bl	8008612 <USBH_AllocPipe>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7919      	ldrb	r1, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007108:	9202      	str	r2, [sp, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	9201      	str	r2, [sp, #4]
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	4603      	mov	r3, r0
 8007112:	2280      	movs	r2, #128	@ 0x80
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fa4d 	bl	80085b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7959      	ldrb	r1, [r3, #5]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800712e:	9202      	str	r2, [sp, #8]
 8007130:	2200      	movs	r2, #0
 8007132:	9201      	str	r2, [sp, #4]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	4603      	mov	r3, r0
 8007138:	2200      	movs	r2, #0
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 fa3a 	bl	80085b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007140:	e113      	b.n	800736a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f916 	bl	8007374 <USBH_HandleEnum>
 8007148:	4603      	mov	r3, r0
 800714a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	f040 80fd 	bne.w	8007350 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007164:	2b01      	cmp	r3, #1
 8007166:	d103      	bne.n	8007170 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2208      	movs	r2, #8
 800716c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800716e:	e0ef      	b.n	8007350 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2207      	movs	r2, #7
 8007174:	701a      	strb	r2, [r3, #0]
      break;
 8007176:	e0eb      	b.n	8007350 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80e8 	beq.w	8007354 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2208      	movs	r2, #8
 8007194:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007196:	e0dd      	b.n	8007354 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fc3a 	bl	8007a1a <USBH_SetCfg>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f040 80d5 	bne.w	8007358 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2209      	movs	r2, #9
 80071b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071b4:	e0d0      	b.n	8007358 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d016      	beq.n	80071f2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80071c4:	2101      	movs	r1, #1
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fc4a 	bl	8007a60 <USBH_SetFeature>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220a      	movs	r2, #10
 80071dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071de:	e0bd      	b.n	800735c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	f040 80b9 	bne.w	800735c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220a      	movs	r2, #10
 80071ee:	701a      	strb	r2, [r3, #0]
      break;
 80071f0:	e0b4      	b.n	800735c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	220a      	movs	r2, #10
 80071f6:	701a      	strb	r2, [r3, #0]
      break;
 80071f8:	e0b0      	b.n	800735c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80ad 	beq.w	8007360 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
 8007212:	e016      	b.n	8007242 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007214:	7bfa      	ldrb	r2, [r7, #15]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	32de      	adds	r2, #222	@ 0xde
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	791a      	ldrb	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007226:	429a      	cmp	r2, r3
 8007228:	d108      	bne.n	800723c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800722a:	7bfa      	ldrb	r2, [r7, #15]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	32de      	adds	r2, #222	@ 0xde
 8007230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800723a:	e005      	b.n	8007248 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	3301      	adds	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0e5      	beq.n	8007214 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2206      	movs	r2, #6
 8007268:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007270:	2103      	movs	r1, #3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007276:	e073      	b.n	8007360 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	220d      	movs	r2, #13
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e06f      	b.n	8007360 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220d      	movs	r2, #13
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e06b      	b.n	8007360 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d017      	beq.n	80072c2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220b      	movs	r2, #11
 80072ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072b0:	e058      	b.n	8007364 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d154      	bne.n	8007364 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220d      	movs	r2, #13
 80072be:	701a      	strb	r2, [r3, #0]
      break;
 80072c0:	e050      	b.n	8007364 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e04c      	b.n	8007364 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d049      	beq.n	8007368 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
      }
      break;
 80072e0:	e042      	b.n	8007368 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fd4a 	bl	8006d84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800731e:	2105      	movs	r1, #5
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d107      	bne.n	8007340 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff fe22 	bl	8006f82 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733e:	e014      	b.n	800736a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fd1b 	bl	8008d7c <USBH_LL_Start>
      break;
 8007346:	e010      	b.n	800736a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007348:	bf00      	nop
 800734a:	e00e      	b.n	800736a <USBH_Process+0x3c6>
      break;
 800734c:	bf00      	nop
 800734e:	e00c      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007350:	bf00      	nop
 8007352:	e00a      	b.n	800736a <USBH_Process+0x3c6>
    break;
 8007354:	bf00      	nop
 8007356:	e008      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007358:	bf00      	nop
 800735a:	e006      	b.n	800736a <USBH_Process+0x3c6>
      break;
 800735c:	bf00      	nop
 800735e:	e004      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007368:	bf00      	nop
  }
  return USBH_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af04      	add	r7, sp, #16
 800737a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007380:	2301      	movs	r3, #1
 8007382:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b07      	cmp	r3, #7
 800738a:	f200 81bd 	bhi.w	8007708 <USBH_HandleEnum+0x394>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <USBH_HandleEnum+0x20>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073b5 	.word	0x080073b5
 8007398:	0800746f 	.word	0x0800746f
 800739c:	080074d9 	.word	0x080074d9
 80073a0:	08007563 	.word	0x08007563
 80073a4:	080075cd 	.word	0x080075cd
 80073a8:	0800763d 	.word	0x0800763d
 80073ac:	08007683 	.word	0x08007683
 80073b0:	080076c9 	.word	0x080076c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80073b4:	2108      	movs	r1, #8
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa4c 	bl	8007854 <USBH_Get_DevDesc>
 80073bc:	4603      	mov	r3, r0
 80073be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d12e      	bne.n	8007424 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7919      	ldrb	r1, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073ea:	9202      	str	r2, [sp, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	9201      	str	r2, [sp, #4]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	4603      	mov	r3, r0
 80073f4:	2280      	movs	r2, #128	@ 0x80
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 f8dc 	bl	80085b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	7959      	ldrb	r1, [r3, #5]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007410:	9202      	str	r2, [sp, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	9201      	str	r2, [sp, #4]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4603      	mov	r3, r0
 800741a:	2200      	movs	r2, #0
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 f8c9 	bl	80085b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007422:	e173      	b.n	800770c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b03      	cmp	r3, #3
 8007428:	f040 8170 	bne.w	800770c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007432:	3301      	adds	r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007442:	2b03      	cmp	r3, #3
 8007444:	d903      	bls.n	800744e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	220d      	movs	r2, #13
 800744a:	701a      	strb	r2, [r3, #0]
      break;
 800744c:	e15e      	b.n	800770c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f8fd 	bl	8008654 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	791b      	ldrb	r3, [r3, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 f8f7 	bl	8008654 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]
      break;
 800746c:	e14e      	b.n	800770c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800746e:	2112      	movs	r1, #18
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f9ef 	bl	8007854 <USBH_Get_DevDesc>
 8007476:	4603      	mov	r3, r0
 8007478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007486:	e143      	b.n	8007710 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b03      	cmp	r3, #3
 800748c:	f040 8140 	bne.w	8007710 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007496:	3301      	adds	r3, #1
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d903      	bls.n	80074b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	220d      	movs	r2, #13
 80074ae:	701a      	strb	r2, [r3, #0]
      break;
 80074b0:	e12e      	b.n	8007710 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f8cb 	bl	8008654 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	791b      	ldrb	r3, [r3, #4]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f8c5 	bl	8008654 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
      break;
 80074d6:	e11b      	b.n	8007710 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80074d8:	2101      	movs	r1, #1
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa79 	bl	80079d2 <USBH_SetAddress>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d130      	bne.n	800754c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80074ea:	2002      	movs	r0, #2
 80074ec:	f001 fdad 	bl	800904a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2203      	movs	r2, #3
 80074fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7919      	ldrb	r1, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	4603      	mov	r3, r0
 800751c:	2280      	movs	r2, #128	@ 0x80
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f848 	bl	80085b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7959      	ldrb	r1, [r3, #5]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007538:	9202      	str	r2, [sp, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	9201      	str	r2, [sp, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4603      	mov	r3, r0
 8007542:	2200      	movs	r2, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 f835 	bl	80085b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800754a:	e0e3      	b.n	8007714 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b03      	cmp	r3, #3
 8007550:	f040 80e0 	bne.w	8007714 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	220d      	movs	r2, #13
 8007558:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	705a      	strb	r2, [r3, #1]
      break;
 8007560:	e0d8      	b.n	8007714 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007562:	2109      	movs	r1, #9
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f9a1 	bl	80078ac <USBH_Get_CfgDesc>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800757a:	e0cd      	b.n	8007718 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b03      	cmp	r3, #3
 8007580:	f040 80ca 	bne.w	8007718 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800758a:	3301      	adds	r3, #1
 800758c:	b2da      	uxtb	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800759a:	2b03      	cmp	r3, #3
 800759c:	d903      	bls.n	80075a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	220d      	movs	r2, #13
 80075a2:	701a      	strb	r2, [r3, #0]
      break;
 80075a4:	e0b8      	b.n	8007718 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	795b      	ldrb	r3, [r3, #5]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f851 	bl	8008654 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	791b      	ldrb	r3, [r3, #4]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 f84b 	bl	8008654 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
      break;
 80075ca:	e0a5      	b.n	8007718 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f969 	bl	80078ac <USBH_Get_CfgDesc>
 80075da:	4603      	mov	r3, r0
 80075dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2205      	movs	r2, #5
 80075e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075ea:	e097      	b.n	800771c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f040 8094 	bne.w	800771c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800760a:	2b03      	cmp	r3, #3
 800760c:	d903      	bls.n	8007616 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	220d      	movs	r2, #13
 8007612:	701a      	strb	r2, [r3, #0]
      break;
 8007614:	e082      	b.n	800771c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 f819 	bl	8008654 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 f813 	bl	8008654 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
      break;
 800763a:	e06f      	b.n	800771c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007642:	2b00      	cmp	r3, #0
 8007644:	d019      	beq.n	800767a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007652:	23ff      	movs	r3, #255	@ 0xff
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f953 	bl	8007900 <USBH_Get_StringDesc>
 800765a:	4603      	mov	r3, r0
 800765c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d103      	bne.n	800766c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2206      	movs	r2, #6
 8007668:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800766a:	e059      	b.n	8007720 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d156      	bne.n	8007720 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2206      	movs	r2, #6
 8007676:	705a      	strb	r2, [r3, #1]
      break;
 8007678:	e052      	b.n	8007720 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2206      	movs	r2, #6
 800767e:	705a      	strb	r2, [r3, #1]
      break;
 8007680:	e04e      	b.n	8007720 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007688:	2b00      	cmp	r3, #0
 800768a:	d019      	beq.n	80076c0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007698:	23ff      	movs	r3, #255	@ 0xff
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f930 	bl	8007900 <USBH_Get_StringDesc>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2207      	movs	r2, #7
 80076ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076b0:	e038      	b.n	8007724 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d135      	bne.n	8007724 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2207      	movs	r2, #7
 80076bc:	705a      	strb	r2, [r3, #1]
      break;
 80076be:	e031      	b.n	8007724 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2207      	movs	r2, #7
 80076c4:	705a      	strb	r2, [r3, #1]
      break;
 80076c6:	e02d      	b.n	8007724 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076de:	23ff      	movs	r3, #255	@ 0xff
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f90d 	bl	8007900 <USBH_Get_StringDesc>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076f4:	e018      	b.n	8007728 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d115      	bne.n	8007728 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007700:	e012      	b.n	8007728 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
      break;
 8007706:	e00f      	b.n	8007728 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007708:	bf00      	nop
 800770a:	e00e      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 800770c:	bf00      	nop
 800770e:	e00c      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007710:	bf00      	nop
 8007712:	e00a      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007718:	bf00      	nop
 800771a:	e006      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 800771c:	bf00      	nop
 800771e:	e004      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007728:	bf00      	nop
  }
  return Status;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f804 	bl	8007776 <USBH_HandleSof>
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b0b      	cmp	r3, #11
 8007786:	d10a      	bne.n	800779e <USBH_HandleSof+0x28>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
  }
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80077b6:	bf00      	nop
}
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80077d2:	bf00      	nop
}
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fac0 	bl	8008db2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 ff0b 	bl	8008654 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	795b      	ldrb	r3, [r3, #5]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 ff05 	bl	8008654 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af02      	add	r7, sp, #8
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007866:	d901      	bls.n	800786c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007868:	2303      	movs	r3, #3
 800786a:	e01b      	b.n	80078a4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007872:	887b      	ldrh	r3, [r7, #2]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	4613      	mov	r3, r2
 8007878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800787c:	2100      	movs	r1, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f872 	bl	8007968 <USBH_GetDescriptor>
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007894:	887a      	ldrh	r2, [r7, #2]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f929 	bl	8007af0 <USBH_ParseDevDesc>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	331c      	adds	r3, #28
 80078bc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c4:	d901      	bls.n	80078ca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e016      	b.n	80078f8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80078ca:	887b      	ldrh	r3, [r7, #2]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078d4:	2100      	movs	r1, #0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f846 	bl	8007968 <USBH_GetDescriptor>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d107      	bne.n	80078f6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80078e6:	887b      	ldrh	r3, [r7, #2]
 80078e8:	461a      	mov	r2, r3
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9af 	bl	8007c50 <USBH_ParseCfgDesc>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	461a      	mov	r2, r3
 800790c:	460b      	mov	r3, r1
 800790e:	72fb      	strb	r3, [r7, #11]
 8007910:	4613      	mov	r3, r2
 8007912:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007914:	893b      	ldrh	r3, [r7, #8]
 8007916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800791a:	d802      	bhi.n	8007922 <USBH_Get_StringDesc+0x22>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007922:	2303      	movs	r3, #3
 8007924:	e01c      	b.n	8007960 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800792e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007936:	893b      	ldrh	r3, [r7, #8]
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	460b      	mov	r3, r1
 800793c:	2100      	movs	r1, #0
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f812 	bl	8007968 <USBH_GetDescriptor>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d107      	bne.n	800795e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007954:	893a      	ldrh	r2, [r7, #8]
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fb8d 	bl	8008078 <USBH_ParseStringDesc>
  }

  return status;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	607b      	str	r3, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	72fb      	strb	r3, [r7, #11]
 8007976:	4613      	mov	r3, r2
 8007978:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	789b      	ldrb	r3, [r3, #2]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d11c      	bne.n	80079bc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007988:	b2da      	uxtb	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2206      	movs	r2, #6
 8007992:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	893a      	ldrh	r2, [r7, #8]
 8007998:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800799a:	893b      	ldrh	r3, [r7, #8]
 800799c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80079a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079a4:	d104      	bne.n	80079b0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f240 4209 	movw	r2, #1033	@ 0x409
 80079ac:	829a      	strh	r2, [r3, #20]
 80079ae:	e002      	b.n	80079b6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8b3a      	ldrh	r2, [r7, #24]
 80079ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80079bc:	8b3b      	ldrh	r3, [r7, #24]
 80079be:	461a      	mov	r2, r3
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fba5 	bl	8008112 <USBH_CtlReq>
 80079c8:	4603      	mov	r3, r0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	789b      	ldrb	r3, [r3, #2]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d10f      	bne.n	8007a06 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2205      	movs	r2, #5
 80079f0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a06:	2200      	movs	r2, #0
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fb81 	bl	8008112 <USBH_CtlReq>
 8007a10:	4603      	mov	r3, r0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	789b      	ldrb	r3, [r3, #2]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d10e      	bne.n	8007a4c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2209      	movs	r2, #9
 8007a38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	887a      	ldrh	r2, [r7, #2]
 8007a3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fb5e 	bl	8008112 <USBH_CtlReq>
 8007a56:	4603      	mov	r3, r0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	789b      	ldrb	r3, [r3, #2]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d10f      	bne.n	8007a94 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a94:	2200      	movs	r2, #0
 8007a96:	2100      	movs	r1, #0
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fb3a 	bl	8008112 <USBH_CtlReq>
 8007a9e:	4603      	mov	r3, r0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	789b      	ldrb	r3, [r3, #2]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d10f      	bne.n	8007adc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007adc:	2200      	movs	r2, #0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fb16 	bl	8008112 <USBH_CtlReq>
 8007ae6:	4603      	mov	r3, r0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b04:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007b10:	2302      	movs	r3, #2
 8007b12:	e094      	b.n	8007c3e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	785a      	ldrb	r2, [r3, #1]
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	3302      	adds	r3, #2
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	3303      	adds	r3, #3
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4313      	orrs	r3, r2
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	791a      	ldrb	r2, [r3, #4]
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	795a      	ldrb	r2, [r3, #5]
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	799a      	ldrb	r2, [r3, #6]
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	79da      	ldrb	r2, [r3, #7]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d004      	beq.n	8007b72 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d11b      	bne.n	8007baa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	79db      	ldrb	r3, [r3, #7]
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	dc0f      	bgt.n	8007b9a <USBH_ParseDevDesc+0xaa>
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	db0f      	blt.n	8007b9e <USBH_ParseDevDesc+0xae>
 8007b7e:	3b08      	subs	r3, #8
 8007b80:	4a32      	ldr	r2, [pc, #200]	@ (8007c4c <USBH_ParseDevDesc+0x15c>)
 8007b82:	fa22 f303 	lsr.w	r3, r2, r3
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bf14      	ite	ne
 8007b8e:	2301      	movne	r3, #1
 8007b90:	2300      	moveq	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d106      	bne.n	8007ba6 <USBH_ParseDevDesc+0xb6>
 8007b98:	e001      	b.n	8007b9e <USBH_ParseDevDesc+0xae>
 8007b9a:	2b40      	cmp	r3, #64	@ 0x40
 8007b9c:	d003      	beq.n	8007ba6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	71da      	strb	r2, [r3, #7]
        break;
 8007ba4:	e000      	b.n	8007ba8 <USBH_ParseDevDesc+0xb8>
        break;
 8007ba6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007ba8:	e00e      	b.n	8007bc8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d107      	bne.n	8007bc4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	79db      	ldrb	r3, [r3, #7]
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d005      	beq.n	8007bc8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	71da      	strb	r2, [r3, #7]
 8007bc2:	e001      	b.n	8007bc8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d936      	bls.n	8007c3c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	3309      	adds	r3, #9
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	330a      	adds	r3, #10
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	330b      	adds	r3, #11
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	330c      	adds	r3, #12
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	330d      	adds	r3, #13
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	4313      	orrs	r3, r2
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	7b9a      	ldrb	r2, [r3, #14]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	7bda      	ldrb	r2, [r3, #15]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	7c1a      	ldrb	r2, [r3, #16]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	7c5a      	ldrb	r2, [r3, #17]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	01000101 	.word	0x01000101

08007c50 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08c      	sub	sp, #48	@ 0x30
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c64:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e0da      	b.n	8007e38 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	785a      	ldrb	r2, [r3, #1]
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	3302      	adds	r3, #2
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	3303      	adds	r3, #3
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cb0:	bf28      	it	cs
 8007cb2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	791a      	ldrb	r2, [r3, #4]
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	795a      	ldrb	r2, [r3, #5]
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	799a      	ldrb	r2, [r3, #6]
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	79da      	ldrb	r2, [r3, #7]
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	7a1a      	ldrb	r2, [r3, #8]
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b09      	cmp	r3, #9
 8007cea:	d002      	beq.n	8007cf2 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	2209      	movs	r2, #9
 8007cf0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	2b09      	cmp	r3, #9
 8007cf6:	f240 809d 	bls.w	8007e34 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007cfa:	2309      	movs	r3, #9
 8007cfc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d02:	e081      	b.n	8007e08 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d04:	f107 0316 	add.w	r3, r7, #22
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d0c:	f000 f9e7 	bl	80080de <USBH_GetNextDesc>
 8007d10:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	785b      	ldrb	r3, [r3, #1]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d176      	bne.n	8007e08 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d002      	beq.n	8007d28 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d24:	2209      	movs	r2, #9
 8007d26:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d2c:	221a      	movs	r2, #26
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	3308      	adds	r3, #8
 8007d34:	6a3a      	ldr	r2, [r7, #32]
 8007d36:	4413      	add	r3, r2
 8007d38:	3302      	adds	r3, #2
 8007d3a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d3e:	69f8      	ldr	r0, [r7, #28]
 8007d40:	f000 f87e 	bl	8007e40 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d4e:	e043      	b.n	8007dd8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d50:	f107 0316 	add.w	r3, r7, #22
 8007d54:	4619      	mov	r1, r3
 8007d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d58:	f000 f9c1 	bl	80080de <USBH_GetNextDesc>
 8007d5c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d138      	bne.n	8007dd8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	795b      	ldrb	r3, [r3, #5]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d113      	bne.n	8007d96 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d003      	beq.n	8007d7e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	799b      	ldrb	r3, [r3, #6]
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d10b      	bne.n	8007d96 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	79db      	ldrb	r3, [r3, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <USBH_ParseCfgDesc+0x14e>
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	d007      	beq.n	8007d9e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	2209      	movs	r2, #9
 8007d92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d94:	e003      	b.n	8007d9e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	2207      	movs	r2, #7
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e000      	b.n	8007da0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d9e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007da4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007da8:	3201      	adds	r2, #1
 8007daa:	00d2      	lsls	r2, r2, #3
 8007dac:	211a      	movs	r1, #26
 8007dae:	fb01 f303 	mul.w	r3, r1, r3
 8007db2:	4413      	add	r3, r2
 8007db4:	3308      	adds	r3, #8
 8007db6:	6a3a      	ldr	r2, [r7, #32]
 8007db8:	4413      	add	r3, r2
 8007dba:	3304      	adds	r3, #4
 8007dbc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dc0:	69b9      	ldr	r1, [r7, #24]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f870 	bl	8007ea8 <USBH_ParseEPDesc>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007dce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	791b      	ldrb	r3, [r3, #4]
 8007ddc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d204      	bcs.n	8007dee <USBH_ParseCfgDesc+0x19e>
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	885a      	ldrh	r2, [r3, #2]
 8007de8:	8afb      	ldrh	r3, [r7, #22]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d8b0      	bhi.n	8007d50 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	791b      	ldrb	r3, [r3, #4]
 8007df2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d201      	bcs.n	8007dfe <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e01c      	b.n	8007e38 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e02:	3301      	adds	r3, #1
 8007e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d805      	bhi.n	8007e1c <USBH_ParseCfgDesc+0x1cc>
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	885a      	ldrh	r2, [r3, #2]
 8007e14:	8afb      	ldrh	r3, [r7, #22]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	f63f af74 	bhi.w	8007d04 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	791b      	ldrb	r3, [r3, #4]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	bf28      	it	cs
 8007e24:	2302      	movcs	r3, #2
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d201      	bcs.n	8007e34 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e001      	b.n	8007e38 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007e34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3730      	adds	r7, #48	@ 0x30
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	785a      	ldrb	r2, [r3, #1]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	789a      	ldrb	r2, [r3, #2]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	78da      	ldrb	r2, [r3, #3]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	bf28      	it	cs
 8007e74:	2302      	movcs	r3, #2
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	795a      	ldrb	r2, [r3, #5]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	799a      	ldrb	r2, [r3, #6]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	79da      	ldrb	r2, [r3, #7]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	7a1a      	ldrb	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	721a      	strb	r2, [r3, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	781a      	ldrb	r2, [r3, #0]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	785a      	ldrb	r2, [r3, #1]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	789a      	ldrb	r2, [r3, #2]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	78da      	ldrb	r2, [r3, #3]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3304      	adds	r3, #4
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3305      	adds	r3, #5
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	4313      	orrs	r3, r2
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	799a      	ldrb	r2, [r3, #6]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	889b      	ldrh	r3, [r3, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f0a:	d804      	bhi.n	8007f16 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f14:	d901      	bls.n	8007f1a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007f16:	2303      	movs	r3, #3
 8007f18:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d136      	bne.n	8007f92 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	78db      	ldrb	r3, [r3, #3]
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d108      	bne.n	8007f42 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	889b      	ldrh	r3, [r3, #4]
 8007f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f38:	f240 8097 	bls.w	800806a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	75fb      	strb	r3, [r7, #23]
 8007f40:	e093      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	78db      	ldrb	r3, [r3, #3]
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d107      	bne.n	8007f5e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	2b40      	cmp	r3, #64	@ 0x40
 8007f54:	f240 8089 	bls.w	800806a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	75fb      	strb	r3, [r7, #23]
 8007f5c:	e085      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	78db      	ldrb	r3, [r3, #3]
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d005      	beq.n	8007f76 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	78db      	ldrb	r3, [r3, #3]
 8007f6e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d10a      	bne.n	8007f8c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	799b      	ldrb	r3, [r3, #6]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <USBH_ParseEPDesc+0xde>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	799b      	ldrb	r3, [r3, #6]
 8007f82:	2b10      	cmp	r3, #16
 8007f84:	d970      	bls.n	8008068 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007f86:	2303      	movs	r3, #3
 8007f88:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f8a:	e06d      	b.n	8008068 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	75fb      	strb	r3, [r7, #23]
 8007f90:	e06b      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d13c      	bne.n	8008016 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	78db      	ldrb	r3, [r3, #3]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d005      	beq.n	8007fb4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	78db      	ldrb	r3, [r3, #3]
 8007fac:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d106      	bne.n	8007fc2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	889b      	ldrh	r3, [r3, #4]
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	d956      	bls.n	800806a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007fc0:	e053      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	78db      	ldrb	r3, [r3, #3]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d10e      	bne.n	8007fec <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	799b      	ldrb	r3, [r3, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007fda:	2b10      	cmp	r3, #16
 8007fdc:	d803      	bhi.n	8007fe6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007fe2:	2b40      	cmp	r3, #64	@ 0x40
 8007fe4:	d941      	bls.n	800806a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	75fb      	strb	r3, [r7, #23]
 8007fea:	e03e      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	78db      	ldrb	r3, [r3, #3]
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d10b      	bne.n	8008010 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	799b      	ldrb	r3, [r3, #6]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <USBH_ParseEPDesc+0x162>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	889b      	ldrh	r3, [r3, #4]
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008008:	d32f      	bcc.n	800806a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800800a:	2303      	movs	r3, #3
 800800c:	75fb      	strb	r3, [r7, #23]
 800800e:	e02c      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008010:	2303      	movs	r3, #3
 8008012:	75fb      	strb	r3, [r7, #23]
 8008014:	e029      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800801c:	2b02      	cmp	r3, #2
 800801e:	d120      	bne.n	8008062 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	78db      	ldrb	r3, [r3, #3]
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	889b      	ldrh	r3, [r3, #4]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d01a      	beq.n	800806a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008034:	2303      	movs	r3, #3
 8008036:	75fb      	strb	r3, [r7, #23]
 8008038:	e017      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	78db      	ldrb	r3, [r3, #3]
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b03      	cmp	r3, #3
 8008044:	d10a      	bne.n	800805c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	799b      	ldrb	r3, [r3, #6]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <USBH_ParseEPDesc+0x1ae>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	889b      	ldrh	r3, [r3, #4]
 8008052:	2b08      	cmp	r3, #8
 8008054:	d909      	bls.n	800806a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008056:	2303      	movs	r3, #3
 8008058:	75fb      	strb	r3, [r7, #23]
 800805a:	e006      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800805c:	2303      	movs	r3, #3
 800805e:	75fb      	strb	r3, [r7, #23]
 8008060:	e003      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008062:	2303      	movs	r3, #3
 8008064:	75fb      	strb	r3, [r7, #23]
 8008066:	e000      	b.n	800806a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008068:	bf00      	nop
  }

  return status;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
}
 800806c:	4618      	mov	r0, r3
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	4613      	mov	r3, r2
 8008084:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b03      	cmp	r3, #3
 800808e:	d120      	bne.n	80080d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	1e9a      	subs	r2, r3, #2
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	4293      	cmp	r3, r2
 800809a:	bf28      	it	cs
 800809c:	4613      	movcs	r3, r2
 800809e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3302      	adds	r3, #2
 80080a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080a6:	2300      	movs	r3, #0
 80080a8:	82fb      	strh	r3, [r7, #22]
 80080aa:	e00b      	b.n	80080c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080ac:	8afb      	ldrh	r3, [r7, #22]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4413      	add	r3, r2
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80080be:	8afb      	ldrh	r3, [r7, #22]
 80080c0:	3302      	adds	r3, #2
 80080c2:	82fb      	strh	r3, [r7, #22]
 80080c4:	8afa      	ldrh	r2, [r7, #22]
 80080c6:	8abb      	ldrh	r3, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d3ef      	bcc.n	80080ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2200      	movs	r2, #0
 80080d0:	701a      	strb	r2, [r3, #0]
  }
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	7812      	ldrb	r2, [r2, #0]
 80080f0:	4413      	add	r3, r2
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008104:	68fb      	ldr	r3, [r7, #12]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	4613      	mov	r3, r2
 800811e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	789b      	ldrb	r3, [r3, #2]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d002      	beq.n	8008132 <USBH_CtlReq+0x20>
 800812c:	2b02      	cmp	r3, #2
 800812e:	d00f      	beq.n	8008150 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008130:	e027      	b.n	8008182 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	88fa      	ldrh	r2, [r7, #6]
 800813c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2202      	movs	r2, #2
 8008148:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
      break;
 800814e:	e018      	b.n	8008182 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f81b 	bl	800818c <USBH_HandleControl>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <USBH_CtlReq+0x54>
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	2b03      	cmp	r3, #3
 8008164:	d106      	bne.n	8008174 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	761a      	strb	r2, [r3, #24]
      break;
 8008172:	e005      	b.n	8008180 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d102      	bne.n	8008180 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	709a      	strb	r2, [r3, #2]
      break;
 8008180:	bf00      	nop
  }
  return status;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af02      	add	r7, sp, #8
 8008192:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008194:	2301      	movs	r3, #1
 8008196:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008198:	2300      	movs	r3, #0
 800819a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7e1b      	ldrb	r3, [r3, #24]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	2b0a      	cmp	r3, #10
 80081a4:	f200 8156 	bhi.w	8008454 <USBH_HandleControl+0x2c8>
 80081a8:	a201      	add	r2, pc, #4	@ (adr r2, 80081b0 <USBH_HandleControl+0x24>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081dd 	.word	0x080081dd
 80081b4:	080081f7 	.word	0x080081f7
 80081b8:	08008261 	.word	0x08008261
 80081bc:	08008287 	.word	0x08008287
 80081c0:	080082bf 	.word	0x080082bf
 80081c4:	080082e9 	.word	0x080082e9
 80081c8:	0800833b 	.word	0x0800833b
 80081cc:	0800835d 	.word	0x0800835d
 80081d0:	08008399 	.word	0x08008399
 80081d4:	080083bf 	.word	0x080083bf
 80081d8:	080083fd 	.word	0x080083fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f103 0110 	add.w	r1, r3, #16
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	795b      	ldrb	r3, [r3, #5]
 80081e6:	461a      	mov	r2, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f943 	bl	8008474 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2202      	movs	r2, #2
 80081f2:	761a      	strb	r2, [r3, #24]
      break;
 80081f4:	e139      	b.n	800846a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	795b      	ldrb	r3, [r3, #5]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fec7 	bl	8008f90 <USBH_LL_GetURBState>
 8008202:	4603      	mov	r3, r0
 8008204:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d11e      	bne.n	800824a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	7c1b      	ldrb	r3, [r3, #16]
 8008210:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008214:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8adb      	ldrh	r3, [r3, #22]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800821e:	7b7b      	ldrb	r3, [r7, #13]
 8008220:	2b80      	cmp	r3, #128	@ 0x80
 8008222:	d103      	bne.n	800822c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2203      	movs	r2, #3
 8008228:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800822a:	e115      	b.n	8008458 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2205      	movs	r2, #5
 8008230:	761a      	strb	r2, [r3, #24]
      break;
 8008232:	e111      	b.n	8008458 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008234:	7b7b      	ldrb	r3, [r7, #13]
 8008236:	2b80      	cmp	r3, #128	@ 0x80
 8008238:	d103      	bne.n	8008242 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2209      	movs	r2, #9
 800823e:	761a      	strb	r2, [r3, #24]
      break;
 8008240:	e10a      	b.n	8008458 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2207      	movs	r2, #7
 8008246:	761a      	strb	r2, [r3, #24]
      break;
 8008248:	e106      	b.n	8008458 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b04      	cmp	r3, #4
 800824e:	d003      	beq.n	8008258 <USBH_HandleControl+0xcc>
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b02      	cmp	r3, #2
 8008254:	f040 8100 	bne.w	8008458 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	220b      	movs	r2, #11
 800825c:	761a      	strb	r2, [r3, #24]
      break;
 800825e:	e0fb      	b.n	8008458 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008266:	b29a      	uxth	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6899      	ldr	r1, [r3, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	899a      	ldrh	r2, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	791b      	ldrb	r3, [r3, #4]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f93a 	bl	80084f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2204      	movs	r2, #4
 8008282:	761a      	strb	r2, [r3, #24]
      break;
 8008284:	e0f1      	b.n	800846a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	791b      	ldrb	r3, [r3, #4]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fe7f 	bl	8008f90 <USBH_LL_GetURBState>
 8008292:	4603      	mov	r3, r0
 8008294:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d102      	bne.n	80082a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2209      	movs	r2, #9
 80082a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b05      	cmp	r3, #5
 80082a6:	d102      	bne.n	80082ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082a8:	2303      	movs	r3, #3
 80082aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082ac:	e0d6      	b.n	800845c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	f040 80d3 	bne.w	800845c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	220b      	movs	r2, #11
 80082ba:	761a      	strb	r2, [r3, #24]
      break;
 80082bc:	e0ce      	b.n	800845c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6899      	ldr	r1, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	899a      	ldrh	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	795b      	ldrb	r3, [r3, #5]
 80082ca:	2001      	movs	r0, #1
 80082cc:	9000      	str	r0, [sp, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8ea 	bl	80084a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2206      	movs	r2, #6
 80082e4:	761a      	strb	r2, [r3, #24]
      break;
 80082e6:	e0c0      	b.n	800846a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	795b      	ldrb	r3, [r3, #5]
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fe4e 	bl	8008f90 <USBH_LL_GetURBState>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d103      	bne.n	8008306 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2207      	movs	r2, #7
 8008302:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008304:	e0ac      	b.n	8008460 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b05      	cmp	r3, #5
 800830a:	d105      	bne.n	8008318 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	220c      	movs	r2, #12
 8008310:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008312:	2303      	movs	r3, #3
 8008314:	73fb      	strb	r3, [r7, #15]
      break;
 8008316:	e0a3      	b.n	8008460 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d103      	bne.n	8008326 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2205      	movs	r2, #5
 8008322:	761a      	strb	r2, [r3, #24]
      break;
 8008324:	e09c      	b.n	8008460 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b04      	cmp	r3, #4
 800832a:	f040 8099 	bne.w	8008460 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	220b      	movs	r2, #11
 8008332:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	73fb      	strb	r3, [r7, #15]
      break;
 8008338:	e092      	b.n	8008460 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	791b      	ldrb	r3, [r3, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	2100      	movs	r1, #0
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f8d5 	bl	80084f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2208      	movs	r2, #8
 8008358:	761a      	strb	r2, [r3, #24]

      break;
 800835a:	e086      	b.n	800846a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	791b      	ldrb	r3, [r3, #4]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fe14 	bl	8008f90 <USBH_LL_GetURBState>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d105      	bne.n	800837e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	220d      	movs	r2, #13
 8008376:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800837c:	e072      	b.n	8008464 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d103      	bne.n	800838c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	220b      	movs	r2, #11
 8008388:	761a      	strb	r2, [r3, #24]
      break;
 800838a:	e06b      	b.n	8008464 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b05      	cmp	r3, #5
 8008390:	d168      	bne.n	8008464 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008392:	2303      	movs	r3, #3
 8008394:	73fb      	strb	r3, [r7, #15]
      break;
 8008396:	e065      	b.n	8008464 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	795b      	ldrb	r3, [r3, #5]
 800839c:	2201      	movs	r2, #1
 800839e:	9200      	str	r2, [sp, #0]
 80083a0:	2200      	movs	r2, #0
 80083a2:	2100      	movs	r1, #0
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f87f 	bl	80084a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220a      	movs	r2, #10
 80083ba:	761a      	strb	r2, [r3, #24]
      break;
 80083bc:	e055      	b.n	800846a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fde3 	bl	8008f90 <USBH_LL_GetURBState>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d105      	bne.n	80083e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	220d      	movs	r2, #13
 80083dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083de:	e043      	b.n	8008468 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d103      	bne.n	80083ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2209      	movs	r2, #9
 80083ea:	761a      	strb	r2, [r3, #24]
      break;
 80083ec:	e03c      	b.n	8008468 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d139      	bne.n	8008468 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	220b      	movs	r2, #11
 80083f8:	761a      	strb	r2, [r3, #24]
      break;
 80083fa:	e035      	b.n	8008468 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7e5b      	ldrb	r3, [r3, #25]
 8008400:	3301      	adds	r3, #1
 8008402:	b2da      	uxtb	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	765a      	strb	r2, [r3, #25]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	7e5b      	ldrb	r3, [r3, #25]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d806      	bhi.n	800841e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800841c:	e025      	b.n	800846a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008424:	2106      	movs	r1, #6
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	795b      	ldrb	r3, [r3, #5]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f90c 	bl	8008654 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	791b      	ldrb	r3, [r3, #4]
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f906 	bl	8008654 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800844e:	2302      	movs	r3, #2
 8008450:	73fb      	strb	r3, [r7, #15]
      break;
 8008452:	e00a      	b.n	800846a <USBH_HandleControl+0x2de>

    default:
      break;
 8008454:	bf00      	nop
 8008456:	e008      	b.n	800846a <USBH_HandleControl+0x2de>
      break;
 8008458:	bf00      	nop
 800845a:	e006      	b.n	800846a <USBH_HandleControl+0x2de>
      break;
 800845c:	bf00      	nop
 800845e:	e004      	b.n	800846a <USBH_HandleControl+0x2de>
      break;
 8008460:	bf00      	nop
 8008462:	e002      	b.n	800846a <USBH_HandleControl+0x2de>
      break;
 8008464:	bf00      	nop
 8008466:	e000      	b.n	800846a <USBH_HandleControl+0x2de>
      break;
 8008468:	bf00      	nop
  }

  return status;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af04      	add	r7, sp, #16
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008482:	79f9      	ldrb	r1, [r7, #7]
 8008484:	2300      	movs	r3, #0
 8008486:	9303      	str	r3, [sp, #12]
 8008488:	2308      	movs	r3, #8
 800848a:	9302      	str	r3, [sp, #8]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	2300      	movs	r3, #0
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	2200      	movs	r2, #0
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fd48 	bl	8008f2e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af04      	add	r7, sp, #16
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	4611      	mov	r1, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	460b      	mov	r3, r1
 80084b8:	80fb      	strh	r3, [r7, #6]
 80084ba:	4613      	mov	r3, r2
 80084bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084cc:	7979      	ldrb	r1, [r7, #5]
 80084ce:	7e3b      	ldrb	r3, [r7, #24]
 80084d0:	9303      	str	r3, [sp, #12]
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	2301      	movs	r3, #1
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	2300      	movs	r3, #0
 80084e0:	2200      	movs	r2, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fd23 	bl	8008f2e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b088      	sub	sp, #32
 80084f6:	af04      	add	r7, sp, #16
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	4611      	mov	r1, r2
 80084fe:	461a      	mov	r2, r3
 8008500:	460b      	mov	r3, r1
 8008502:	80fb      	strh	r3, [r7, #6]
 8008504:	4613      	mov	r3, r2
 8008506:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008508:	7979      	ldrb	r1, [r7, #5]
 800850a:	2300      	movs	r3, #0
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	9302      	str	r3, [sp, #8]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	2301      	movs	r3, #1
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	2300      	movs	r3, #0
 800851c:	2201      	movs	r2, #1
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 fd05 	bl	8008f2e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008524:	2300      	movs	r3, #0

}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b088      	sub	sp, #32
 8008532:	af04      	add	r7, sp, #16
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	4611      	mov	r1, r2
 800853a:	461a      	mov	r2, r3
 800853c:	460b      	mov	r3, r1
 800853e:	80fb      	strh	r3, [r7, #6]
 8008540:	4613      	mov	r3, r2
 8008542:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008552:	7979      	ldrb	r1, [r7, #5]
 8008554:	7e3b      	ldrb	r3, [r7, #24]
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	9302      	str	r3, [sp, #8]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	2301      	movs	r3, #1
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	2302      	movs	r3, #2
 8008566:	2200      	movs	r2, #0
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fce0 	bl	8008f2e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af04      	add	r7, sp, #16
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	4611      	mov	r1, r2
 8008584:	461a      	mov	r2, r3
 8008586:	460b      	mov	r3, r1
 8008588:	80fb      	strh	r3, [r7, #6]
 800858a:	4613      	mov	r3, r2
 800858c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800858e:	7979      	ldrb	r1, [r7, #5]
 8008590:	2300      	movs	r3, #0
 8008592:	9303      	str	r3, [sp, #12]
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	2301      	movs	r3, #1
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	2302      	movs	r3, #2
 80085a2:	2201      	movs	r2, #1
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fcc2 	bl	8008f2e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af04      	add	r7, sp, #16
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	70fb      	strb	r3, [r7, #3]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70bb      	strb	r3, [r7, #2]
 80085ca:	4613      	mov	r3, r2
 80085cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80085ce:	7878      	ldrb	r0, [r7, #1]
 80085d0:	78ba      	ldrb	r2, [r7, #2]
 80085d2:	78f9      	ldrb	r1, [r7, #3]
 80085d4:	8b3b      	ldrh	r3, [r7, #24]
 80085d6:	9302      	str	r3, [sp, #8]
 80085d8:	7d3b      	ldrb	r3, [r7, #20]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	7c3b      	ldrb	r3, [r7, #16]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	4603      	mov	r3, r0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fc55 	bl	8008e92 <USBH_LL_OpenPipe>

  return USBH_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fc74 	bl	8008ef0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	460b      	mov	r3, r1
 800861c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f836 	bl	8008690 <USBH_GetFreePipe>
 8008624:	4603      	mov	r3, r0
 8008626:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800862e:	4293      	cmp	r3, r2
 8008630:	d00a      	beq.n	8008648 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	89fb      	ldrh	r3, [r7, #14]
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	33e0      	adds	r3, #224	@ 0xe0
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008648:	89fb      	ldrh	r3, [r7, #14]
 800864a:	b2db      	uxtb	r3, r3
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	2b0f      	cmp	r3, #15
 8008664:	d80d      	bhi.n	8008682 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	33e0      	adds	r3, #224	@ 0xe0
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	33e0      	adds	r3, #224	@ 0xe0
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	440b      	add	r3, r1
 8008680:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
 80086a0:	e00f      	b.n	80086c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	33e0      	adds	r3, #224	@ 0xe0
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d102      	bne.n	80086bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	e007      	b.n	80086cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	3301      	adds	r3, #1
 80086c0:	73fb      	strb	r3, [r7, #15]
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b0f      	cmp	r3, #15
 80086c6:	d9ec      	bls.n	80086a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80086c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	@ 0x28
 80086dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e2:	4b7e      	ldr	r3, [pc, #504]	@ (80088dc <xTaskIncrementTick+0x204>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 80ed 	bne.w	80088c6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086ec:	4b7c      	ldr	r3, [pc, #496]	@ (80088e0 <xTaskIncrementTick+0x208>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80086f4:	4a7a      	ldr	r2, [pc, #488]	@ (80088e0 <xTaskIncrementTick+0x208>)
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d121      	bne.n	8008744 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008700:	4b78      	ldr	r3, [pc, #480]	@ (80088e4 <xTaskIncrementTick+0x20c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00b      	beq.n	8008722 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	e7fd      	b.n	800871e <xTaskIncrementTick+0x46>
 8008722:	4b70      	ldr	r3, [pc, #448]	@ (80088e4 <xTaskIncrementTick+0x20c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	61fb      	str	r3, [r7, #28]
 8008728:	4b6f      	ldr	r3, [pc, #444]	@ (80088e8 <xTaskIncrementTick+0x210>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a6d      	ldr	r2, [pc, #436]	@ (80088e4 <xTaskIncrementTick+0x20c>)
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	4a6d      	ldr	r2, [pc, #436]	@ (80088e8 <xTaskIncrementTick+0x210>)
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	4b6d      	ldr	r3, [pc, #436]	@ (80088ec <xTaskIncrementTick+0x214>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3301      	adds	r3, #1
 800873c:	4a6b      	ldr	r2, [pc, #428]	@ (80088ec <xTaskIncrementTick+0x214>)
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	f000 f93e 	bl	80089c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008744:	4b6a      	ldr	r3, [pc, #424]	@ (80088f0 <xTaskIncrementTick+0x218>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6a3a      	ldr	r2, [r7, #32]
 800874a:	429a      	cmp	r2, r3
 800874c:	f0c0 80a6 	bcc.w	800889c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008750:	4b64      	ldr	r3, [pc, #400]	@ (80088e4 <xTaskIncrementTick+0x20c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d104      	bne.n	8008764 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800875a:	4b65      	ldr	r3, [pc, #404]	@ (80088f0 <xTaskIncrementTick+0x218>)
 800875c:	f04f 32ff 	mov.w	r2, #4294967295
 8008760:	601a      	str	r2, [r3, #0]
                    break;
 8008762:	e09b      	b.n	800889c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008764:	4b5f      	ldr	r3, [pc, #380]	@ (80088e4 <xTaskIncrementTick+0x20c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008774:	6a3a      	ldr	r2, [r7, #32]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	429a      	cmp	r2, r3
 800877a:	d203      	bcs.n	8008784 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800877c:	4a5c      	ldr	r2, [pc, #368]	@ (80088f0 <xTaskIncrementTick+0x218>)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008782:	e08b      	b.n	800889c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	613b      	str	r3, [r7, #16]
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	68d2      	ldr	r2, [r2, #12]
 8008792:	609a      	str	r2, [r3, #8]
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	6892      	ldr	r2, [r2, #8]
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	3304      	adds	r3, #4
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d103      	bne.n	80087b2 <xTaskIncrementTick+0xda>
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	605a      	str	r2, [r3, #4]
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2200      	movs	r2, #0
 80087b6:	615a      	str	r2, [r3, #20]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01e      	beq.n	8008808 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	6a12      	ldr	r2, [r2, #32]
 80087d8:	609a      	str	r2, [r3, #8]
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	69d2      	ldr	r2, [r2, #28]
 80087e2:	605a      	str	r2, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	3318      	adds	r3, #24
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d103      	bne.n	80087f8 <xTaskIncrementTick+0x120>
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	6a1a      	ldr	r2, [r3, #32]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	605a      	str	r2, [r3, #4]
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	2200      	movs	r2, #0
 80087fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1e5a      	subs	r2, r3, #1
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	2201      	movs	r2, #1
 800880e:	409a      	lsls	r2, r3
 8008810:	4b38      	ldr	r3, [pc, #224]	@ (80088f4 <xTaskIncrementTick+0x21c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4313      	orrs	r3, r2
 8008816:	4a37      	ldr	r2, [pc, #220]	@ (80088f4 <xTaskIncrementTick+0x21c>)
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881e:	4936      	ldr	r1, [pc, #216]	@ (80088f8 <xTaskIncrementTick+0x220>)
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	440b      	add	r3, r1
 800882a:	3304      	adds	r3, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60bb      	str	r3, [r7, #8]
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	609a      	str	r2, [r3, #8]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	60da      	str	r2, [r3, #12]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	3204      	adds	r2, #4
 8008846:	605a      	str	r2, [r3, #4]
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	1d1a      	adds	r2, r3, #4
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	609a      	str	r2, [r3, #8]
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4a26      	ldr	r2, [pc, #152]	@ (80088f8 <xTaskIncrementTick+0x220>)
 800885e:	441a      	add	r2, r3
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	615a      	str	r2, [r3, #20]
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008868:	4923      	ldr	r1, [pc, #140]	@ (80088f8 <xTaskIncrementTick+0x220>)
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	1c59      	adds	r1, r3, #1
 8008878:	481f      	ldr	r0, [pc, #124]	@ (80088f8 <xTaskIncrementTick+0x220>)
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4403      	add	r3, r0
 8008884:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800888a:	4b1c      	ldr	r3, [pc, #112]	@ (80088fc <xTaskIncrementTick+0x224>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008890:	429a      	cmp	r2, r3
 8008892:	f67f af5d 	bls.w	8008750 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8008896:	2301      	movs	r3, #1
 8008898:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800889a:	e759      	b.n	8008750 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800889c:	4b17      	ldr	r3, [pc, #92]	@ (80088fc <xTaskIncrementTick+0x224>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a2:	4915      	ldr	r1, [pc, #84]	@ (80088f8 <xTaskIncrementTick+0x220>)
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d901      	bls.n	80088b8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80088b4:	2301      	movs	r3, #1
 80088b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80088b8:	4b11      	ldr	r3, [pc, #68]	@ (8008900 <xTaskIncrementTick+0x228>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088c4:	e004      	b.n	80088d0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80088c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008904 <xTaskIncrementTick+0x22c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008904 <xTaskIncrementTick+0x22c>)
 80088ce:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3728      	adds	r7, #40	@ 0x28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	200002a8 	.word	0x200002a8
 80088e0:	20000290 	.word	0x20000290
 80088e4:	20000288 	.word	0x20000288
 80088e8:	2000028c 	.word	0x2000028c
 80088ec:	200002a0 	.word	0x200002a0
 80088f0:	200002a4 	.word	0x200002a4
 80088f4:	20000294 	.word	0x20000294
 80088f8:	20000224 	.word	0x20000224
 80088fc:	20000220 	.word	0x20000220
 8008900:	2000029c 	.word	0x2000029c
 8008904:	20000298 	.word	0x20000298

08008908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800890e:	4b27      	ldr	r3, [pc, #156]	@ (80089ac <vTaskSwitchContext+0xa4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008916:	4b26      	ldr	r3, [pc, #152]	@ (80089b0 <vTaskSwitchContext+0xa8>)
 8008918:	2201      	movs	r2, #1
 800891a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800891c:	e040      	b.n	80089a0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800891e:	4b24      	ldr	r3, [pc, #144]	@ (80089b0 <vTaskSwitchContext+0xa8>)
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008924:	4b23      	ldr	r3, [pc, #140]	@ (80089b4 <vTaskSwitchContext+0xac>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	fab3 f383 	clz	r3, r3
 8008930:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008932:	7afb      	ldrb	r3, [r7, #11]
 8008934:	f1c3 031f 	rsb	r3, r3, #31
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	491f      	ldr	r1, [pc, #124]	@ (80089b8 <vTaskSwitchContext+0xb0>)
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <vTaskSwitchContext+0x5e>
        __asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
    }
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <vTaskSwitchContext+0x5a>
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4a11      	ldr	r2, [pc, #68]	@ (80089b8 <vTaskSwitchContext+0xb0>)
 8008972:	4413      	add	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	605a      	str	r2, [r3, #4]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	3308      	adds	r3, #8
 8008988:	429a      	cmp	r2, r3
 800898a:	d104      	bne.n	8008996 <vTaskSwitchContext+0x8e>
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	605a      	str	r2, [r3, #4]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a07      	ldr	r2, [pc, #28]	@ (80089bc <vTaskSwitchContext+0xb4>)
 800899e:	6013      	str	r3, [r2, #0]
}
 80089a0:	bf00      	nop
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	200002a8 	.word	0x200002a8
 80089b0:	2000029c 	.word	0x2000029c
 80089b4:	20000294 	.word	0x20000294
 80089b8:	20000224 	.word	0x20000224
 80089bc:	20000220 	.word	0x20000220

080089c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089c4:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <prvResetNextTaskUnblockTime+0x30>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <prvResetNextTaskUnblockTime+0x34>)
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295
 80089d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80089d6:	e005      	b.n	80089e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <prvResetNextTaskUnblockTime+0x30>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a04      	ldr	r2, [pc, #16]	@ (80089f4 <prvResetNextTaskUnblockTime+0x34>)
 80089e2:	6013      	str	r3, [r2, #0]
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000288 	.word	0x20000288
 80089f4:	200002a4 	.word	0x200002a4
	...

08008a00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008a00:	4b07      	ldr	r3, [pc, #28]	@ (8008a20 <pxCurrentTCBConst2>)
 8008a02:	6819      	ldr	r1, [r3, #0]
 8008a04:	6808      	ldr	r0, [r1, #0]
 8008a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	f380 8809 	msr	PSP, r0
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8811 	msr	BASEPRI, r0
 8008a1a:	4770      	bx	lr
 8008a1c:	f3af 8000 	nop.w

08008a20 <pxCurrentTCBConst2>:
 8008a20:	20000220 	.word	0x20000220
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
	...

08008a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008a30:	f3ef 8009 	mrs	r0, PSP
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	4b15      	ldr	r3, [pc, #84]	@ (8008a90 <pxCurrentTCBConst>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	f01e 0f10 	tst.w	lr, #16
 8008a40:	bf08      	it	eq
 8008a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4a:	6010      	str	r0, [r2, #0]
 8008a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a54:	f380 8811 	msr	BASEPRI, r0
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f7ff ff52 	bl	8008908 <vTaskSwitchContext>
 8008a64:	f04f 0000 	mov.w	r0, #0
 8008a68:	f380 8811 	msr	BASEPRI, r0
 8008a6c:	bc09      	pop	{r0, r3}
 8008a6e:	6819      	ldr	r1, [r3, #0]
 8008a70:	6808      	ldr	r0, [r1, #0]
 8008a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a76:	f01e 0f10 	tst.w	lr, #16
 8008a7a:	bf08      	it	eq
 8008a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a80:	f380 8809 	msr	PSP, r0
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	f3af 8000 	nop.w

08008a90 <pxCurrentTCBConst>:
 8008a90:	20000220 	.word	0x20000220
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop

08008a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
        __asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	607b      	str	r3, [r7, #4]
    }
 8008ab0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008ab2:	f7ff fe11 	bl	80086d8 <xTaskIncrementTick>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <SysTick_Handler+0x40>)
 8008abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008ace:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	490e      	ldr	r1, [pc, #56]	@ (8008b1c <MX_USB_HOST_Init+0x40>)
 8008ae4:	480e      	ldr	r0, [pc, #56]	@ (8008b20 <MX_USB_HOST_Init+0x44>)
 8008ae6:	f7fe f913 	bl	8006d10 <USBH_Init>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008af0:	f7f7 ff3c 	bl	800096c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008af4:	490b      	ldr	r1, [pc, #44]	@ (8008b24 <MX_USB_HOST_Init+0x48>)
 8008af6:	480a      	ldr	r0, [pc, #40]	@ (8008b20 <MX_USB_HOST_Init+0x44>)
 8008af8:	f7fe f9b7 	bl	8006e6a <USBH_RegisterClass>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b02:	f7f7 ff33 	bl	800096c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b06:	4806      	ldr	r0, [pc, #24]	@ (8008b20 <MX_USB_HOST_Init+0x44>)
 8008b08:	f7fe fa3b 	bl	8006f82 <USBH_Start>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b12:	f7f7 ff2b 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b16:	bf00      	nop
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	08008b3d 	.word	0x08008b3d
 8008b20:	200002ac 	.word	0x200002ac
 8008b24:	2000000c 	.word	0x2000000c

08008b28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b2c:	4802      	ldr	r0, [pc, #8]	@ (8008b38 <MX_USB_HOST_Process+0x10>)
 8008b2e:	f7fe fa39 	bl	8006fa4 <USBH_Process>
}
 8008b32:	bf00      	nop
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	200002ac 	.word	0x200002ac

08008b3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d819      	bhi.n	8008b84 <USBH_UserProcess+0x48>
 8008b50:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <USBH_UserProcess+0x1c>)
 8008b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b56:	bf00      	nop
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	08008b75 	.word	0x08008b75
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b7d 	.word	0x08008b7d
 8008b68:	08008b6d 	.word	0x08008b6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b6c:	4b09      	ldr	r3, [pc, #36]	@ (8008b94 <USBH_UserProcess+0x58>)
 8008b6e:	2203      	movs	r2, #3
 8008b70:	701a      	strb	r2, [r3, #0]
  break;
 8008b72:	e008      	b.n	8008b86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b74:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <USBH_UserProcess+0x58>)
 8008b76:	2202      	movs	r2, #2
 8008b78:	701a      	strb	r2, [r3, #0]
  break;
 8008b7a:	e004      	b.n	8008b86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b7c:	4b05      	ldr	r3, [pc, #20]	@ (8008b94 <USBH_UserProcess+0x58>)
 8008b7e:	2201      	movs	r2, #1
 8008b80:	701a      	strb	r2, [r3, #0]
  break;
 8008b82:	e000      	b.n	8008b86 <USBH_UserProcess+0x4a>

  default:
  break;
 8008b84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	20000684 	.word	0x20000684

08008b98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	@ 0x28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ba0:	f107 0314 	add.w	r3, r7, #20
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	605a      	str	r2, [r3, #4]
 8008baa:	609a      	str	r2, [r3, #8]
 8008bac:	60da      	str	r2, [r3, #12]
 8008bae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bb8:	d147      	bne.n	8008c4a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	4b25      	ldr	r3, [pc, #148]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc2:	4a24      	ldr	r2, [pc, #144]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008bca:	4b22      	ldr	r3, [pc, #136]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	4619      	mov	r1, r3
 8008bea:	481b      	ldr	r0, [pc, #108]	@ (8008c58 <HAL_HCD_MspInit+0xc0>)
 8008bec:	f7f8 fa70 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008bf0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c02:	230a      	movs	r3, #10
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c06:	f107 0314 	add.w	r3, r7, #20
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4812      	ldr	r0, [pc, #72]	@ (8008c58 <HAL_HCD_MspInit+0xc0>)
 8008c0e:	f7f8 fa5f 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c12:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c16:	4a0f      	ldr	r2, [pc, #60]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1c:	6353      	str	r3, [r2, #52]	@ 0x34
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	4b0c      	ldr	r3, [pc, #48]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c26:	4a0b      	ldr	r2, [pc, #44]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c2e:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <HAL_HCD_MspInit+0xbc>)
 8008c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	2043      	movs	r0, #67	@ 0x43
 8008c40:	f7f8 fa1c 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c44:	2043      	movs	r0, #67	@ 0x43
 8008c46:	f7f8 fa35 	bl	80010b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	3728      	adds	r7, #40	@ 0x28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40023800 	.word	0x40023800
 8008c58:	40020000 	.word	0x40020000

08008c5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe fd71 	bl	8007752 <USBH_LL_IncTimer>
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe fda9 	bl	80077de <USBH_LL_Connect>
}
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fdb2 	bl	800780c <USBH_LL_Disconnect>
}
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe fd63 	bl	80077a6 <USBH_LL_PortEnabled>
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fd63 	bl	80077c2 <USBH_LL_PortDisabled>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d12a      	bne.n	8008d6c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d16:	4a18      	ldr	r2, [pc, #96]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a15      	ldr	r2, [pc, #84]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d22:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d26:	4b14      	ldr	r3, [pc, #80]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008d2c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d2e:	4b12      	ldr	r3, [pc, #72]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d30:	2208      	movs	r2, #8
 8008d32:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d34:	4b10      	ldr	r3, [pc, #64]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d40:	4b0d      	ldr	r3, [pc, #52]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d42:	2202      	movs	r2, #2
 8008d44:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d46:	4b0c      	ldr	r3, [pc, #48]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d4c:	480a      	ldr	r0, [pc, #40]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d4e:	f7f8 fb5c 	bl	800140a <HAL_HCD_Init>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d58:	f7f7 fe08 	bl	800096c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d5c:	4806      	ldr	r0, [pc, #24]	@ (8008d78 <USBH_LL_Init+0x74>)
 8008d5e:	f7f8 ffbd 	bl	8001cdc <HAL_HCD_GetCurrentFrame>
 8008d62:	4603      	mov	r3, r0
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7fe fce4 	bl	8007734 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20000688 	.word	0x20000688

08008d7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7f8 ff2a 	bl	8001bec <HAL_HCD_Start>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f95e 	bl	8009060 <USBH_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7f8 ff32 	bl	8001c32 <HAL_HCD_Stop>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 f943 	bl	8009060 <USBH_Get_USB_Status>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008df0:	2301      	movs	r3, #1
 8008df2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7f8 ff7c 	bl	8001cf8 <HAL_HCD_GetCurrentSpeed>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d00c      	beq.n	8008e20 <USBH_LL_GetSpeed+0x38>
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d80d      	bhi.n	8008e26 <USBH_LL_GetSpeed+0x3e>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <USBH_LL_GetSpeed+0x2c>
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d003      	beq.n	8008e1a <USBH_LL_GetSpeed+0x32>
 8008e12:	e008      	b.n	8008e26 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
    break;
 8008e18:	e008      	b.n	8008e2c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1e:	e005      	b.n	8008e2c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e20:	2302      	movs	r3, #2
 8008e22:	73fb      	strb	r3, [r7, #15]
    break;
 8008e24:	e002      	b.n	8008e2c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2a:	bf00      	nop
  }
  return  speed;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f8 ff0d 	bl	8001c6c <HAL_HCD_ResetPort>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f901 	bl	8009060 <USBH_Get_USB_Status>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7f8 ff15 	bl	8001cb2 <HAL_HCD_HC_GetXferCount>
 8008e88:	4603      	mov	r3, r0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e92:	b590      	push	{r4, r7, lr}
 8008e94:	b089      	sub	sp, #36	@ 0x24
 8008e96:	af04      	add	r7, sp, #16
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	70fb      	strb	r3, [r7, #3]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70bb      	strb	r3, [r7, #2]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008eba:	787c      	ldrb	r4, [r7, #1]
 8008ebc:	78ba      	ldrb	r2, [r7, #2]
 8008ebe:	78f9      	ldrb	r1, [r7, #3]
 8008ec0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008ec2:	9302      	str	r3, [sp, #8]
 8008ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	4623      	mov	r3, r4
 8008ed2:	f7f8 fb01 	bl	80014d8 <HAL_HCD_HC_Init>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f8bf 	bl	8009060 <USBH_Get_USB_Status>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}

08008ef0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7f8 fb9a 	bl	8001648 <HAL_HCD_HC_Halt>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f8a0 	bl	8009060 <USBH_Get_USB_Status>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f2e:	b590      	push	{r4, r7, lr}
 8008f30:	b089      	sub	sp, #36	@ 0x24
 8008f32:	af04      	add	r7, sp, #16
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	70fb      	strb	r3, [r7, #3]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70bb      	strb	r3, [r7, #2]
 8008f44:	4613      	mov	r3, r2
 8008f46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008f56:	787c      	ldrb	r4, [r7, #1]
 8008f58:	78ba      	ldrb	r2, [r7, #2]
 8008f5a:	78f9      	ldrb	r1, [r7, #3]
 8008f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f60:	9303      	str	r3, [sp, #12]
 8008f62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f64:	9302      	str	r3, [sp, #8]
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4623      	mov	r3, r4
 8008f72:	f7f8 fb8d 	bl	8001690 <HAL_HCD_HC_SubmitRequest>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f86f 	bl	8009060 <USBH_Get_USB_Status>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd90      	pop	{r4, r7, pc}

08008f90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f8 fe6e 	bl	8001c88 <HAL_HCD_HC_GetURBState>
 8008fac:	4603      	mov	r3, r0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d103      	bne.n	8008fd4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f872 	bl	80090b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008fd4:	20c8      	movs	r0, #200	@ 0xc8
 8008fd6:	f7f7 ff75 	bl	8000ec4 <HAL_Delay>
  return USBH_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ffa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4613      	mov	r3, r2
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	3317      	adds	r3, #23
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009012:	78fa      	ldrb	r2, [r7, #3]
 8009014:	68f9      	ldr	r1, [r7, #12]
 8009016:	4613      	mov	r3, r2
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	440b      	add	r3, r1
 8009020:	333c      	adds	r3, #60	@ 0x3c
 8009022:	78ba      	ldrb	r2, [r7, #2]
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	e009      	b.n	800903c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	4613      	mov	r3, r2
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	440b      	add	r3, r1
 8009036:	333d      	adds	r3, #61	@ 0x3d
 8009038:	78ba      	ldrb	r2, [r7, #2]
 800903a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7f7 ff36 	bl	8000ec4 <HAL_Delay>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d817      	bhi.n	80090a4 <USBH_Get_USB_Status+0x44>
 8009074:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <USBH_Get_USB_Status+0x1c>)
 8009076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907a:	bf00      	nop
 800907c:	0800908d 	.word	0x0800908d
 8009080:	08009093 	.word	0x08009093
 8009084:	08009099 	.word	0x08009099
 8009088:	0800909f 	.word	0x0800909f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
    break;
 8009090:	e00b      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009092:	2302      	movs	r3, #2
 8009094:	73fb      	strb	r3, [r7, #15]
    break;
 8009096:	e008      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
    break;
 800909c:	e005      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800909e:	2302      	movs	r3, #2
 80090a0:	73fb      	strb	r3, [r7, #15]
    break;
 80090a2:	e002      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090a4:	2302      	movs	r3, #2
 80090a6:	73fb      	strb	r3, [r7, #15]
    break;
 80090a8:	bf00      	nop
  }
  return usb_status;
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	e001      	b.n	80090d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80090d2:	2301      	movs	r3, #1
 80090d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	461a      	mov	r2, r3
 80090da:	2101      	movs	r1, #1
 80090dc:	4803      	ldr	r0, [pc, #12]	@ (80090ec <MX_DriverVbusFS+0x34>)
 80090de:	f7f8 f97b 	bl	80013d8 <HAL_GPIO_WritePin>
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40020800 	.word	0x40020800

080090f0 <malloc>:
 80090f0:	4b02      	ldr	r3, [pc, #8]	@ (80090fc <malloc+0xc>)
 80090f2:	4601      	mov	r1, r0
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	f000 b82d 	b.w	8009154 <_malloc_r>
 80090fa:	bf00      	nop
 80090fc:	2000002c 	.word	0x2000002c

08009100 <free>:
 8009100:	4b02      	ldr	r3, [pc, #8]	@ (800910c <free+0xc>)
 8009102:	4601      	mov	r1, r0
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	f000 b8ef 	b.w	80092e8 <_free_r>
 800910a:	bf00      	nop
 800910c:	2000002c 	.word	0x2000002c

08009110 <sbrk_aligned>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4e0f      	ldr	r6, [pc, #60]	@ (8009150 <sbrk_aligned+0x40>)
 8009114:	460c      	mov	r4, r1
 8009116:	6831      	ldr	r1, [r6, #0]
 8009118:	4605      	mov	r5, r0
 800911a:	b911      	cbnz	r1, 8009122 <sbrk_aligned+0x12>
 800911c:	f000 f8ae 	bl	800927c <_sbrk_r>
 8009120:	6030      	str	r0, [r6, #0]
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 f8a9 	bl	800927c <_sbrk_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d103      	bne.n	8009136 <sbrk_aligned+0x26>
 800912e:	f04f 34ff 	mov.w	r4, #4294967295
 8009132:	4620      	mov	r0, r4
 8009134:	bd70      	pop	{r4, r5, r6, pc}
 8009136:	1cc4      	adds	r4, r0, #3
 8009138:	f024 0403 	bic.w	r4, r4, #3
 800913c:	42a0      	cmp	r0, r4
 800913e:	d0f8      	beq.n	8009132 <sbrk_aligned+0x22>
 8009140:	1a21      	subs	r1, r4, r0
 8009142:	4628      	mov	r0, r5
 8009144:	f000 f89a 	bl	800927c <_sbrk_r>
 8009148:	3001      	adds	r0, #1
 800914a:	d1f2      	bne.n	8009132 <sbrk_aligned+0x22>
 800914c:	e7ef      	b.n	800912e <sbrk_aligned+0x1e>
 800914e:	bf00      	nop
 8009150:	20000a68 	.word	0x20000a68

08009154 <_malloc_r>:
 8009154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009158:	1ccd      	adds	r5, r1, #3
 800915a:	f025 0503 	bic.w	r5, r5, #3
 800915e:	3508      	adds	r5, #8
 8009160:	2d0c      	cmp	r5, #12
 8009162:	bf38      	it	cc
 8009164:	250c      	movcc	r5, #12
 8009166:	2d00      	cmp	r5, #0
 8009168:	4606      	mov	r6, r0
 800916a:	db01      	blt.n	8009170 <_malloc_r+0x1c>
 800916c:	42a9      	cmp	r1, r5
 800916e:	d904      	bls.n	800917a <_malloc_r+0x26>
 8009170:	230c      	movs	r3, #12
 8009172:	6033      	str	r3, [r6, #0]
 8009174:	2000      	movs	r0, #0
 8009176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009250 <_malloc_r+0xfc>
 800917e:	f000 f869 	bl	8009254 <__malloc_lock>
 8009182:	f8d8 3000 	ldr.w	r3, [r8]
 8009186:	461c      	mov	r4, r3
 8009188:	bb44      	cbnz	r4, 80091dc <_malloc_r+0x88>
 800918a:	4629      	mov	r1, r5
 800918c:	4630      	mov	r0, r6
 800918e:	f7ff ffbf 	bl	8009110 <sbrk_aligned>
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	4604      	mov	r4, r0
 8009196:	d158      	bne.n	800924a <_malloc_r+0xf6>
 8009198:	f8d8 4000 	ldr.w	r4, [r8]
 800919c:	4627      	mov	r7, r4
 800919e:	2f00      	cmp	r7, #0
 80091a0:	d143      	bne.n	800922a <_malloc_r+0xd6>
 80091a2:	2c00      	cmp	r4, #0
 80091a4:	d04b      	beq.n	800923e <_malloc_r+0xea>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	4639      	mov	r1, r7
 80091aa:	4630      	mov	r0, r6
 80091ac:	eb04 0903 	add.w	r9, r4, r3
 80091b0:	f000 f864 	bl	800927c <_sbrk_r>
 80091b4:	4581      	cmp	r9, r0
 80091b6:	d142      	bne.n	800923e <_malloc_r+0xea>
 80091b8:	6821      	ldr	r1, [r4, #0]
 80091ba:	1a6d      	subs	r5, r5, r1
 80091bc:	4629      	mov	r1, r5
 80091be:	4630      	mov	r0, r6
 80091c0:	f7ff ffa6 	bl	8009110 <sbrk_aligned>
 80091c4:	3001      	adds	r0, #1
 80091c6:	d03a      	beq.n	800923e <_malloc_r+0xea>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	442b      	add	r3, r5
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	f8d8 3000 	ldr.w	r3, [r8]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	bb62      	cbnz	r2, 8009230 <_malloc_r+0xdc>
 80091d6:	f8c8 7000 	str.w	r7, [r8]
 80091da:	e00f      	b.n	80091fc <_malloc_r+0xa8>
 80091dc:	6822      	ldr	r2, [r4, #0]
 80091de:	1b52      	subs	r2, r2, r5
 80091e0:	d420      	bmi.n	8009224 <_malloc_r+0xd0>
 80091e2:	2a0b      	cmp	r2, #11
 80091e4:	d917      	bls.n	8009216 <_malloc_r+0xc2>
 80091e6:	1961      	adds	r1, r4, r5
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	6025      	str	r5, [r4, #0]
 80091ec:	bf18      	it	ne
 80091ee:	6059      	strne	r1, [r3, #4]
 80091f0:	6863      	ldr	r3, [r4, #4]
 80091f2:	bf08      	it	eq
 80091f4:	f8c8 1000 	streq.w	r1, [r8]
 80091f8:	5162      	str	r2, [r4, r5]
 80091fa:	604b      	str	r3, [r1, #4]
 80091fc:	4630      	mov	r0, r6
 80091fe:	f000 f82f 	bl	8009260 <__malloc_unlock>
 8009202:	f104 000b 	add.w	r0, r4, #11
 8009206:	1d23      	adds	r3, r4, #4
 8009208:	f020 0007 	bic.w	r0, r0, #7
 800920c:	1ac2      	subs	r2, r0, r3
 800920e:	bf1c      	itt	ne
 8009210:	1a1b      	subne	r3, r3, r0
 8009212:	50a3      	strne	r3, [r4, r2]
 8009214:	e7af      	b.n	8009176 <_malloc_r+0x22>
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	42a3      	cmp	r3, r4
 800921a:	bf0c      	ite	eq
 800921c:	f8c8 2000 	streq.w	r2, [r8]
 8009220:	605a      	strne	r2, [r3, #4]
 8009222:	e7eb      	b.n	80091fc <_malloc_r+0xa8>
 8009224:	4623      	mov	r3, r4
 8009226:	6864      	ldr	r4, [r4, #4]
 8009228:	e7ae      	b.n	8009188 <_malloc_r+0x34>
 800922a:	463c      	mov	r4, r7
 800922c:	687f      	ldr	r7, [r7, #4]
 800922e:	e7b6      	b.n	800919e <_malloc_r+0x4a>
 8009230:	461a      	mov	r2, r3
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	42a3      	cmp	r3, r4
 8009236:	d1fb      	bne.n	8009230 <_malloc_r+0xdc>
 8009238:	2300      	movs	r3, #0
 800923a:	6053      	str	r3, [r2, #4]
 800923c:	e7de      	b.n	80091fc <_malloc_r+0xa8>
 800923e:	230c      	movs	r3, #12
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	4630      	mov	r0, r6
 8009244:	f000 f80c 	bl	8009260 <__malloc_unlock>
 8009248:	e794      	b.n	8009174 <_malloc_r+0x20>
 800924a:	6005      	str	r5, [r0, #0]
 800924c:	e7d6      	b.n	80091fc <_malloc_r+0xa8>
 800924e:	bf00      	nop
 8009250:	20000a6c 	.word	0x20000a6c

08009254 <__malloc_lock>:
 8009254:	4801      	ldr	r0, [pc, #4]	@ (800925c <__malloc_lock+0x8>)
 8009256:	f000 b845 	b.w	80092e4 <__retarget_lock_acquire_recursive>
 800925a:	bf00      	nop
 800925c:	20000bac 	.word	0x20000bac

08009260 <__malloc_unlock>:
 8009260:	4801      	ldr	r0, [pc, #4]	@ (8009268 <__malloc_unlock+0x8>)
 8009262:	f000 b840 	b.w	80092e6 <__retarget_lock_release_recursive>
 8009266:	bf00      	nop
 8009268:	20000bac 	.word	0x20000bac

0800926c <memset>:
 800926c:	4402      	add	r2, r0
 800926e:	4603      	mov	r3, r0
 8009270:	4293      	cmp	r3, r2
 8009272:	d100      	bne.n	8009276 <memset+0xa>
 8009274:	4770      	bx	lr
 8009276:	f803 1b01 	strb.w	r1, [r3], #1
 800927a:	e7f9      	b.n	8009270 <memset+0x4>

0800927c <_sbrk_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	@ (8009298 <_sbrk_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f000 f878 	bl	800937c <_sbrk>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_sbrk_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_sbrk_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20000ba8 	.word	0x20000ba8

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4d0d      	ldr	r5, [pc, #52]	@ (80092d4 <__libc_init_array+0x38>)
 80092a0:	4c0d      	ldr	r4, [pc, #52]	@ (80092d8 <__libc_init_array+0x3c>)
 80092a2:	1b64      	subs	r4, r4, r5
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	2600      	movs	r6, #0
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	4d0b      	ldr	r5, [pc, #44]	@ (80092dc <__libc_init_array+0x40>)
 80092ae:	4c0c      	ldr	r4, [pc, #48]	@ (80092e0 <__libc_init_array+0x44>)
 80092b0:	f000 f872 	bl	8009398 <_init>
 80092b4:	1b64      	subs	r4, r4, r5
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	2600      	movs	r6, #0
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c4:	4798      	blx	r3
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ce:	4798      	blx	r3
 80092d0:	3601      	adds	r6, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	080093d4 	.word	0x080093d4
 80092d8:	080093d4 	.word	0x080093d4
 80092dc:	080093d4 	.word	0x080093d4
 80092e0:	080093d8 	.word	0x080093d8

080092e4 <__retarget_lock_acquire_recursive>:
 80092e4:	4770      	bx	lr

080092e6 <__retarget_lock_release_recursive>:
 80092e6:	4770      	bx	lr

080092e8 <_free_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4605      	mov	r5, r0
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d041      	beq.n	8009374 <_free_r+0x8c>
 80092f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092f4:	1f0c      	subs	r4, r1, #4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfb8      	it	lt
 80092fa:	18e4      	addlt	r4, r4, r3
 80092fc:	f7ff ffaa 	bl	8009254 <__malloc_lock>
 8009300:	4a1d      	ldr	r2, [pc, #116]	@ (8009378 <_free_r+0x90>)
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	b933      	cbnz	r3, 8009314 <_free_r+0x2c>
 8009306:	6063      	str	r3, [r4, #4]
 8009308:	6014      	str	r4, [r2, #0]
 800930a:	4628      	mov	r0, r5
 800930c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009310:	f7ff bfa6 	b.w	8009260 <__malloc_unlock>
 8009314:	42a3      	cmp	r3, r4
 8009316:	d908      	bls.n	800932a <_free_r+0x42>
 8009318:	6820      	ldr	r0, [r4, #0]
 800931a:	1821      	adds	r1, r4, r0
 800931c:	428b      	cmp	r3, r1
 800931e:	bf01      	itttt	eq
 8009320:	6819      	ldreq	r1, [r3, #0]
 8009322:	685b      	ldreq	r3, [r3, #4]
 8009324:	1809      	addeq	r1, r1, r0
 8009326:	6021      	streq	r1, [r4, #0]
 8009328:	e7ed      	b.n	8009306 <_free_r+0x1e>
 800932a:	461a      	mov	r2, r3
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	b10b      	cbz	r3, 8009334 <_free_r+0x4c>
 8009330:	42a3      	cmp	r3, r4
 8009332:	d9fa      	bls.n	800932a <_free_r+0x42>
 8009334:	6811      	ldr	r1, [r2, #0]
 8009336:	1850      	adds	r0, r2, r1
 8009338:	42a0      	cmp	r0, r4
 800933a:	d10b      	bne.n	8009354 <_free_r+0x6c>
 800933c:	6820      	ldr	r0, [r4, #0]
 800933e:	4401      	add	r1, r0
 8009340:	1850      	adds	r0, r2, r1
 8009342:	4283      	cmp	r3, r0
 8009344:	6011      	str	r1, [r2, #0]
 8009346:	d1e0      	bne.n	800930a <_free_r+0x22>
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	6053      	str	r3, [r2, #4]
 800934e:	4408      	add	r0, r1
 8009350:	6010      	str	r0, [r2, #0]
 8009352:	e7da      	b.n	800930a <_free_r+0x22>
 8009354:	d902      	bls.n	800935c <_free_r+0x74>
 8009356:	230c      	movs	r3, #12
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	e7d6      	b.n	800930a <_free_r+0x22>
 800935c:	6820      	ldr	r0, [r4, #0]
 800935e:	1821      	adds	r1, r4, r0
 8009360:	428b      	cmp	r3, r1
 8009362:	bf04      	itt	eq
 8009364:	6819      	ldreq	r1, [r3, #0]
 8009366:	685b      	ldreq	r3, [r3, #4]
 8009368:	6063      	str	r3, [r4, #4]
 800936a:	bf04      	itt	eq
 800936c:	1809      	addeq	r1, r1, r0
 800936e:	6021      	streq	r1, [r4, #0]
 8009370:	6054      	str	r4, [r2, #4]
 8009372:	e7ca      	b.n	800930a <_free_r+0x22>
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	bf00      	nop
 8009378:	20000a6c 	.word	0x20000a6c

0800937c <_sbrk>:
 800937c:	4a04      	ldr	r2, [pc, #16]	@ (8009390 <_sbrk+0x14>)
 800937e:	6811      	ldr	r1, [r2, #0]
 8009380:	4603      	mov	r3, r0
 8009382:	b909      	cbnz	r1, 8009388 <_sbrk+0xc>
 8009384:	4903      	ldr	r1, [pc, #12]	@ (8009394 <_sbrk+0x18>)
 8009386:	6011      	str	r1, [r2, #0]
 8009388:	6810      	ldr	r0, [r2, #0]
 800938a:	4403      	add	r3, r0
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	4770      	bx	lr
 8009390:	20000bb0 	.word	0x20000bb0
 8009394:	20000bb8 	.word	0x20000bb8

08009398 <_init>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr

080093a4 <_fini>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr
